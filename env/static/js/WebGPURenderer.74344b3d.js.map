{"mappings":"A,C,K,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,A,W,iB,C,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,a,I,G,E,E,O,C,e,I,GEAO,IAAM,EAAa,CACtB,KAAM,cACN,OAAQ,CACJ,OAAkB,CAAA;;;;;;;QAAA,CAAA,CAQlB,KAAgB,CAAA;;QAAA,CAAA,AAAA,EAIpB,SAAU,CACN,OAAkB,CAAA;;;;;QAAA,CAAA,CAMlB,KAAgB,CAAA;;QAAA,CAAA,AAAA,CAIxB,EAEa,EAAe,CACxB,KAAM,cACN,OAAQ,CACJ,OAAkB,CAAA;;QAAA,CAAA,CAGlB,KAAgB,CAAA;;QAAA,CAAA,AAAA,EAIpB,SAAU,CACN,OAAkB,CAAA;;;;QAAA,CAAA,CAKlB,KAAgB,CAAA;;QAAA,CAAA,AAAA,CAIxB,C,G,E,Q,S,C,C,C,E,E,E,O,C,gB,I,G,E,E,O,C,oB,I,G,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SE5BO,IAAM,EAAgB,CACzB,EAAA,gBAAA,CACA,EAAA,mBAAA,CACA,EAAA,WAAA,CACA,EAAA,UAAA,CACA,EAAA,iBAAA,CACA,EAAA,eAAA,CACA,EAAA,qBAAA,CACA,EAAA,aAAA,CACA,EAAA,gBAAA,CACJ,CAEa,EAAoB,CAC7B,EAAA,aAAA,CACA,EAAA,WAAA,CACA,EAAA,UAAA,CACA,EAAA,eAAA,CACA,EAAA,aAAA,CACA,EAAA,eAAA,CACA,EAAA,aAAA,CACA,EAAA,gBAAA,CACJ,A,G,E,Q,S,C,C,C,E,E,E,O,C,mB,I,G,I,E,E,QErBO,OAAM,EAaT,YAAY,CACZ,CAAA,CACI,IAAA,CAAK,SAAY,CAAA,CAAA,CAGd,cAAc,CAAA,CAA4B,CACjD,CAAA,CACI,IAAA,CAAK,SAAU,CAAA,WAAA,CAAY,KAAM,CAAA,KAAA,CAAM,GAEvC,EAAe,GAAA,CAAI,EAAS,CAGzB,QAAQ,CACf,CAAA,CACS,EAAU,YAA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","sources":["<anon>","node_modules/pixi.js/lib/rendering/high-shader/shader-bits/textureBit.mjs","node_modules/pixi.js/src/rendering/high-shader/shader-bits/textureBit.ts","node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs","node_modules/pixi.js/src/rendering/renderers/shared/system/SharedSystems.ts","node_modules/pixi.js/lib/scene/container/CustomRenderPipe.mjs","node_modules/pixi.js/src/scene/container/CustomRenderPipe.ts","node_modules/pixi.js/lib/scene/container/RenderGroupPipe.mjs","node_modules/pixi.js/src/scene/container/RenderGroupPipe.ts","node_modules/pixi.js/lib/scene/container/utils/executeInstructions.mjs","node_modules/pixi.js/src/scene/container/utils/executeInstructions.ts","node_modules/pixi.js/lib/scene/container/RenderGroupSystem.mjs","node_modules/pixi.js/src/scene/container/RenderGroupSystem.ts","node_modules/pixi.js/lib/scene/container/utils/buildInstructions.mjs","node_modules/pixi.js/src/scene/container/utils/buildInstructions.ts","node_modules/pixi.js/lib/scene/container/utils/collectRenderGroups.mjs","node_modules/pixi.js/src/scene/container/utils/collectRenderGroups.ts","node_modules/pixi.js/lib/scene/container/utils/updateRenderGroupTransforms.mjs","node_modules/pixi.js/src/scene/container/utils/updateRenderGroupTransforms.ts","node_modules/pixi.js/lib/scene/container/utils/mixColors.mjs","node_modules/pixi.js/src/scene/container/utils/mixColors.ts","node_modules/pixi.js/lib/scene/container/utils/mixHexColors.mjs","node_modules/pixi.js/src/scene/container/utils/mixHexColors.ts","node_modules/pixi.js/lib/scene/container/utils/validateRenderables.mjs","node_modules/pixi.js/src/scene/container/utils/validateRenderables.ts","node_modules/pixi.js/lib/scene/sprite/SpritePipe.mjs","node_modules/pixi.js/src/scene/sprite/SpritePipe.ts","node_modules/pixi.js/lib/rendering/batcher/shared/BatcherPipe.mjs","node_modules/pixi.js/src/rendering/batcher/shared/BatcherPipe.ts","node_modules/pixi.js/lib/rendering/mask/alpha/AlphaMaskPipe.mjs","node_modules/pixi.js/src/rendering/mask/alpha/AlphaMaskPipe.ts","node_modules/pixi.js/lib/filters/mask/MaskFilter.mjs","node_modules/pixi.js/src/filters/mask/MaskFilter.ts","node_modules/pixi.js/lib/filters/Filter.mjs","node_modules/pixi.js/src/filters/Filter.ts","node_modules/pixi.js/lib/filters/mask/mask.frag.mjs","node_modules/pixi.js/lib/filters/mask/mask.vert.mjs","node_modules/pixi.js/lib/filters/mask/mask.wgsl.mjs","node_modules/pixi.js/lib/rendering/mask/color/ColorMaskPipe.mjs","node_modules/pixi.js/src/rendering/mask/color/ColorMaskPipe.ts","node_modules/pixi.js/lib/rendering/mask/stencil/StencilMaskPipe.mjs","node_modules/pixi.js/src/rendering/mask/stencil/StencilMaskPipe.ts","node_modules/pixi.js/lib/rendering/renderers/shared/background/BackgroundSystem.mjs","node_modules/pixi.js/src/rendering/renderers/shared/background/BackgroundSystem.ts","node_modules/pixi.js/lib/rendering/renderers/shared/blendModes/BlendModePipe.mjs","node_modules/pixi.js/src/rendering/renderers/shared/blendModes/BlendModePipe.ts","node_modules/pixi.js/lib/rendering/renderers/shared/extract/ExtractSystem.mjs","node_modules/pixi.js/src/rendering/renderers/shared/extract/ExtractSystem.ts","node_modules/pixi.js/lib/rendering/renderers/shared/extract/GenerateTextureSystem.mjs","node_modules/pixi.js/src/rendering/renderers/shared/extract/GenerateTextureSystem.ts","node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderTexture.mjs","node_modules/pixi.js/src/rendering/renderers/shared/texture/RenderTexture.ts","node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/GlobalUniformSystem.mjs","node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/GlobalUniformSystem.ts","node_modules/pixi.js/lib/rendering/renderers/shared/startup/HelloSystem.mjs","node_modules/pixi.js/src/rendering/renderers/shared/startup/HelloSystem.ts","node_modules/pixi.js/lib/utils/sayHello.mjs","node_modules/pixi.js/src/utils/sayHello.ts","node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureGCSystem.mjs","node_modules/pixi.js/src/rendering/renderers/shared/texture/TextureGCSystem.ts","node_modules/pixi.js/lib/rendering/renderers/shared/view/ViewSystem.mjs","node_modules/pixi.js/src/rendering/renderers/shared/view/ViewSystem.ts","node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs","node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/RenderTarget.ts","node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs","node_modules/pixi.js/src/rendering/renderers/shared/texture/utils/getCanvasTexture.ts","node_modules/pixi.js/lib/rendering/renderers/shared/shader/UboSystem.mjs","node_modules/pixi.js/src/rendering/renderers/shared/shader/UboSystem.ts","node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/createUboSyncFunction.mjs","node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/createUboSyncFunction.ts","node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uniformParsers.mjs","node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/uniformParsers.ts","node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uboSyncFunctions.mjs","node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/uboSyncFunctions.ts","node_modules/pixi.js/lib/rendering/renderers/shared/buffer/BufferResource.mjs","node_modules/pixi.js/src/rendering/renderers/shared/buffer/BufferResource.ts","node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/ensureAttributes.mjs","node_modules/pixi.js/src/rendering/renderers/gl/shader/program/ensureAttributes.ts","node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStencilModesToPixi.mjs","node_modules/pixi.js/src/rendering/renderers/gpu/state/GpuStencilModesToPixi.ts","node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs","node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/RenderTargetSystem.ts","node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/calculateProjection.mjs","node_modules/pixi.js/src/rendering/renderers/gpu/renderTarget/calculateProjection.ts","node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/isRenderingToScreen.mjs","node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/isRenderingToScreen.ts"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequireedc5\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"2eN0B\", function(module, exports) {\n\n$parcel$export(module.exports, \"textureBit\", () => $b4b1ba1cdca9a769$export$db13c76603bca4d1);\n$parcel$export(module.exports, \"textureBitGl\", () => $b4b1ba1cdca9a769$export$dfbe934dc5760b41);\n\"use strict\";\nconst $b4b1ba1cdca9a769$export$db13c76603bca4d1 = {\n    name: \"texture-bit\",\n    vertex: {\n        header: /* wgsl */ `\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `,\n        main: /* wgsl */ `\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* wgsl */ `\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `,\n        main: /* wgsl */ `\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    }\n};\nconst $b4b1ba1cdca9a769$export$dfbe934dc5760b41 = {\n    name: \"texture-bit\",\n    vertex: {\n        header: /* glsl */ `\n            uniform mat3 uTextureMatrix;\n        `,\n        main: /* glsl */ `\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* glsl */ `\n        uniform sampler2D uTexture;\n\n         \n        `,\n        main: /* glsl */ `\n            outColor = texture(uTexture, vUV);\n        `\n    }\n};\n\n});\n\nparcelRegister(\"90msd\", function(module, exports) {\n\n$parcel$export(module.exports, \"SharedSystems\", () => $8eb8d7293d727080$export$556f4f9086226a47);\n$parcel$export(module.exports, \"SharedRenderPipes\", () => $8eb8d7293d727080$export$4804359c3f750499);\n\nvar $8zmEe = parcelRequire(\"8zmEe\");\n\nvar $4b1tr = parcelRequire(\"4b1tr\");\n\nvar $iq4Mo = parcelRequire(\"iq4Mo\");\n\nvar $aeLnu = parcelRequire(\"aeLnu\");\n\nvar $f8UzK = parcelRequire(\"f8UzK\");\n\nvar $70iBB = parcelRequire(\"70iBB\");\n\nvar $lm5jj = parcelRequire(\"lm5jj\");\n\nvar $6Tf82 = parcelRequire(\"6Tf82\");\n\nvar $6dSGR = parcelRequire(\"6dSGR\");\n\nvar $12ovK = parcelRequire(\"12ovK\");\n\nvar $dYc5p = parcelRequire(\"dYc5p\");\n\nvar $ehnqt = parcelRequire(\"ehnqt\");\n\nvar $bbQtN = parcelRequire(\"bbQtN\");\n\nvar $8OWAV = parcelRequire(\"8OWAV\");\n\nvar $dxsuA = parcelRequire(\"dxsuA\");\n\nvar $pVL8q = parcelRequire(\"pVL8q\");\n\nvar $3yPFG = parcelRequire(\"3yPFG\");\n\"use strict\";\nconst $8eb8d7293d727080$export$556f4f9086226a47 = [\n    (0, $12ovK.BackgroundSystem),\n    (0, $8OWAV.GlobalUniformSystem),\n    (0, $dxsuA.HelloSystem),\n    (0, $3yPFG.ViewSystem),\n    (0, $iq4Mo.RenderGroupSystem),\n    (0, $pVL8q.TextureGCSystem),\n    (0, $bbQtN.GenerateTextureSystem),\n    (0, $ehnqt.ExtractSystem),\n    (0, $f8UzK.RendererInitHook)\n];\nconst $8eb8d7293d727080$export$4804359c3f750499 = [\n    (0, $dYc5p.BlendModePipe),\n    (0, $70iBB.BatcherPipe),\n    (0, $aeLnu.SpritePipe),\n    (0, $4b1tr.RenderGroupPipe),\n    (0, $lm5jj.AlphaMaskPipe),\n    (0, $6dSGR.StencilMaskPipe),\n    (0, $6Tf82.ColorMaskPipe),\n    (0, $8zmEe.CustomRenderPipe)\n];\n\n});\nparcelRegister(\"8zmEe\", function(module, exports) {\n\n$parcel$export(module.exports, \"CustomRenderPipe\", () => $6af073b1f1cdfddd$export$e576ade34298fbbb);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\"use strict\";\nclass $6af073b1f1cdfddd$export$e576ade34298fbbb {\n    constructor(renderer){\n        this._renderer = renderer;\n    }\n    addRenderable(container, instructionSet) {\n        this._renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add(container);\n    }\n    execute(container) {\n        if (!container.isRenderable) return;\n        container.render(this._renderer);\n    }\n    destroy() {\n        this._renderer = null;\n    }\n}\n$6af073b1f1cdfddd$export$e576ade34298fbbb.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLPipes,\n        (0, $fgNUY.ExtensionType).WebGPUPipes,\n        (0, $fgNUY.ExtensionType).CanvasPipes\n    ],\n    name: \"customRender\"\n};\n\n});\n\nparcelRegister(\"4b1tr\", function(module, exports) {\n\n$parcel$export(module.exports, \"RenderGroupPipe\", () => $91b4e43337b8edcd$export$9d1db8757b18c590);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\nvar $agj0A = parcelRequire(\"agj0A\");\n\"use strict\";\nclass $91b4e43337b8edcd$export$9d1db8757b18c590 {\n    constructor(renderer){\n        this._renderer = renderer;\n    }\n    addRenderGroup(renderGroup, instructionSet) {\n        this._renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add(renderGroup);\n    }\n    execute(renderGroup) {\n        if (!renderGroup.isRenderable) return;\n        this._renderer.globalUniforms.push({\n            worldTransformMatrix: renderGroup.worldTransform,\n            worldColor: renderGroup.worldColorAlpha\n        });\n        (0, $agj0A.executeInstructions)(renderGroup, this._renderer.renderPipes);\n        this._renderer.globalUniforms.pop();\n    }\n    destroy() {\n        this._renderer = null;\n    }\n}\n$91b4e43337b8edcd$export$9d1db8757b18c590.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLPipes,\n        (0, $fgNUY.ExtensionType).WebGPUPipes,\n        (0, $fgNUY.ExtensionType).CanvasPipes\n    ],\n    name: \"renderGroup\"\n};\n\n});\nparcelRegister(\"agj0A\", function(module, exports) {\n\n$parcel$export(module.exports, \"executeInstructions\", () => $92584891c770782f$export$de87bf58cb76142c);\n\"use strict\";\nfunction $92584891c770782f$export$de87bf58cb76142c(renderGroup, renderer) {\n    const instructionSet = renderGroup.instructionSet;\n    const instructions = instructionSet.instructions;\n    for(let i = 0; i < instructionSet.instructionSize; i++){\n        const instruction = instructions[i];\n        renderer[instruction.renderPipeId].execute(instruction);\n    }\n}\n\n});\n\n\nparcelRegister(\"iq4Mo\", function(module, exports) {\n\n$parcel$export(module.exports, \"RenderGroupSystem\", () => $429d57e5692cdc49$export$e48941ab3223d0e5);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\nvar $2FMN6 = parcelRequire(\"2FMN6\");\n\nvar $2S0kj = parcelRequire(\"2S0kj\");\n\nvar $eNwlK = parcelRequire(\"eNwlK\");\n\nvar $agj0A = parcelRequire(\"agj0A\");\n\nvar $39AUq = parcelRequire(\"39AUq\");\n\nvar $4MdtP = parcelRequire(\"4MdtP\");\n\"use strict\";\nconst $429d57e5692cdc49$var$tempMatrix = new (0, $2FMN6.Matrix)();\nclass $429d57e5692cdc49$export$e48941ab3223d0e5 {\n    constructor(renderer){\n        this._renderer = renderer;\n    }\n    render({ container: container, transform: transform }) {\n        container.isRenderGroup = true;\n        const parent = container.parent;\n        const renderGroupParent = container.renderGroup.renderGroupParent;\n        container.parent = null;\n        container.renderGroup.renderGroupParent = null;\n        const renderer = this._renderer;\n        const renderGroups = (0, $eNwlK.collectRenderGroups)(container.renderGroup, []);\n        let originalLocalTransform = $429d57e5692cdc49$var$tempMatrix;\n        if (transform) {\n            originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n            container.renderGroup.localTransform.copyFrom(transform);\n        }\n        const renderPipes = renderer.renderPipes;\n        for(let i = 0; i < renderGroups.length; i++){\n            const renderGroup = renderGroups[i];\n            renderGroup.runOnRender();\n            renderGroup.instructionSet.renderPipes = renderPipes;\n            if (!renderGroup.structureDidChange) (0, $4MdtP.validateRenderables)(renderGroup, renderPipes);\n            (0, $39AUq.updateRenderGroupTransforms)(renderGroup);\n            if (renderGroup.structureDidChange) {\n                renderGroup.structureDidChange = false;\n                (0, $2S0kj.buildInstructions)(renderGroup, renderPipes);\n            } else $429d57e5692cdc49$var$updateRenderables(renderGroup);\n            renderGroup.childrenRenderablesToUpdate.index = 0;\n            renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n        }\n        renderer.globalUniforms.start({\n            worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n            worldColor: container.renderGroup.worldColorAlpha\n        });\n        (0, $agj0A.executeInstructions)(container.renderGroup, renderPipes);\n        if (renderPipes.uniformBatch) renderPipes.uniformBatch.renderEnd();\n        if (transform) container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n        container.parent = parent;\n        container.renderGroup.renderGroupParent = renderGroupParent;\n    }\n    destroy() {\n        this._renderer = null;\n    }\n}\n/** @ignore */ $429d57e5692cdc49$export$e48941ab3223d0e5.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLSystem,\n        (0, $fgNUY.ExtensionType).WebGPUSystem,\n        (0, $fgNUY.ExtensionType).CanvasSystem\n    ],\n    name: \"renderGroup\"\n};\nfunction $429d57e5692cdc49$var$updateRenderables(renderGroup) {\n    const { list: list, index: index } = renderGroup.childrenRenderablesToUpdate;\n    for(let i = 0; i < index; i++){\n        const container = list[i];\n        if (container.didViewUpdate) renderGroup.updateRenderable(container);\n    }\n}\n\n});\nparcelRegister(\"2S0kj\", function(module, exports) {\n\n$parcel$export(module.exports, \"buildInstructions\", () => $0d1b345ef5cb541a$export$bc99a0392fedc260);\n$parcel$export(module.exports, \"collectAllRenderables\", () => $0d1b345ef5cb541a$export$d0ce49decf05e61d);\n\"use strict\";\nfunction $0d1b345ef5cb541a$export$bc99a0392fedc260(renderGroup, renderPipes) {\n    const root = renderGroup.root;\n    const instructionSet = renderGroup.instructionSet;\n    instructionSet.reset();\n    renderPipes.batch.buildStart(instructionSet);\n    renderPipes.blendMode.buildStart();\n    renderPipes.colorMask.buildStart();\n    if (root.sortableChildren) root.sortChildren();\n    $0d1b345ef5cb541a$var$collectAllRenderablesAdvanced(root, instructionSet, renderPipes, true);\n    renderPipes.batch.buildEnd(instructionSet);\n    renderPipes.blendMode.buildEnd(instructionSet);\n}\nfunction $0d1b345ef5cb541a$export$d0ce49decf05e61d(container, instructionSet, rendererPipes) {\n    if (container.globalDisplayStatus < 7 || !container.includeInBuild) return;\n    if (container.sortableChildren) container.sortChildren();\n    if (container.isSimple) $0d1b345ef5cb541a$var$collectAllRenderablesSimple(container, instructionSet, rendererPipes);\n    else $0d1b345ef5cb541a$var$collectAllRenderablesAdvanced(container, instructionSet, rendererPipes, false);\n}\nfunction $0d1b345ef5cb541a$var$collectAllRenderablesSimple(container, instructionSet, renderPipes) {\n    if (container.renderPipeId) {\n        renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n        container.didViewUpdate = false;\n        const rp = renderPipes;\n        rp[container.renderPipeId].addRenderable(container, instructionSet);\n    }\n    if (!container.renderGroup) {\n        const children = container.children;\n        const length = children.length;\n        for(let i = 0; i < length; i++)$0d1b345ef5cb541a$export$d0ce49decf05e61d(children[i], instructionSet, renderPipes);\n    }\n}\nfunction $0d1b345ef5cb541a$var$collectAllRenderablesAdvanced(container, instructionSet, renderPipes, isRoot) {\n    if (!isRoot && container.renderGroup) renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n    else {\n        for(let i = 0; i < container.effects.length; i++){\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe];\n            pipe.push(effect, container, instructionSet);\n        }\n        const renderPipeId = container.renderPipeId;\n        if (renderPipeId) {\n            renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n            container.didViewUpdate = false;\n            const pipe = renderPipes[renderPipeId];\n            pipe.addRenderable(container, instructionSet);\n        }\n        const children = container.children;\n        if (children.length) for(let i = 0; i < children.length; i++)$0d1b345ef5cb541a$export$d0ce49decf05e61d(children[i], instructionSet, renderPipes);\n        for(let i = container.effects.length - 1; i >= 0; i--){\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe];\n            pipe.pop(effect, container, instructionSet);\n        }\n    }\n}\n\n});\n\nparcelRegister(\"eNwlK\", function(module, exports) {\n\n$parcel$export(module.exports, \"collectRenderGroups\", () => $8dcd18fd45ce4877$export$5a19a0766b66a8a2);\n\"use strict\";\nfunction $8dcd18fd45ce4877$export$5a19a0766b66a8a2(renderGroup, out = []) {\n    out.push(renderGroup);\n    for(let i = 0; i < renderGroup.renderGroupChildren.length; i++)$8dcd18fd45ce4877$export$5a19a0766b66a8a2(renderGroup.renderGroupChildren[i], out);\n    return out;\n}\n\n});\n\nparcelRegister(\"39AUq\", function(module, exports) {\n\n$parcel$export(module.exports, \"updateRenderGroupTransforms\", () => $a8e28e8fdd0c1cd9$export$1c1e67f49974a5b5);\n\nvar $jNMvk = parcelRequire(\"jNMvk\");\n\nvar $4lIEI = parcelRequire(\"4lIEI\");\n\"use strict\";\nconst $a8e28e8fdd0c1cd9$var$tempContainer = new (0, $jNMvk.Container)();\nconst $a8e28e8fdd0c1cd9$var$UPDATE_BLEND_COLOR_VISIBLE = (0, $jNMvk.UPDATE_VISIBLE) | (0, $jNMvk.UPDATE_COLOR) | (0, $jNMvk.UPDATE_BLEND);\nfunction $a8e28e8fdd0c1cd9$export$1c1e67f49974a5b5(renderGroup, updateChildRenderGroups = false) {\n    $a8e28e8fdd0c1cd9$export$50ad8695661e3665(renderGroup);\n    const childrenToUpdate = renderGroup.childrenToUpdate;\n    const updateTick = renderGroup.updateTick++;\n    for(const j in childrenToUpdate){\n        const renderGroupDepth = Number(j);\n        const childrenAtDepth = childrenToUpdate[j];\n        const list = childrenAtDepth.list;\n        const index = childrenAtDepth.index;\n        for(let i = 0; i < index; i++){\n            const child = list[i];\n            if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth) $a8e28e8fdd0c1cd9$export$cf7b65c878eb783a(child, updateTick, 0);\n        }\n        childrenAtDepth.index = 0;\n    }\n    if (updateChildRenderGroups) for(let i = 0; i < renderGroup.renderGroupChildren.length; i++)$a8e28e8fdd0c1cd9$export$1c1e67f49974a5b5(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n}\nfunction $a8e28e8fdd0c1cd9$export$50ad8695661e3665(renderGroup) {\n    const root = renderGroup.root;\n    let worldAlpha;\n    if (renderGroup.renderGroupParent) {\n        const renderGroupParent = renderGroup.renderGroupParent;\n        renderGroup.worldTransform.appendFrom(root.relativeGroupTransform, renderGroupParent.worldTransform);\n        renderGroup.worldColor = (0, $4lIEI.mixColors)(root.groupColor, renderGroupParent.worldColor);\n        worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n    } else {\n        renderGroup.worldTransform.copyFrom(root.localTransform);\n        renderGroup.worldColor = root.localColor;\n        worldAlpha = root.localAlpha;\n    }\n    worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n    renderGroup.worldAlpha = worldAlpha;\n    renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction $a8e28e8fdd0c1cd9$export$cf7b65c878eb783a(container, updateTick, updateFlags) {\n    if (updateTick === container.updateTick) return;\n    container.updateTick = updateTick;\n    container.didChange = false;\n    const localTransform = container.localTransform;\n    container.updateLocalTransform();\n    const parent = container.parent;\n    if (parent && !parent.renderGroup) {\n        updateFlags = updateFlags | container._updateFlags;\n        container.relativeGroupTransform.appendFrom(localTransform, parent.relativeGroupTransform);\n        if (updateFlags & $a8e28e8fdd0c1cd9$var$UPDATE_BLEND_COLOR_VISIBLE) $a8e28e8fdd0c1cd9$var$updateColorBlendVisibility(container, parent, updateFlags);\n    } else {\n        updateFlags = container._updateFlags;\n        container.relativeGroupTransform.copyFrom(localTransform);\n        if (updateFlags & $a8e28e8fdd0c1cd9$var$UPDATE_BLEND_COLOR_VISIBLE) $a8e28e8fdd0c1cd9$var$updateColorBlendVisibility(container, $a8e28e8fdd0c1cd9$var$tempContainer, updateFlags);\n    }\n    if (!container.renderGroup) {\n        const children = container.children;\n        const length = children.length;\n        for(let i = 0; i < length; i++)$a8e28e8fdd0c1cd9$export$cf7b65c878eb783a(children[i], updateTick, updateFlags);\n        const renderGroup = container.parentRenderGroup;\n        if (container.renderPipeId && !renderGroup.structureDidChange) renderGroup.updateRenderable(container);\n    }\n}\nfunction $a8e28e8fdd0c1cd9$var$updateColorBlendVisibility(container, parent, updateFlags) {\n    if (updateFlags & (0, $jNMvk.UPDATE_COLOR)) {\n        container.groupColor = (0, $4lIEI.mixColors)(container.localColor, parent.groupColor);\n        let groupAlpha = container.localAlpha * parent.groupAlpha;\n        groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n        container.groupAlpha = groupAlpha;\n        container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n    }\n    if (updateFlags & (0, $jNMvk.UPDATE_BLEND)) container.groupBlendMode = container.localBlendMode === \"inherit\" ? parent.groupBlendMode : container.localBlendMode;\n    if (updateFlags & (0, $jNMvk.UPDATE_VISIBLE)) container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n    container._updateFlags = 0;\n}\n\n});\nparcelRegister(\"4lIEI\", function(module, exports) {\n\n$parcel$export(module.exports, \"mixColors\", () => $5b498936bda355a0$export$72a85c3a80ccc403);\n\nvar $5557G = parcelRequire(\"5557G\");\n\"use strict\";\nconst $5b498936bda355a0$var$WHITE_BGR = 16777215;\nfunction $5b498936bda355a0$export$72a85c3a80ccc403(localBGRColor, parentBGRColor) {\n    if (localBGRColor === $5b498936bda355a0$var$WHITE_BGR || parentBGRColor === $5b498936bda355a0$var$WHITE_BGR) return localBGRColor + parentBGRColor - $5b498936bda355a0$var$WHITE_BGR;\n    return (0, $5557G.mixHexColors)(localBGRColor, parentBGRColor, 0.5);\n}\nfunction $5b498936bda355a0$export$2c7842eb56139270(localColorRGB, localAlpha, parentColor) {\n    const parentAlpha = (parentColor >> 24 & 255) / 255;\n    const globalAlpha = localAlpha * parentAlpha * 255;\n    const localBGRColor = ((localColorRGB & 255) << 16) + (localColorRGB & 65280) + (localColorRGB >> 16 & 255);\n    const parentBGRColor = parentColor & 16777215;\n    let sharedBGRColor;\n    if (localBGRColor === $5b498936bda355a0$var$WHITE_BGR || parentBGRColor === $5b498936bda355a0$var$WHITE_BGR) sharedBGRColor = localBGRColor + parentBGRColor - $5b498936bda355a0$var$WHITE_BGR;\n    else sharedBGRColor = (0, $5557G.mixHexColors)(localBGRColor, parentBGRColor, 0.5);\n    return sharedBGRColor + (globalAlpha << 24);\n}\n\n});\nparcelRegister(\"5557G\", function(module, exports) {\n\n$parcel$export(module.exports, \"mixHexColors\", () => $e49629c82e090213$export$ff72adc46f6bc63c);\n\"use strict\";\nfunction $e49629c82e090213$export$ff72adc46f6bc63c(color1, color2, ratio) {\n    const r1 = color1 >> 16 & 255;\n    const g1 = color1 >> 8 & 255;\n    const b1 = color1 & 255;\n    const r2 = color2 >> 16 & 255;\n    const g2 = color2 >> 8 & 255;\n    const b2 = color2 & 255;\n    const r = r1 + (r2 - r1) * ratio;\n    const g = g1 + (g2 - g1) * ratio;\n    const b = b1 + (b2 - b1) * ratio;\n    return (r << 16) + (g << 8) + b;\n}\n\n});\n\n\n\nparcelRegister(\"4MdtP\", function(module, exports) {\n\n$parcel$export(module.exports, \"validateRenderables\", () => $9b5c7f5ae566db58$export$40044447708e4acc);\n\"use strict\";\nfunction $9b5c7f5ae566db58$export$40044447708e4acc(renderGroup, renderPipes) {\n    const { list: list, index: index } = renderGroup.childrenRenderablesToUpdate;\n    let rebuildRequired = false;\n    for(let i = 0; i < index; i++){\n        const container = list[i];\n        const renderable = container;\n        const pipe = renderPipes[renderable.renderPipeId];\n        rebuildRequired = pipe.validateRenderable(container);\n        if (rebuildRequired) break;\n    }\n    renderGroup.structureDidChange = rebuildRequired;\n    return rebuildRequired;\n}\n\n});\n\n\nparcelRegister(\"aeLnu\", function(module, exports) {\n\n$parcel$export(module.exports, \"SpritePipe\", () => $0673ecf3b594ae13$export$ffb847f6753f2536);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\nvar $6oSd9 = parcelRequire(\"6oSd9\");\n\nvar $8etFB = parcelRequire(\"8etFB\");\n\"use strict\";\nclass $0673ecf3b594ae13$export$ffb847f6753f2536 {\n    constructor(renderer){\n        this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n        this._renderer = renderer;\n    }\n    addRenderable(sprite, _instructionSet) {\n        const gpuSprite = this._getGpuSprite(sprite);\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n    }\n    updateRenderable(sprite) {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n        gpuSprite.batcher.updateElement(gpuSprite);\n    }\n    validateRenderable(sprite) {\n        const texture = sprite._texture;\n        const gpuSprite = this._getGpuSprite(sprite);\n        if (gpuSprite.texture._source !== texture._source) return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n        return false;\n    }\n    destroyRenderable(sprite) {\n        const batchableSprite = this._gpuSpriteHash[sprite.uid];\n        (0, $6oSd9.BigPool).return(batchableSprite);\n        this._gpuSpriteHash[sprite.uid] = null;\n    }\n    _updateBatchableSprite(sprite, batchableSprite) {\n        sprite._didSpriteUpdate = false;\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n    _getGpuSprite(sprite) {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n    _initGPUSprite(sprite) {\n        const batchableSprite = (0, $6oSd9.BigPool).get((0, $8etFB.BatchableSprite));\n        batchableSprite.renderable = sprite;\n        batchableSprite.texture = sprite._texture;\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n        this._gpuSpriteHash[sprite.uid] = batchableSprite;\n        sprite._didSpriteUpdate = false;\n        sprite.on(\"destroyed\", ()=>{\n            this.destroyRenderable(sprite);\n        });\n        return batchableSprite;\n    }\n    destroy() {\n        for(const i in this._gpuSpriteHash)(0, $6oSd9.BigPool).return(this._gpuSpriteHash[i]);\n        this._gpuSpriteHash = null;\n        this._renderer = null;\n    }\n}\n/** @ignore */ $0673ecf3b594ae13$export$ffb847f6753f2536.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLPipes,\n        (0, $fgNUY.ExtensionType).WebGPUPipes,\n        (0, $fgNUY.ExtensionType).CanvasPipes\n    ],\n    name: \"sprite\"\n};\n\n});\n\nparcelRegister(\"70iBB\", function(module, exports) {\n\n$parcel$export(module.exports, \"BatcherPipe\", () => $ddc376e86491dd3d$export$3cdd191b816b3f8a);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\nvar $1ejJa = parcelRequire(\"1ejJa\");\n\nvar $gwSFa = parcelRequire(\"gwSFa\");\n\nvar $2LmXQ = parcelRequire(\"2LmXQ\");\n\"use strict\";\nclass $ddc376e86491dd3d$export$3cdd191b816b3f8a {\n    constructor(renderer, adaptor){\n        this.state = (0, $1ejJa.State).for2d();\n        this._batches = /* @__PURE__ */ Object.create(null);\n        this._geometries = /* @__PURE__ */ Object.create(null);\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n        this._adaptor.init(this);\n    }\n    buildStart(instructionSet) {\n        if (!this._batches[instructionSet.uid]) {\n            const batcher = new (0, $gwSFa.Batcher)();\n            this._batches[instructionSet.uid] = batcher;\n            this._geometries[batcher.uid] = new (0, $2LmXQ.BatchGeometry)();\n        }\n        this._activeBatch = this._batches[instructionSet.uid];\n        this._activeGeometry = this._geometries[this._activeBatch.uid];\n        this._activeBatch.begin();\n    }\n    addToBatch(batchableObject) {\n        this._activeBatch.add(batchableObject);\n    }\n    break(instructionSet) {\n        this._activeBatch.break(instructionSet);\n    }\n    buildEnd(instructionSet) {\n        const activeBatch = this._activeBatch;\n        const geometry = this._activeGeometry;\n        activeBatch.finish(instructionSet);\n        geometry.indexBuffer.setDataWithSize(activeBatch.indexBuffer, activeBatch.indexSize, true);\n        geometry.buffers[0].setDataWithSize(activeBatch.attributeBuffer.float32View, activeBatch.attributeSize, false);\n    }\n    upload(instructionSet) {\n        const batcher = this._batches[instructionSet.uid];\n        const geometry = this._geometries[batcher.uid];\n        if (batcher.dirty) {\n            batcher.dirty = false;\n            geometry.buffers[0].update(batcher.attributeSize * 4);\n        }\n    }\n    execute(batch) {\n        if (batch.action === \"startBatch\") {\n            const batcher = batch.batcher;\n            const geometry = this._geometries[batcher.uid];\n            this._adaptor.start(this, geometry);\n        }\n        this._adaptor.execute(this, batch);\n    }\n    destroy() {\n        this.state = null;\n        this.renderer = null;\n        this._adaptor.destroy();\n        this._adaptor = null;\n        for(const i in this._batches)this._batches[i].destroy();\n        this._batches = null;\n        for(const i in this._geometries)this._geometries[i].destroy();\n        this._geometries = null;\n    }\n}\n/** @ignore */ $ddc376e86491dd3d$export$3cdd191b816b3f8a.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLPipes,\n        (0, $fgNUY.ExtensionType).WebGPUPipes,\n        (0, $fgNUY.ExtensionType).CanvasPipes\n    ],\n    name: \"batch\"\n};\n\n});\n\nparcelRegister(\"lm5jj\", function(module, exports) {\n\n$parcel$export(module.exports, \"AlphaMaskPipe\", () => $ba67da743cf683ed$export$cf1e9fa5acb94ac4);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\nvar $g4vXD = parcelRequire(\"g4vXD\");\n\nvar $doBgq = parcelRequire(\"doBgq\");\n\nvar $bPvY0 = parcelRequire(\"bPvY0\");\n\nvar $aWc9h = parcelRequire(\"aWc9h\");\n\nvar $2S0kj = parcelRequire(\"2S0kj\");\n\nvar $bJJoy = parcelRequire(\"bJJoy\");\n\nvar $6oSd9 = parcelRequire(\"6oSd9\");\n\nvar $kYZ33 = parcelRequire(\"kYZ33\");\n\nvar $hl8zr = parcelRequire(\"hl8zr\");\n\nvar $8FHyN = parcelRequire(\"8FHyN\");\n\"use strict\";\nconst $ba67da743cf683ed$var$tempBounds = new (0, $bPvY0.Bounds)();\nclass $ba67da743cf683ed$var$AlphaMaskEffect extends (0, $g4vXD.FilterEffect) {\n    constructor(){\n        super();\n        this.filters = [\n            new (0, $doBgq.MaskFilter)({\n                sprite: new (0, $bJJoy.Sprite)((0, $kYZ33.Texture).EMPTY),\n                resolution: \"inherit\",\n                antialias: \"inherit\"\n            })\n        ];\n    }\n    get sprite() {\n        return this.filters[0].sprite;\n    }\n    set sprite(value) {\n        this.filters[0].sprite = value;\n    }\n}\nclass $ba67da743cf683ed$export$cf1e9fa5acb94ac4 {\n    constructor(renderer){\n        this._activeMaskStage = [];\n        this._renderer = renderer;\n    }\n    push(mask, maskedContainer, instructionSet) {\n        const renderer = this._renderer;\n        renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add({\n            renderPipeId: \"alphaMask\",\n            action: \"pushMaskBegin\",\n            mask: mask,\n            canBundle: false,\n            maskedContainer: maskedContainer\n        });\n        if (mask.renderMaskToTexture) {\n            const maskContainer = mask.mask;\n            maskContainer.includeInBuild = true;\n            (0, $2S0kj.collectAllRenderables)(maskContainer, instructionSet, renderer.renderPipes);\n            maskContainer.includeInBuild = false;\n        }\n        renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add({\n            renderPipeId: \"alphaMask\",\n            action: \"pushMaskEnd\",\n            mask: mask,\n            maskedContainer: maskedContainer,\n            canBundle: false\n        });\n    }\n    pop(mask, _maskedContainer, instructionSet) {\n        const renderer = this._renderer;\n        renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add({\n            renderPipeId: \"alphaMask\",\n            action: \"popMaskEnd\",\n            mask: mask,\n            canBundle: false\n        });\n    }\n    execute(instruction) {\n        const renderer = this._renderer;\n        const renderMask = instruction.mask.renderMaskToTexture;\n        if (instruction.action === \"pushMaskBegin\") {\n            const filterEffect = (0, $6oSd9.BigPool).get($ba67da743cf683ed$var$AlphaMaskEffect);\n            if (renderMask) {\n                instruction.mask.mask.measurable = true;\n                const bounds = (0, $aWc9h.getGlobalBounds)(instruction.mask.mask, true, $ba67da743cf683ed$var$tempBounds);\n                instruction.mask.mask.measurable = false;\n                bounds.ceil();\n                const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n                const filterTexture = (0, $hl8zr.TexturePool).getOptimalTexture(bounds.width, bounds.height, colorTextureSource._resolution, colorTextureSource.antialias);\n                renderer.renderTarget.push(filterTexture, true);\n                renderer.globalUniforms.push({\n                    offset: bounds,\n                    worldColor: 4294967295\n                });\n                const sprite = filterEffect.sprite;\n                sprite.texture = filterTexture;\n                sprite.worldTransform.tx = bounds.minX;\n                sprite.worldTransform.ty = bounds.minY;\n                this._activeMaskStage.push({\n                    filterEffect: filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                    filterTexture: filterTexture\n                });\n            } else {\n                filterEffect.sprite = instruction.mask.mask;\n                this._activeMaskStage.push({\n                    filterEffect: filterEffect,\n                    maskedContainer: instruction.maskedContainer\n                });\n            }\n        } else if (instruction.action === \"pushMaskEnd\") {\n            const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n            if (renderMask) {\n                if (renderer.type === (0, $8FHyN.RendererType).WEBGL) renderer.renderTarget.finishRenderPass();\n                renderer.renderTarget.pop();\n                renderer.globalUniforms.pop();\n            }\n            renderer.filter.push({\n                renderPipeId: \"filter\",\n                action: \"pushFilter\",\n                container: maskData.maskedContainer,\n                filterEffect: maskData.filterEffect,\n                canBundle: false\n            });\n        } else if (instruction.action === \"popMaskEnd\") {\n            renderer.filter.pop();\n            const maskData = this._activeMaskStage.pop();\n            if (renderMask) (0, $hl8zr.TexturePool).returnTexture(maskData.filterTexture);\n            (0, $6oSd9.BigPool).return(maskData.filterEffect);\n        }\n    }\n    destroy() {\n        this._renderer = null;\n        this._activeMaskStage = null;\n    }\n}\n/** @ignore */ $ba67da743cf683ed$export$cf1e9fa5acb94ac4.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLPipes,\n        (0, $fgNUY.ExtensionType).WebGPUPipes,\n        (0, $fgNUY.ExtensionType).CanvasPipes\n    ],\n    name: \"alphaMask\"\n};\n\n});\nparcelRegister(\"doBgq\", function(module, exports) {\n\n$parcel$export(module.exports, \"MaskFilter\", () => $7ab0456e9383cec3$export$6d9155deae913447);\n\nvar $2FMN6 = parcelRequire(\"2FMN6\");\n\nvar $4eDOa = parcelRequire(\"4eDOa\");\n\nvar $jgAMU = parcelRequire(\"jgAMU\");\n\nvar $1DaYW = parcelRequire(\"1DaYW\");\n\nvar $4BA77 = parcelRequire(\"4BA77\");\n\nvar $iCWdi = parcelRequire(\"iCWdi\");\n\nvar $aaGfl = parcelRequire(\"aaGfl\");\n\nvar $1d6eW = parcelRequire(\"1d6eW\");\n\nvar $5Gkgu = parcelRequire(\"5Gkgu\");\n\"use strict\";\nclass $7ab0456e9383cec3$export$6d9155deae913447 extends (0, $iCWdi.Filter) {\n    constructor(options){\n        const { sprite: sprite, ...rest } = options;\n        const textureMatrix = new (0, $4BA77.TextureMatrix)(sprite.texture);\n        const filterUniforms = new (0, $1DaYW.UniformGroup)({\n            uFilterMatrix: {\n                value: new (0, $2FMN6.Matrix)(),\n                type: \"mat3x3<f32>\"\n            },\n            uMaskClamp: {\n                value: textureMatrix.uClampFrame,\n                type: \"vec4<f32>\"\n            },\n            uAlpha: {\n                value: 1,\n                type: \"f32\"\n            }\n        });\n        const gpuProgram = (0, $jgAMU.GpuProgram).from({\n            vertex: {\n                source: $5Gkgu.default,\n                entryPoint: \"mainVertex\"\n            },\n            fragment: {\n                source: $5Gkgu.default,\n                entryPoint: \"mainFragment\"\n            }\n        });\n        const glProgram = (0, $4eDOa.GlProgram).from({\n            vertex: $1d6eW.default,\n            fragment: $aaGfl.default,\n            name: \"mask-filter\"\n        });\n        super({\n            ...rest,\n            gpuProgram: gpuProgram,\n            glProgram: glProgram,\n            resources: {\n                filterUniforms: filterUniforms,\n                uMaskTexture: sprite.texture.source\n            }\n        });\n        this.sprite = sprite;\n        this._textureMatrix = textureMatrix;\n    }\n    apply(filterManager, input, output, clearMode) {\n        this._textureMatrix.texture = this.sprite.texture;\n        filterManager.calculateSpriteMatrix(this.resources.filterUniforms.uniforms.uFilterMatrix, this.sprite).prepend(this._textureMatrix.mapCoord);\n        this.resources.uMaskTexture = this.sprite.texture.source;\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n\n});\nparcelRegister(\"iCWdi\", function(module, exports) {\n\n$parcel$export(module.exports, \"Filter\", () => $10aef23a8dac1aee$export$ec91da630f36d5ea);\n\nvar $4eDOa = parcelRequire(\"4eDOa\");\n\nvar $jgAMU = parcelRequire(\"jgAMU\");\n\nvar $5aR97 = parcelRequire(\"5aR97\");\n\nvar $1ejJa = parcelRequire(\"1ejJa\");\n\"use strict\";\nconst $10aef23a8dac1aee$var$_Filter = class _Filter extends (0, $5aR97.Shader) {\n    /**\n   * @param options - The optional parameters of this filter.\n   */ constructor(options){\n        options = {\n            ..._Filter.defaultOptions,\n            ...options\n        };\n        super(options);\n        /** If enabled is true the filter is applied, if false it will not. */ this.enabled = true;\n        /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */ this._state = (0, $1ejJa.State).for2d();\n        this.blendMode = options.blendMode;\n        this.padding = options.padding;\n        if (typeof options.antialias === \"boolean\") this.antialias = options.antialias ? \"on\" : \"off\";\n        else this.antialias = options.antialias;\n        this.resolution = options.resolution;\n        this.blendRequired = options.blendRequired;\n        this.addResource(\"uTexture\", 0, 1);\n    }\n    /**\n   * Applies the filter\n   * @param filterManager - The renderer to retrieve the filter from\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it\n   */ apply(filterManager, input, output, clearMode) {\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n    /**\n   * Get the blend mode of the filter.\n   * @default \"normal\"\n   */ get blendMode() {\n        return this._state.blendMode;\n    }\n    /** Sets the blend mode of the filter. */ set blendMode(value) {\n        this._state.blendMode = value;\n    }\n    /**\n   * A short hand function to create a filter based of a vertex and fragment shader src.\n   * @param options\n   * @returns A shiny new PixiJS filter!\n   */ static from(options) {\n        const { gpu: gpu, gl: gl, ...rest } = options;\n        let gpuProgram;\n        let glProgram;\n        if (gpu) gpuProgram = (0, $jgAMU.GpuProgram).from(gpu);\n        if (gl) glProgram = (0, $4eDOa.GlProgram).from(gl);\n        return new _Filter({\n            gpuProgram: gpuProgram,\n            glProgram: glProgram,\n            ...rest\n        });\n    }\n};\n/**\n * The default filter settings\n * @static\n */ $10aef23a8dac1aee$var$_Filter.defaultOptions = {\n    blendMode: \"normal\",\n    resolution: 1,\n    padding: 0,\n    antialias: \"off\",\n    blendRequired: false\n};\nlet $10aef23a8dac1aee$export$ec91da630f36d5ea = $10aef23a8dac1aee$var$_Filter;\n\n});\n\nparcelRegister(\"aaGfl\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $f71c00470c6e49e0$export$2e2bcd8739ae039);\nvar $f71c00470c6e49e0$export$2e2bcd8739ae039 = \"in vec2 vMaskCoord;\\nin vec2 vTextureCoord;\\n\\nuniform sampler2D uTexture;\\nuniform sampler2D uMaskTexture;\\n\\nuniform float uAlpha;\\nuniform vec4 uMaskClamp;\\n\\nout vec4 finalColor;\\n\\nvoid main(void)\\n{\\n    float clip = step(3.5,\\n        step(uMaskClamp.x, vMaskCoord.x) +\\n        step(uMaskClamp.y, vMaskCoord.y) +\\n        step(vMaskCoord.x, uMaskClamp.z) +\\n        step(vMaskCoord.y, uMaskClamp.w));\\n\\n    // TODO look into why this is needed\\n    float npmAlpha = uAlpha; \\n    vec4 original = texture(uTexture, vTextureCoord);\\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\\n\\n    original *= (alphaMul * masky.r * uAlpha * clip);\\n\\n    finalColor = original;\\n}\\n\";\n\n});\n\nparcelRegister(\"1d6eW\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $72d2c00be15b8b0f$export$2e2bcd8739ae039);\nvar $72d2c00be15b8b0f$export$2e2bcd8739ae039 = \"in vec2 aPosition;\\n\\nout vec2 vTextureCoord;\\nout vec2 vMaskCoord;\\n\\n\\nuniform vec4 uInputSize;\\nuniform vec4 uOutputFrame;\\nuniform vec4 uOutputTexture;\\nuniform mat3 uFilterMatrix;\\n\\nvec4 filterVertexPosition(  vec2 aPosition )\\n{\\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\\n       \\n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord(  vec2 aPosition )\\n{\\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\\n}\\n\\nvec2 getFilterCoord( vec2 aPosition )\\n{\\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}   \\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition(aPosition);\\n    vTextureCoord = filterTextureCoord(aPosition);\\n    vMaskCoord = getFilterCoord(aPosition);\\n}\\n\";\n\n});\n\nparcelRegister(\"5Gkgu\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $979261b56fcdf422$export$2e2bcd8739ae039);\nvar $979261b56fcdf422$export$2e2bcd8739ae039 = \"struct GlobalFilterUniforms {\\n  uInputSize:vec4<f32>,\\n  uInputPixel:vec4<f32>,\\n  uInputClamp:vec4<f32>,\\n  uOutputFrame:vec4<f32>,\\n  uGlobalFrame:vec4<f32>,\\n  uOutputTexture:vec4<f32>,  \\n};\\n\\nstruct MaskUniforms {\\n  uFilterMatrix:mat3x3<f32>,\\n  uMaskClamp:vec4<f32>,\\n  uAlpha:f32,\\n};\\n\\n\\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\\n@group(0) @binding(2) var uSampler : sampler;\\n\\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) filterUv : vec2<f32>,\\n  };\\n\\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\\n{\\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\\n\\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\\n}\\n\\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);  \\n}\\n\\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}\\n\\nfn getSize() -> vec2<f32>\\n{\\n\\n  \\n  return gfu.uGlobalFrame.zw;\\n}\\n  \\n@vertex\\nfn mainVertex(\\n  @location(0) aPosition : vec2<f32>, \\n) -> VSOutput {\\n  return VSOutput(\\n   filterVertexPosition(aPosition),\\n   filterTextureCoord(aPosition),\\n   getFilterCoord(aPosition)\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) filterUv: vec2<f32>,\\n  @builtin(position) position: vec4<f32>\\n) -> @location(0) vec4<f32> {\\n\\n    var maskClamp = filterUniforms.uMaskClamp;\\n\\n     var clip = step(3.5,\\n        step(maskClamp.x, filterUv.x) +\\n        step(maskClamp.y, filterUv.y) +\\n        step(filterUv.x, maskClamp.z) +\\n        step(filterUv.y, maskClamp.w));\\n\\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\\n    var source = textureSample(uTexture, uSampler, uv);\\n    \\n    var npmAlpha = 0.0;\\n\\n    var alphaMul = 1.0 - npmAlpha * (1.0 - mask.a);\\n\\n    var a = (alphaMul * mask.r) * clip;\\n\\n    return vec4(source.rgb, source.a) * a;\\n}\";\n\n});\n\n\n\nparcelRegister(\"6Tf82\", function(module, exports) {\n\n$parcel$export(module.exports, \"ColorMaskPipe\", () => $0aa1dd3571fbf52d$export$d4c3af11a9f163be);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\"use strict\";\nclass $0aa1dd3571fbf52d$export$d4c3af11a9f163be {\n    constructor(renderer){\n        this._colorStack = [];\n        this._colorStackIndex = 0;\n        this._currentColor = 0;\n        this._renderer = renderer;\n    }\n    buildStart() {\n        this._colorStack[0] = 15;\n        this._colorStackIndex = 1;\n        this._currentColor = 15;\n    }\n    push(mask, _container, instructionSet) {\n        const renderer = this._renderer;\n        renderer.renderPipes.batch.break(instructionSet);\n        const colorStack = this._colorStack;\n        colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & mask.mask;\n        const currentColor = this._colorStack[this._colorStackIndex];\n        if (currentColor !== this._currentColor) {\n            this._currentColor = currentColor;\n            instructionSet.add({\n                renderPipeId: \"colorMask\",\n                colorMask: currentColor,\n                canBundle: false\n            });\n        }\n        this._colorStackIndex++;\n    }\n    pop(_mask, _container, instructionSet) {\n        const renderer = this._renderer;\n        renderer.renderPipes.batch.break(instructionSet);\n        const colorStack = this._colorStack;\n        this._colorStackIndex--;\n        const currentColor = colorStack[this._colorStackIndex - 1];\n        if (currentColor !== this._currentColor) {\n            this._currentColor = currentColor;\n            instructionSet.add({\n                renderPipeId: \"colorMask\",\n                colorMask: currentColor,\n                canBundle: false\n            });\n        }\n    }\n    execute(instruction) {\n        const renderer = this._renderer;\n        renderer.colorMask.setMask(instruction.colorMask);\n    }\n    destroy() {\n        this._colorStack = null;\n    }\n}\n/** @ignore */ $0aa1dd3571fbf52d$export$d4c3af11a9f163be.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLPipes,\n        (0, $fgNUY.ExtensionType).WebGPUPipes,\n        (0, $fgNUY.ExtensionType).CanvasPipes\n    ],\n    name: \"colorMask\"\n};\n\n});\n\nparcelRegister(\"6dSGR\", function(module, exports) {\n\n$parcel$export(module.exports, \"StencilMaskPipe\", () => $e6e4e97e12e6f44a$export$6875bb6e3a32089e);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\nvar $2S0kj = parcelRequire(\"2S0kj\");\n\nvar $9g4gv = parcelRequire(\"9g4gv\");\n\nvar $iTIsm = parcelRequire(\"iTIsm\");\n\"use strict\";\nclass $e6e4e97e12e6f44a$export$6875bb6e3a32089e {\n    constructor(renderer){\n        // used when building and also when executing..\n        this._maskStackHash = {};\n        this._maskHash = /* @__PURE__ */ new WeakMap();\n        this._renderer = renderer;\n    }\n    push(mask, _container, instructionSet) {\n        var _a;\n        const effect = mask;\n        const renderer = this._renderer;\n        renderer.renderPipes.batch.break(instructionSet);\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n        instructionSet.add({\n            renderPipeId: \"stencilMask\",\n            action: \"pushMaskBegin\",\n            mask: mask,\n            canBundle: false\n        });\n        const maskContainer = effect.mask;\n        maskContainer.includeInBuild = true;\n        if (!this._maskHash.has(effect)) this._maskHash.set(effect, {\n            instructionsStart: 0,\n            instructionsLength: 0\n        });\n        const maskData = this._maskHash.get(effect);\n        maskData.instructionsStart = instructionSet.instructionSize;\n        (0, $2S0kj.collectAllRenderables)(maskContainer, instructionSet, renderer.renderPipes);\n        maskContainer.includeInBuild = false;\n        renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add({\n            renderPipeId: \"stencilMask\",\n            action: \"pushMaskEnd\",\n            mask: mask,\n            canBundle: false\n        });\n        const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n        maskData.instructionsLength = instructionsLength;\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n        (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n    }\n    pop(mask, _container, instructionSet) {\n        const effect = mask;\n        const renderer = this._renderer;\n        renderer.renderPipes.batch.break(instructionSet);\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n        instructionSet.add({\n            renderPipeId: \"stencilMask\",\n            action: \"popMaskBegin\",\n            canBundle: false\n        });\n        const maskData = this._maskHash.get(mask);\n        for(let i = 0; i < maskData.instructionsLength; i++)instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n        instructionSet.add({\n            renderPipeId: \"stencilMask\",\n            action: \"popMaskEnd\",\n            canBundle: false\n        });\n    }\n    execute(instruction) {\n        var _a;\n        const renderer = this._renderer;\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n        let maskStackIndex = (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n        if (instruction.action === \"pushMaskBegin\") {\n            renderer.renderTarget.ensureDepthStencil();\n            renderer.stencil.setStencilMode((0, $iTIsm.STENCIL_MODES).RENDERING_MASK_ADD, maskStackIndex);\n            maskStackIndex++;\n            renderer.colorMask.setMask(0);\n        } else if (instruction.action === \"pushMaskEnd\") {\n            renderer.stencil.setStencilMode((0, $iTIsm.STENCIL_MODES).MASK_ACTIVE, maskStackIndex);\n            renderer.colorMask.setMask(15);\n        } else if (instruction.action === \"popMaskBegin\") {\n            renderer.colorMask.setMask(0);\n            if (maskStackIndex !== 0) renderer.stencil.setStencilMode((0, $iTIsm.STENCIL_MODES).RENDERING_MASK_REMOVE, maskStackIndex);\n            else {\n                renderer.renderTarget.clear(null, (0, $9g4gv.CLEAR).STENCIL);\n                renderer.stencil.setStencilMode((0, $iTIsm.STENCIL_MODES).DISABLED, maskStackIndex);\n            }\n            maskStackIndex--;\n        } else if (instruction.action === \"popMaskEnd\") {\n            renderer.stencil.setStencilMode((0, $iTIsm.STENCIL_MODES).MASK_ACTIVE, maskStackIndex);\n            renderer.colorMask.setMask(15);\n        }\n        this._maskStackHash[renderTargetUid] = maskStackIndex;\n    }\n    destroy() {\n        this._renderer = null;\n        this._maskStackHash = null;\n        this._maskHash = null;\n    }\n}\n$e6e4e97e12e6f44a$export$6875bb6e3a32089e.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLPipes,\n        (0, $fgNUY.ExtensionType).WebGPUPipes,\n        (0, $fgNUY.ExtensionType).CanvasPipes\n    ],\n    name: \"stencilMask\"\n};\n\n});\n\nparcelRegister(\"12ovK\", function(module, exports) {\n\n$parcel$export(module.exports, \"BackgroundSystem\", () => $93b7e52ed95361ae$export$c69cd65c8827ac23);\n\nvar $iUbYJ = parcelRequire(\"iUbYJ\");\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\"use strict\";\nconst $93b7e52ed95361ae$var$_BackgroundSystem = class _BackgroundSystem {\n    constructor(){\n        this.clearBeforeRender = true;\n        this._backgroundColor = new (0, $iUbYJ.Color)(0);\n        this.color = this._backgroundColor;\n        this.alpha = 1;\n    }\n    /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */ init(options) {\n        options = {\n            ..._BackgroundSystem.defaultOptions,\n            ...options\n        };\n        this.clearBeforeRender = options.clearBeforeRender;\n        this.color = options.background || options.backgroundColor || this._backgroundColor;\n        this.alpha = options.backgroundAlpha;\n        this._backgroundColor.setAlpha(options.backgroundAlpha);\n    }\n    /** The background color to fill if not transparent */ get color() {\n        return this._backgroundColor;\n    }\n    set color(value) {\n        this._backgroundColor.setValue(value);\n    }\n    /** The background color alpha. Setting this to 0 will make the canvas transparent. */ get alpha() {\n        return this._backgroundColor.alpha;\n    }\n    set alpha(value) {\n        this._backgroundColor.setAlpha(value);\n    }\n    /** The background color as an [R, G, B, A] array. */ get colorRgba() {\n        return this._backgroundColor.toArray();\n    }\n    /**\n   * destroys the background system\n   * @internal\n   * @ignore\n   */ destroy() {}\n};\n/** @ignore */ $93b7e52ed95361ae$var$_BackgroundSystem.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLSystem,\n        (0, $fgNUY.ExtensionType).WebGPUSystem,\n        (0, $fgNUY.ExtensionType).CanvasSystem\n    ],\n    name: \"background\",\n    priority: 0\n};\n/** default options used by the system */ $93b7e52ed95361ae$var$_BackgroundSystem.defaultOptions = {\n    /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */ backgroundAlpha: 1,\n    /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */ backgroundColor: 0,\n    /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */ clearBeforeRender: true\n};\nlet $93b7e52ed95361ae$export$c69cd65c8827ac23 = $93b7e52ed95361ae$var$_BackgroundSystem;\n\n});\n\nparcelRegister(\"dYc5p\", function(module, exports) {\n\n$parcel$export(module.exports, \"BlendModePipe\", () => $cd31a9e6fa58571e$export$fee7195ef0d08bcf);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\nvar $g4vXD = parcelRequire(\"g4vXD\");\n\nvar $eDLY3 = parcelRequire(\"eDLY3\");\n\"use strict\";\nconst $cd31a9e6fa58571e$var$BLEND_MODE_FILTERS = {};\n(0, $fgNUY.extensions).handle((0, $fgNUY.ExtensionType).BlendMode, (value)=>{\n    if (!value.name) throw new Error(\"BlendMode extension must have a name property\");\n    $cd31a9e6fa58571e$var$BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value)=>{\n    delete $cd31a9e6fa58571e$var$BLEND_MODE_FILTERS[value.name];\n});\nclass $cd31a9e6fa58571e$export$fee7195ef0d08bcf {\n    constructor(renderer){\n        this._isAdvanced = false;\n        this._filterHash = /* @__PURE__ */ Object.create(null);\n        this._renderer = renderer;\n    }\n    /**\n   * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n   * @param renderable - The renderable we are adding to the instruction set\n   * @param blendMode - The blend mode of the renderable\n   * @param instructionSet - The instruction set we are adding to\n   */ setBlendMode(renderable, blendMode, instructionSet) {\n        if (this._activeBlendMode === blendMode) {\n            if (this._isAdvanced) this._renderableList.push(renderable);\n            return;\n        }\n        this._activeBlendMode = blendMode;\n        if (this._isAdvanced) this._endAdvancedBlendMode(instructionSet);\n        this._isAdvanced = !!$cd31a9e6fa58571e$var$BLEND_MODE_FILTERS[blendMode];\n        if (this._isAdvanced) {\n            this._beginAdvancedBlendMode(instructionSet);\n            this._renderableList.push(renderable);\n        }\n    }\n    _beginAdvancedBlendMode(instructionSet) {\n        this._renderer.renderPipes.batch.break(instructionSet);\n        const blendMode = this._activeBlendMode;\n        if (!$cd31a9e6fa58571e$var$BLEND_MODE_FILTERS[blendMode]) {\n            (0, $eDLY3.warn)(`Unable to assign BlendMode: '${blendMode}'. You may want to include: import 'pixi.js/advanced-blend-modes'`);\n            return;\n        }\n        let filterEffect = this._filterHash[blendMode];\n        if (!filterEffect) {\n            filterEffect = this._filterHash[blendMode] = new (0, $g4vXD.FilterEffect)();\n            filterEffect.filters = [\n                new $cd31a9e6fa58571e$var$BLEND_MODE_FILTERS[blendMode]()\n            ];\n        }\n        const instruction = {\n            renderPipeId: \"filter\",\n            action: \"pushFilter\",\n            renderables: [],\n            filterEffect: filterEffect,\n            canBundle: false\n        };\n        this._renderableList = instruction.renderables;\n        instructionSet.add(instruction);\n    }\n    _endAdvancedBlendMode(instructionSet) {\n        this._renderableList = null;\n        this._renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add({\n            renderPipeId: \"filter\",\n            action: \"popFilter\",\n            canBundle: false\n        });\n    }\n    /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   * @ignore\n   */ buildStart() {\n        this._isAdvanced = false;\n    }\n    /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   * @ignore\n   */ buildEnd(instructionSet) {\n        if (this._isAdvanced) this._endAdvancedBlendMode(instructionSet);\n    }\n    /**\n   * @internal\n   * @ignore\n   */ destroy() {\n        this._renderer = null;\n        this._renderableList = null;\n        for(const i in this._filterHash)this._filterHash[i].destroy();\n        this._filterHash = null;\n    }\n}\n/** @ignore */ $cd31a9e6fa58571e$export$fee7195ef0d08bcf.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLPipes,\n        (0, $fgNUY.ExtensionType).WebGPUPipes,\n        (0, $fgNUY.ExtensionType).CanvasPipes\n    ],\n    name: \"blendMode\"\n};\n\n});\n\nparcelRegister(\"ehnqt\", function(module, exports) {\n\n$parcel$export(module.exports, \"ExtractSystem\", () => $14c2b94ad0cbd3dc$export$14c75b573db98096);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\nvar $jNMvk = parcelRequire(\"jNMvk\");\n\nvar $kYZ33 = parcelRequire(\"kYZ33\");\n\"use strict\";\nconst $14c2b94ad0cbd3dc$var$imageTypes = {\n    png: \"image/png\",\n    jpg: \"image/jpeg\",\n    webp: \"image/webp\"\n};\nconst $14c2b94ad0cbd3dc$var$_ExtractSystem = class _ExtractSystem {\n    /** @param renderer - The renderer this System works for. */ constructor(renderer){\n        this._renderer = renderer;\n    }\n    _normalizeOptions(options, defaults = {}) {\n        if (options instanceof (0, $jNMvk.Container) || options instanceof (0, $kYZ33.Texture)) return {\n            target: options,\n            ...defaults\n        };\n        return {\n            ...defaults,\n            ...options\n        };\n    }\n    /**\n   * Will return a HTML Image of the target\n   * @param options - The options for creating the image, or the target to extract\n   * @returns - HTML Image of the target\n   */ async image(options) {\n        const image = new Image();\n        image.src = await this.base64(options);\n        return image;\n    }\n    /**\n   * Will return a base64 encoded string of this target. It works by calling\n   * `Extract.canvas` and then running toDataURL on that.\n   * @param options - The options for creating the image, or the target to extract\n   */ async base64(options) {\n        options = this._normalizeOptions(options, _ExtractSystem.defaultImageOptions);\n        const { format: format, quality: quality } = options;\n        const canvas = this.canvas(options);\n        if (canvas.toBlob !== void 0) return new Promise((resolve, reject)=>{\n            canvas.toBlob((blob)=>{\n                if (!blob) {\n                    reject(new Error(\"ICanvas.toBlob failed!\"));\n                    return;\n                }\n                const reader = new FileReader();\n                reader.onload = ()=>resolve(reader.result);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            }, $14c2b94ad0cbd3dc$var$imageTypes[format], quality);\n        });\n        if (canvas.toDataURL !== void 0) return canvas.toDataURL($14c2b94ad0cbd3dc$var$imageTypes[format], quality);\n        if (canvas.convertToBlob !== void 0) {\n            const blob = await canvas.convertToBlob({\n                type: $14c2b94ad0cbd3dc$var$imageTypes[format],\n                quality: quality\n            });\n            return new Promise((resolve, reject)=>{\n                const reader = new FileReader();\n                reader.onload = ()=>resolve(reader.result);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n        throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n    }\n    /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns - A Canvas element with the texture rendered on.\n   */ canvas(options) {\n        options = this._normalizeOptions(options);\n        const target = options.target;\n        const renderer = this._renderer;\n        if (target instanceof (0, $kYZ33.Texture)) return renderer.texture.generateCanvas(target);\n        const texture = renderer.textureGenerator.generateTexture(options);\n        const canvas = renderer.texture.generateCanvas(texture);\n        texture.destroy();\n        return canvas;\n    }\n    /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */ pixels(options) {\n        options = this._normalizeOptions(options);\n        const target = options.target;\n        const renderer = this._renderer;\n        const texture = target instanceof (0, $kYZ33.Texture) ? target : renderer.textureGenerator.generateTexture(options);\n        const pixelInfo = renderer.texture.getPixels(texture);\n        if (target instanceof (0, $jNMvk.Container)) texture.destroy();\n        return pixelInfo;\n    }\n    /**\n   * Will return a texture of the target\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns - A texture of the target\n   */ texture(options) {\n        options = this._normalizeOptions(options);\n        if (options.target instanceof (0, $kYZ33.Texture)) return options.target;\n        return this._renderer.textureGenerator.generateTexture(options);\n    }\n    /**\n   * Will extract a HTMLImage of the target and download it\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   */ download(options) {\n        options = this._normalizeOptions(options);\n        const canvas = this.canvas(options);\n        const link = document.createElement(\"a\");\n        link.download = options.filename ?? \"image.png\";\n        link.href = canvas.toDataURL(\"image/png\");\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n    /**\n   * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n   * @param options - The options for logging the image, or the target to log\n   */ log(options) {\n        const width = options.width ?? 200;\n        options = this._normalizeOptions(options);\n        const canvas = this.canvas(options);\n        const base64 = canvas.toDataURL();\n        console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n        const style = [\n            \"font-size: 1px;\",\n            `padding: ${width}px ${300}px;`,\n            `background: url(${base64}) no-repeat;`,\n            \"background-size: contain;\"\n        ].join(\" \");\n        console.log(\"%c \", style);\n    }\n    destroy() {\n        this._renderer = null;\n    }\n};\n/** @ignore */ $14c2b94ad0cbd3dc$var$_ExtractSystem.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLSystem,\n        (0, $fgNUY.ExtensionType).WebGPUSystem\n    ],\n    name: \"extract\"\n};\n/** Default options for creating an image. */ $14c2b94ad0cbd3dc$var$_ExtractSystem.defaultImageOptions = {\n    /** The format of the image. */ format: \"png\",\n    /** The quality of the image. */ quality: 1\n};\nlet $14c2b94ad0cbd3dc$export$14c75b573db98096 = $14c2b94ad0cbd3dc$var$_ExtractSystem;\n\n});\n\nparcelRegister(\"bbQtN\", function(module, exports) {\n\n$parcel$export(module.exports, \"GenerateTextureSystem\", () => $e5d205e036ae41a9$export$690776504ee197a6);\n\nvar $iUbYJ = parcelRequire(\"iUbYJ\");\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\nvar $2FMN6 = parcelRequire(\"2FMN6\");\n\nvar $cYXQE = parcelRequire(\"cYXQE\");\n\nvar $bPvY0 = parcelRequire(\"bPvY0\");\n\nvar $2A18g = parcelRequire(\"2A18g\");\n\nvar $jNMvk = parcelRequire(\"jNMvk\");\n\nvar $9UFJ1 = parcelRequire(\"9UFJ1\");\n\"use strict\";\nconst $e5d205e036ae41a9$var$tempRect = new (0, $cYXQE.Rectangle)();\nconst $e5d205e036ae41a9$var$tempBounds = new (0, $bPvY0.Bounds)();\nconst $e5d205e036ae41a9$var$noColor = [\n    0,\n    0,\n    0,\n    0\n];\nclass $e5d205e036ae41a9$export$690776504ee197a6 {\n    constructor(renderer){\n        this._renderer = renderer;\n    }\n    /**\n   * A Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your container is complicated and needs to be reused multiple times.\n   * @param {GenerateTextureOptions | Container} options - Generate texture options.\n   * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n   * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n   * @param {number} [options.resolution] - The resolution of the texture being generated.\n   *        if no region is specified, defaults to the local bounds of the container.\n   * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n   * @returns a shiny new texture of the container passed in\n   */ generateTexture(options) {\n        if (options instanceof (0, $jNMvk.Container)) options = {\n            target: options,\n            frame: void 0,\n            textureSourceOptions: {},\n            resolution: void 0\n        };\n        const resolution = options.resolution || this._renderer.resolution;\n        const antialias = options.antialias || this._renderer.view.antialias;\n        const container = options.target;\n        let clearColor = options.clearColor;\n        if (clearColor) {\n            const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n            clearColor = isRGBAArray ? clearColor : (0, $iUbYJ.Color).shared.setValue(clearColor).toArray();\n        } else clearColor = $e5d205e036ae41a9$var$noColor;\n        const region = options.frame?.copyTo($e5d205e036ae41a9$var$tempRect) || (0, $2A18g.getLocalBounds)(container, $e5d205e036ae41a9$var$tempBounds).rectangle;\n        region.width = Math.max(region.width, 1 / resolution) | 0;\n        region.height = Math.max(region.height, 1 / resolution) | 0;\n        const target = (0, $9UFJ1.RenderTexture).create({\n            ...options.textureSourceOptions,\n            width: region.width,\n            height: region.height,\n            resolution: resolution,\n            antialias: antialias\n        });\n        const transform = (0, $2FMN6.Matrix).shared.translate(-region.x, -region.y);\n        this._renderer.render({\n            container: container,\n            transform: transform,\n            target: target,\n            clearColor: clearColor\n        });\n        target.source.updateMipmaps();\n        return target;\n    }\n    destroy() {\n        this._renderer = null;\n    }\n}\n/** @ignore */ $e5d205e036ae41a9$export$690776504ee197a6.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLSystem,\n        (0, $fgNUY.ExtensionType).WebGPUSystem\n    ],\n    name: \"textureGenerator\"\n};\n\n});\nparcelRegister(\"9UFJ1\", function(module, exports) {\n\n$parcel$export(module.exports, \"RenderTexture\", () => $ba7eeb57d12b8763$export$813984f7330b4d72);\n\nvar $cyN9N = parcelRequire(\"cyN9N\");\n\nvar $kYZ33 = parcelRequire(\"kYZ33\");\n\"use strict\";\nclass $ba7eeb57d12b8763$export$813984f7330b4d72 extends (0, $kYZ33.Texture) {\n    static create(options) {\n        return new (0, $kYZ33.Texture)({\n            source: new (0, $cyN9N.TextureSource)(options)\n        });\n    }\n    /**\n   * Resizes the render texture.\n   * @param width - The new width of the render texture.\n   * @param height - The new height of the render texture.\n   * @param resolution - The new resolution of the render texture.\n   * @returns This texture.\n   */ resize(width, height, resolution) {\n        this.source.resize(width, height, resolution);\n        return this;\n    }\n}\n\n});\n\n\nparcelRegister(\"8OWAV\", function(module, exports) {\n\n$parcel$export(module.exports, \"GlobalUniformSystem\", () => $9084d76fe2b84b9e$export$b9b6391a4528dd78);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\nvar $2FMN6 = parcelRequire(\"2FMN6\");\n\nvar $dXIDd = parcelRequire(\"dXIDd\");\n\nvar $1oROT = parcelRequire(\"1oROT\");\n\nvar $jmtJ5 = parcelRequire(\"jmtJ5\");\n\nvar $8FHyN = parcelRequire(\"8FHyN\");\n\nvar $1DaYW = parcelRequire(\"1DaYW\");\n\"use strict\";\nclass $9084d76fe2b84b9e$export$b9b6391a4528dd78 {\n    constructor(renderer){\n        this._stackIndex = 0;\n        this._globalUniformDataStack = [];\n        this._uniformsPool = [];\n        this._activeUniforms = [];\n        this._bindGroupPool = [];\n        this._activeBindGroups = [];\n        this._renderer = renderer;\n    }\n    reset() {\n        this._stackIndex = 0;\n        for(let i = 0; i < this._activeUniforms.length; i++)this._uniformsPool.push(this._activeUniforms[i]);\n        for(let i = 0; i < this._activeBindGroups.length; i++)this._bindGroupPool.push(this._activeBindGroups[i]);\n        this._activeUniforms.length = 0;\n        this._activeBindGroups.length = 0;\n    }\n    start(options) {\n        this.reset();\n        this.push(options);\n    }\n    bind({ size: size, projectionMatrix: projectionMatrix, worldTransformMatrix: worldTransformMatrix, worldColor: worldColor, offset: offset }) {\n        const renderTarget = this._renderer.renderTarget.renderTarget;\n        const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n            projectionData: renderTarget,\n            worldTransformMatrix: new (0, $2FMN6.Matrix)(),\n            worldColor: 4294967295,\n            offset: new (0, $dXIDd.Point)()\n        };\n        const globalUniformData = {\n            projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n            resolution: size || renderTarget.size,\n            worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n            worldColor: worldColor || currentGlobalUniformData.worldColor,\n            offset: offset || currentGlobalUniformData.offset,\n            bindGroup: null\n        };\n        const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n        this._activeUniforms.push(uniformGroup);\n        const uniforms = uniformGroup.uniforms;\n        uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n        uniforms.uResolution = globalUniformData.resolution;\n        uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n        uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n        uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n        (0, $1oROT.color32BitToUniform)(globalUniformData.worldColor, uniforms.uWorldColorAlpha, 0);\n        uniformGroup.update();\n        let bindGroup;\n        if (this._renderer.renderPipes.uniformBatch) bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n        else {\n            bindGroup = this._bindGroupPool.pop() || new (0, $jmtJ5.BindGroup)();\n            this._activeBindGroups.push(bindGroup);\n            bindGroup.setResource(uniformGroup, 0);\n        }\n        globalUniformData.bindGroup = bindGroup;\n        this._currentGlobalUniformData = globalUniformData;\n    }\n    push(options) {\n        this.bind(options);\n        this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n    }\n    pop() {\n        this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n        if (this._renderer.type === (0, $8FHyN.RendererType).WEBGL) this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n    get bindGroup() {\n        return this._currentGlobalUniformData.bindGroup;\n    }\n    get uniformGroup() {\n        return this._currentGlobalUniformData.bindGroup.resources[0];\n    }\n    _createUniforms() {\n        const globalUniforms = new (0, $1DaYW.UniformGroup)({\n            uProjectionMatrix: {\n                value: new (0, $2FMN6.Matrix)(),\n                type: \"mat3x3<f32>\"\n            },\n            uWorldTransformMatrix: {\n                value: new (0, $2FMN6.Matrix)(),\n                type: \"mat3x3<f32>\"\n            },\n            // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n            uWorldColorAlpha: {\n                value: new Float32Array(4),\n                type: \"vec4<f32>\"\n            },\n            uResolution: {\n                value: [\n                    0,\n                    0\n                ],\n                type: \"vec2<f32>\"\n            }\n        }, {\n            isStatic: true\n        });\n        return globalUniforms;\n    }\n    destroy() {\n        this._renderer = null;\n    }\n}\n/** @ignore */ $9084d76fe2b84b9e$export$b9b6391a4528dd78.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLSystem,\n        (0, $fgNUY.ExtensionType).WebGPUSystem,\n        (0, $fgNUY.ExtensionType).CanvasSystem\n    ],\n    name: \"globalUniforms\"\n};\n\n});\n\nparcelRegister(\"dxsuA\", function(module, exports) {\n\n$parcel$export(module.exports, \"HelloSystem\", () => $12038a5d7e865df1$export$63ce3e62fccb6f39);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\nvar $kskfL = parcelRequire(\"kskfL\");\n\nvar $8FHyN = parcelRequire(\"8FHyN\");\n\"use strict\";\nclass $12038a5d7e865df1$export$63ce3e62fccb6f39 {\n    constructor(renderer){\n        this._renderer = renderer;\n    }\n    /**\n   * It all starts here! This initiates every system, passing in the options for any system by name.\n   * @param options - the config for the renderer and all its systems\n   */ init(options) {\n        if (options.hello) {\n            let name = this._renderer.name;\n            if (this._renderer.type === (0, $8FHyN.RendererType).WEBGL) name += ` ${this._renderer.context.webGLVersion}`;\n            (0, $kskfL.sayHello)(name);\n        }\n    }\n}\n/** @ignore */ $12038a5d7e865df1$export$63ce3e62fccb6f39.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLSystem,\n        (0, $fgNUY.ExtensionType).WebGPUSystem,\n        (0, $fgNUY.ExtensionType).CanvasSystem\n    ],\n    name: \"hello\",\n    priority: -2\n};\n/** The default options for the system. */ $12038a5d7e865df1$export$63ce3e62fccb6f39.defaultOptions = {\n    /** {@link WebGLOptions.hello} */ hello: false\n};\n\n});\nparcelRegister(\"kskfL\", function(module, exports) {\n\n$parcel$export(module.exports, \"sayHello\", () => $9b842ad525f22676$export$2c6a96c059a06e7c);\n\nvar $lTNTn = parcelRequire(\"lTNTn\");\n\"use strict\";\nlet $9b842ad525f22676$var$saidHello = false;\nconst $9b842ad525f22676$export$a4ad2735b021c132 = \"8.2.5\";\nfunction $9b842ad525f22676$export$2c6a96c059a06e7c(type) {\n    if ($9b842ad525f22676$var$saidHello) return;\n    if ((0, $lTNTn.DOMAdapter).get().getNavigator().userAgent.toLowerCase().indexOf(\"chrome\") > -1) {\n        const args = [\n            `%c  %c  %c  %c  %c PixiJS %c v${$9b842ad525f22676$export$a4ad2735b021c132} (${type}) http://www.pixijs.com/\n\n`,\n            \"background: #E72264; padding:5px 0;\",\n            \"background: #6CA2EA; padding:5px 0;\",\n            \"background: #B5D33D; padding:5px 0;\",\n            \"background: #FED23F; padding:5px 0;\",\n            \"color: #FFFFFF; background: #E72264; padding:5px 0;\",\n            \"color: #E72264; background: #FFFFFF; padding:5px 0;\"\n        ];\n        globalThis.console.log(...args);\n    } else if (globalThis.console) globalThis.console.log(`PixiJS ${$9b842ad525f22676$export$a4ad2735b021c132} - ${type} - http://www.pixijs.com/`);\n    $9b842ad525f22676$var$saidHello = true;\n}\n\n});\n\n\nparcelRegister(\"pVL8q\", function(module, exports) {\n\n$parcel$export(module.exports, \"TextureGCSystem\", () => $14773b2271c934b6$export$a47b032752d8e393);\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\"use strict\";\nconst $14773b2271c934b6$var$_TextureGCSystem = class _TextureGCSystem {\n    /** @param renderer - The renderer this System works for. */ constructor(renderer){\n        this._renderer = renderer;\n        this.count = 0;\n        this.checkCount = 0;\n    }\n    init(options) {\n        options = {\n            ..._TextureGCSystem.defaultOptions,\n            ...options\n        };\n        this.checkCountMax = options.textureGCCheckCountMax;\n        this.maxIdle = options.textureGCAMaxIdle;\n        this.active = options.textureGCActive;\n    }\n    /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */ postrender() {\n        if (!this._renderer.renderingToScreen) return;\n        this.count++;\n        if (!this.active) return;\n        this.checkCount++;\n        if (this.checkCount > this.checkCountMax) {\n            this.checkCount = 0;\n            this.run();\n        }\n    }\n    /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */ run() {\n        const managedTextures = this._renderer.texture.managedTextures;\n        for(let i = 0; i < managedTextures.length; i++){\n            const texture = managedTextures[i];\n            if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n                texture._touched = -1;\n                texture.unload();\n            }\n        }\n    }\n    destroy() {\n        this._renderer = null;\n    }\n};\n/** @ignore */ $14773b2271c934b6$var$_TextureGCSystem.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLSystem,\n        (0, $fgNUY.ExtensionType).WebGPUSystem\n    ],\n    name: \"textureGC\"\n};\n/** default options for the TextureGCSystem */ $14773b2271c934b6$var$_TextureGCSystem.defaultOptions = {\n    /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */ textureGCActive: true,\n    /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */ textureGCAMaxIdle: 3600,\n    /**\n   * Frames between two garbage collections.\n   * @default 600\n   */ textureGCCheckCountMax: 600\n};\nlet $14773b2271c934b6$export$a47b032752d8e393 = $14773b2271c934b6$var$_TextureGCSystem;\n(0, $fgNUY.extensions).add($14773b2271c934b6$export$a47b032752d8e393);\n\n});\n\nparcelRegister(\"3yPFG\", function(module, exports) {\n\n$parcel$export(module.exports, \"ViewSystem\", () => $ad808d740f439250$export$6f21c3d5af6602af);\n\nvar $lTNTn = parcelRequire(\"lTNTn\");\n\nvar $fgNUY = parcelRequire(\"fgNUY\");\n\nvar $cYXQE = parcelRequire(\"cYXQE\");\n\nvar $fi8wV = parcelRequire(\"fi8wV\");\n\nvar $QyiBP = parcelRequire(\"QyiBP\");\n\nvar $7lQPp = parcelRequire(\"7lQPp\");\n\"use strict\";\nconst $ad808d740f439250$var$_ViewSystem = class _ViewSystem {\n    /** The resolution / device pixel ratio of the renderer. */ get resolution() {\n        return this.texture.source._resolution;\n    }\n    set resolution(value) {\n        this.texture.source.resize(this.texture.source.width, this.texture.source.height, value);\n    }\n    /**\n   * initiates the view system\n   * @param options - the options for the view\n   */ init(options) {\n        options = {\n            ..._ViewSystem.defaultOptions,\n            ...options\n        };\n        if (options.view) {\n            (0, $fi8wV.deprecation)((0, $fi8wV.v8_0_0), \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n            options.canvas = options.view;\n        }\n        this.screen = new (0, $cYXQE.Rectangle)(0, 0, options.width, options.height);\n        this.canvas = options.canvas || (0, $lTNTn.DOMAdapter).get().createCanvas();\n        this.antialias = !!options.antialias;\n        this.texture = (0, $7lQPp.getCanvasTexture)(this.canvas, options);\n        this.renderTarget = new (0, $QyiBP.RenderTarget)({\n            colorTextures: [\n                this.texture\n            ],\n            depth: !!options.depth,\n            isRoot: true\n        });\n        this.texture.source.transparent = options.backgroundAlpha < 1;\n        this.multiView = !!options.multiView;\n        if (this.autoDensity) {\n            this.canvas.style.width = `${this.texture.width}px`;\n            this.canvas.style.height = `${this.texture.height}px`;\n        }\n        this.resolution = options.resolution;\n    }\n    /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */ resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n        this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n        this.screen.width = this.texture.frame.width;\n        this.screen.height = this.texture.frame.height;\n        if (this.autoDensity) {\n            this.canvas.style.width = `${desiredScreenWidth}px`;\n            this.canvas.style.height = `${desiredScreenHeight}px`;\n        }\n    }\n    /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n   */ destroy(options = false) {\n        const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n        if (removeView && this.canvas.parentNode) this.canvas.parentNode.removeChild(this.canvas);\n    }\n};\n/** @ignore */ $ad808d740f439250$var$_ViewSystem.extension = {\n    type: [\n        (0, $fgNUY.ExtensionType).WebGLSystem,\n        (0, $fgNUY.ExtensionType).WebGPUSystem,\n        (0, $fgNUY.ExtensionType).CanvasSystem\n    ],\n    name: \"view\",\n    priority: 0\n};\n/** The default options for the view system. */ $ad808d740f439250$var$_ViewSystem.defaultOptions = {\n    /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */ width: 800,\n    /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */ height: 600,\n    /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */ autoDensity: false,\n    /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */ antialias: false\n};\nlet $ad808d740f439250$export$6f21c3d5af6602af = $ad808d740f439250$var$_ViewSystem;\n\n});\nparcelRegister(\"QyiBP\", function(module, exports) {\n\n$parcel$export(module.exports, \"RenderTarget\", () => $54a369a699af04c0$export$efcb1f8bf367cbfb);\n\nvar $1UVG8 = parcelRequire(\"1UVG8\");\n\nvar $cyN9N = parcelRequire(\"cyN9N\");\n\nvar $kYZ33 = parcelRequire(\"kYZ33\");\n\"use strict\";\nconst $54a369a699af04c0$var$_RenderTarget = class _RenderTarget {\n    /**\n   * @param [descriptor] - Options for creating a render target.\n   */ constructor(descriptor = {}){\n        /** unique id for this render target */ this.uid = (0, $1UVG8.uid)(\"renderTarget\");\n        /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */ this.colorTextures = [];\n        this.dirtyId = 0;\n        this.isRoot = false;\n        this._size = new Float32Array(2);\n        /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */ this._managedColorTextures = false;\n        descriptor = {\n            ..._RenderTarget.defaultOptions,\n            ...descriptor\n        };\n        this.stencil = descriptor.stencil;\n        this.depth = descriptor.depth;\n        this.isRoot = descriptor.isRoot;\n        if (typeof descriptor.colorTextures === \"number\") {\n            this._managedColorTextures = true;\n            for(let i = 0; i < descriptor.colorTextures; i++)this.colorTextures.push(new (0, $cyN9N.TextureSource)({\n                width: descriptor.width,\n                height: descriptor.height,\n                resolution: descriptor.resolution,\n                antialias: descriptor.antialias\n            }));\n        } else {\n            this.colorTextures = [\n                ...descriptor.colorTextures.map((texture)=>texture.source)\n            ];\n            const colorSource = this.colorTexture.source;\n            this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n        }\n        this.colorTexture.source.on(\"resize\", this.onSourceResize, this);\n        if (descriptor.depthStencilTexture || this.stencil) {\n            if (descriptor.depthStencilTexture instanceof (0, $kYZ33.Texture) || descriptor.depthStencilTexture instanceof (0, $cyN9N.TextureSource)) this.depthStencilTexture = descriptor.depthStencilTexture.source;\n            else this.ensureDepthStencilTexture();\n        }\n    }\n    get size() {\n        const _size = this._size;\n        _size[0] = this.pixelWidth;\n        _size[1] = this.pixelHeight;\n        return _size;\n    }\n    get width() {\n        return this.colorTexture.source.width;\n    }\n    get height() {\n        return this.colorTexture.source.height;\n    }\n    get pixelWidth() {\n        return this.colorTexture.source.pixelWidth;\n    }\n    get pixelHeight() {\n        return this.colorTexture.source.pixelHeight;\n    }\n    get resolution() {\n        return this.colorTexture.source._resolution;\n    }\n    get colorTexture() {\n        return this.colorTextures[0];\n    }\n    onSourceResize(source) {\n        this.resize(source.width, source.height, source._resolution, true);\n    }\n    /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   * @ignore\n   */ ensureDepthStencilTexture() {\n        if (!this.depthStencilTexture) this.depthStencilTexture = new (0, $cyN9N.TextureSource)({\n            width: this.width,\n            height: this.height,\n            resolution: this.resolution,\n            format: \"depth24plus-stencil8\",\n            autoGenerateMipmaps: false,\n            antialias: false,\n            mipLevelCount: 1\n        });\n    }\n    resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n        this.dirtyId++;\n        this.colorTextures.forEach((colorTexture, i)=>{\n            if (skipColorTexture && i === 0) return;\n            colorTexture.source.resize(width, height, resolution);\n        });\n        if (this.depthStencilTexture) this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n    destroy() {\n        this.colorTexture.source.off(\"resize\", this.onSourceResize, this);\n        if (this._managedColorTextures) this.colorTextures.forEach((texture)=>{\n            texture.destroy();\n        });\n        if (this.depthStencilTexture) {\n            this.depthStencilTexture.destroy();\n            delete this.depthStencilTexture;\n        }\n    }\n};\n/** The default options for a render target */ $54a369a699af04c0$var$_RenderTarget.defaultOptions = {\n    /** the width of the RenderTarget */ width: 0,\n    /** the height of the RenderTarget */ height: 0,\n    /** the resolution of the RenderTarget */ resolution: 1,\n    /** an array of textures, or a number indicating how many color textures there should be */ colorTextures: 1,\n    /** should this render target have a stencil buffer? */ stencil: false,\n    /** should this render target have a depth buffer? */ depth: false,\n    /** should this render target be antialiased? */ antialias: false,\n    // save on perf by default!\n    /** is this a root element, true if this is gl context owners render target */ isRoot: false\n};\nlet $54a369a699af04c0$export$efcb1f8bf367cbfb = $54a369a699af04c0$var$_RenderTarget;\n\n});\n\nparcelRegister(\"7lQPp\", function(module, exports) {\n\n$parcel$export(module.exports, \"getCanvasTexture\", () => $7be991b12bb441df$export$f2bcae39472d9516);\n\nvar $ihl4g = parcelRequire(\"ihl4g\");\n\nvar $kYZ33 = parcelRequire(\"kYZ33\");\n\"use strict\";\nconst $7be991b12bb441df$var$canvasCache = /* @__PURE__ */ new Map();\nfunction $7be991b12bb441df$export$f2bcae39472d9516(canvas, options) {\n    if (!$7be991b12bb441df$var$canvasCache.has(canvas)) {\n        const texture = new (0, $kYZ33.Texture)({\n            source: new (0, $ihl4g.CanvasSource)({\n                resource: canvas,\n                ...options\n            })\n        });\n        const onDestroy = ()=>{\n            if ($7be991b12bb441df$var$canvasCache.get(canvas) === texture) $7be991b12bb441df$var$canvasCache.delete(canvas);\n        };\n        texture.once(\"destroy\", onDestroy);\n        texture.source.once(\"destroy\", onDestroy);\n        $7be991b12bb441df$var$canvasCache.set(canvas, texture);\n    }\n    return $7be991b12bb441df$var$canvasCache.get(canvas);\n}\nfunction $7be991b12bb441df$export$57935aeb65aa90cf(canvas) {\n    return $7be991b12bb441df$var$canvasCache.has(canvas);\n}\n\n});\n\n\n\nparcelRegister(\"bSZOX\", function(module, exports) {\n\n$parcel$export(module.exports, \"UboSystem\", () => $3dba9287fbaa4a78$export$649c859891b4f4a9);\n\nvar $9i2X6 = parcelRequire(\"9i2X6\");\n\nvar $lGvus = parcelRequire(\"lGvus\");\n\nvar $jxRST = parcelRequire(\"jxRST\");\n\"use strict\";\nclass $3dba9287fbaa4a78$export$649c859891b4f4a9 {\n    constructor(adaptor){\n        /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */ this._syncFunctionHash = /* @__PURE__ */ Object.create(null);\n        this._adaptor = adaptor;\n        this._systemCheck();\n    }\n    /**\n   * Overridable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   */ _systemCheck() {\n        if (!(0, $9i2X6.unsafeEvalSupported)()) throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n    ensureUniformGroup(uniformGroup) {\n        const uniformData = this.getUniformGroupData(uniformGroup);\n        uniformGroup.buffer || (uniformGroup.buffer = new (0, $lGvus.Buffer)({\n            data: new Float32Array(uniformData.layout.size / 4),\n            usage: (0, $jxRST.BufferUsage).UNIFORM | (0, $jxRST.BufferUsage).COPY_DST\n        }));\n    }\n    getUniformGroupData(uniformGroup) {\n        return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n    }\n    _initUniformGroup(uniformGroup) {\n        const uniformGroupSignature = uniformGroup._signature;\n        let uniformData = this._syncFunctionHash[uniformGroupSignature];\n        if (!uniformData) {\n            const elements = Object.keys(uniformGroup.uniformStructures).map((i)=>uniformGroup.uniformStructures[i]);\n            const layout = this._adaptor.createUboElements(elements);\n            const syncFunction = this._generateUboSync(layout.uboElements);\n            uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n                layout: layout,\n                syncFunction: syncFunction\n            };\n        }\n        return this._syncFunctionHash[uniformGroupSignature];\n    }\n    _generateUboSync(uboElements) {\n        return this._adaptor.generateUboSync(uboElements);\n    }\n    syncUniformGroup(uniformGroup, data, offset) {\n        const uniformGroupData = this.getUniformGroupData(uniformGroup);\n        uniformGroup.buffer || (uniformGroup.buffer = new (0, $lGvus.Buffer)({\n            data: new Float32Array(uniformGroupData.layout.size / 4),\n            usage: (0, $jxRST.BufferUsage).UNIFORM | (0, $jxRST.BufferUsage).COPY_DST\n        }));\n        data || (data = uniformGroup.buffer.data);\n        offset || (offset = 0);\n        uniformGroupData.syncFunction(uniformGroup.uniforms, data, offset);\n        return true;\n    }\n    updateUniformGroup(uniformGroup) {\n        if (uniformGroup.isStatic && !uniformGroup._dirtyId) return false;\n        uniformGroup._dirtyId = 0;\n        const synced = this.syncUniformGroup(uniformGroup);\n        uniformGroup.buffer.update();\n        return synced;\n    }\n    destroy() {\n        this._syncFunctionHash = null;\n    }\n}\n\n});\n\nparcelRegister(\"ytbw6\", function(module, exports) {\n\n$parcel$export(module.exports, \"createUboSyncFunction\", () => $c9d0b153c49b9d10$export$d72cdd5376f8af8e);\n\nvar $lfLYu = parcelRequire(\"lfLYu\");\n\"use strict\";\nfunction $c9d0b153c49b9d10$export$d72cdd5376f8af8e(uboElements, parserCode, arrayGenerationFunction, singleSettersMap) {\n    const funcFragments = [\n        `\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `\n    ];\n    let prev = 0;\n    for(let i = 0; i < uboElements.length; i++){\n        const uboElement = uboElements[i];\n        const name = uboElement.data.name;\n        let parsed = false;\n        let offset = 0;\n        for(let j = 0; j < (0, $lfLYu.uniformParsers).length; j++){\n            const uniformParser = (0, $lfLYu.uniformParsers)[j];\n            if (uniformParser.test(uboElement.data)) {\n                offset = uboElement.offset / 4;\n                funcFragments.push(`name = \"${name}\";`, `offset += ${offset - prev};`, (0, $lfLYu.uniformParsers)[j][parserCode] || (0, $lfLYu.uniformParsers)[j].ubo);\n                parsed = true;\n                break;\n            }\n        }\n        if (!parsed) {\n            if (uboElement.data.size > 1) {\n                offset = uboElement.offset / 4;\n                funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n            } else {\n                const template = singleSettersMap[uboElement.data.type];\n                offset = uboElement.offset / 4;\n                funcFragments.push(/* wgsl */ `\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `);\n            }\n        }\n        prev = offset;\n    }\n    const fragmentSrc = funcFragments.join(\"\\n\");\n    return new Function(\"uv\", \"data\", \"offset\", fragmentSrc);\n}\n\n});\nparcelRegister(\"lfLYu\", function(module, exports) {\n\n$parcel$export(module.exports, \"uniformParsers\", () => $8fda3e90a94e25e4$export$cf9f41a7e506e2d2);\n\"use strict\";\nconst $8fda3e90a94e25e4$export$cf9f41a7e506e2d2 = [\n    // uploading pixi matrix object to mat3\n    {\n        type: \"mat3x3<f32>\",\n        test: (data)=>{\n            const value = data.value;\n            return value.a !== void 0;\n        },\n        ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n        uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n    },\n    // uploading a pixi rectangle as a vec4\n    {\n        type: \"vec4<f32>\",\n        test: (data)=>data.type === \"vec4<f32>\" && data.size === 1 && data.value.width !== void 0,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n    },\n    // uploading a pixi point as a vec2\n    {\n        type: \"vec2<f32>\",\n        test: (data)=>data.type === \"vec2<f32>\" && data.size === 1 && data.value.x !== void 0,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n    },\n    // uploading a pixi color as a vec4\n    {\n        type: \"vec4<f32>\",\n        test: (data)=>data.type === \"vec4<f32>\" && data.size === 1 && data.value.red !== void 0,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n    },\n    // uploading a pixi color as a vec3\n    {\n        type: \"vec3<f32>\",\n        test: (data)=>data.type === \"vec3<f32>\" && data.size === 1 && data.value.red !== void 0,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n    }\n];\n\n});\n\n\nparcelRegister(\"ZYDpw\", function(module, exports) {\n\n$parcel$export(module.exports, \"uboSyncFunctionsSTD40\", () => $9dc303e26e5d6117$export$c761ef20854b0b5b);\n$parcel$export(module.exports, \"uboSyncFunctionsWGSL\", () => $9dc303e26e5d6117$export$53279b3783655315);\n\"use strict\";\nfunction $9dc303e26e5d6117$var$loopMatrix(col, row) {\n    const total = col * row;\n    return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\nconst $9dc303e26e5d6117$export$c761ef20854b0b5b = {\n    f32: `\n        data[offset] = v;`,\n    i32: `\n        data[offset] = v;`,\n    \"vec2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n    \"vec3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n    \"vec4<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n    \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n    \"mat3x3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n    \"mat4x4<f32>\": `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n    \"mat3x2<f32>\": $9dc303e26e5d6117$var$loopMatrix(3, 2),\n    \"mat4x2<f32>\": $9dc303e26e5d6117$var$loopMatrix(4, 2),\n    \"mat2x3<f32>\": $9dc303e26e5d6117$var$loopMatrix(2, 3),\n    \"mat4x3<f32>\": $9dc303e26e5d6117$var$loopMatrix(4, 3),\n    \"mat2x4<f32>\": $9dc303e26e5d6117$var$loopMatrix(2, 4),\n    \"mat3x4<f32>\": $9dc303e26e5d6117$var$loopMatrix(3, 4)\n};\nconst $9dc303e26e5d6117$export$53279b3783655315 = {\n    ...$9dc303e26e5d6117$export$c761ef20854b0b5b,\n    \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `\n};\n\n});\n\nparcelRegister(\"9k9UX\", function(module, exports) {\n\n$parcel$export(module.exports, \"BufferResource\", () => $03f1ab435b41e920$export$a79ef781de624449);\n\nvar $hcgfX = parcelRequire(\"hcgfX\");\n\nvar $1UVG8 = parcelRequire(\"1UVG8\");\n\"use strict\";\nclass $03f1ab435b41e920$export$a79ef781de624449 extends (0, (/*@__PURE__*/$parcel$interopDefault($hcgfX))) {\n    /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */ constructor({ buffer: buffer, offset: offset, size: size }){\n        super();\n        /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */ /** a unique id for this uniform group used through the renderer */ this.uid = (0, $1UVG8.uid)(\"buffer\");\n        /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */ this._resourceType = \"bufferResource\";\n        /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */ this._touched = 0;\n        /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */ this._resourceId = (0, $1UVG8.uid)(\"resource\");\n        /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */ this._bufferResource = true;\n        /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */ this.destroyed = false;\n        this.buffer = buffer;\n        this.offset = offset | 0;\n        this.size = size;\n        this.buffer.on(\"change\", this.onBufferChange, this);\n    }\n    onBufferChange() {\n        this._resourceId = (0, $1UVG8.uid)(\"resource\");\n        this.emit(\"change\", this);\n    }\n    /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */ destroy(destroyBuffer = false) {\n        this.destroyed = true;\n        if (destroyBuffer) this.buffer.destroy();\n        this.emit(\"change\", this);\n        this.buffer = null;\n    }\n}\n\n});\n\nparcelRegister(\"01Tk3\", function(module, exports) {\n\n$parcel$export(module.exports, \"ensureAttributes\", () => $60d034994609dc7a$export$abe4b4eea56679f6);\n\nvar $eDLY3 = parcelRequire(\"eDLY3\");\n\nvar $j05nj = parcelRequire(\"j05nj\");\n\"use strict\";\nfunction $60d034994609dc7a$export$abe4b4eea56679f6(geometry, extractedData) {\n    for(const i in geometry.attributes){\n        const attribute = geometry.attributes[i];\n        const attributeData = extractedData[i];\n        if (attributeData) {\n            attribute.location ?? (attribute.location = attributeData.location);\n            attribute.format ?? (attribute.format = attributeData.format);\n            attribute.offset ?? (attribute.offset = attributeData.offset);\n            attribute.instance ?? (attribute.instance = attributeData.instance);\n        } else (0, $eDLY3.warn)(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n    }\n    $60d034994609dc7a$var$ensureStartAndStride(geometry);\n}\nfunction $60d034994609dc7a$var$ensureStartAndStride(geometry) {\n    const { buffers: buffers, attributes: attributes } = geometry;\n    const tempStride = {};\n    const tempStart = {};\n    for(const j in buffers){\n        const buffer = buffers[j];\n        tempStride[buffer.uid] = 0;\n        tempStart[buffer.uid] = 0;\n    }\n    for(const j in attributes){\n        const attribute = attributes[j];\n        tempStride[attribute.buffer.uid] += (0, $j05nj.getAttributeInfoFromFormat)(attribute.format).stride;\n    }\n    for(const j in attributes){\n        const attribute = attributes[j];\n        attribute.stride ?? (attribute.stride = tempStride[attribute.buffer.uid]);\n        attribute.start ?? (attribute.start = tempStart[attribute.buffer.uid]);\n        tempStart[attribute.buffer.uid] += (0, $j05nj.getAttributeInfoFromFormat)(attribute.format).stride;\n    }\n}\n\n});\n\nparcelRegister(\"6TPCV\", function(module, exports) {\n\n$parcel$export(module.exports, \"GpuStencilModesToPixi\", () => $aa02c68e124f5557$export$861c1bf8bb2cddc7);\n\nvar $iTIsm = parcelRequire(\"iTIsm\");\n\"use strict\";\nconst $aa02c68e124f5557$export$861c1bf8bb2cddc7 = [];\n$aa02c68e124f5557$export$861c1bf8bb2cddc7[(0, $iTIsm.STENCIL_MODES).NONE] = void 0;\n$aa02c68e124f5557$export$861c1bf8bb2cddc7[(0, $iTIsm.STENCIL_MODES).DISABLED] = {\n    stencilWriteMask: 0,\n    stencilReadMask: 0\n};\n$aa02c68e124f5557$export$861c1bf8bb2cddc7[(0, $iTIsm.STENCIL_MODES).RENDERING_MASK_ADD] = {\n    stencilFront: {\n        compare: \"equal\",\n        passOp: \"increment-clamp\"\n    },\n    stencilBack: {\n        compare: \"equal\",\n        passOp: \"increment-clamp\"\n    }\n};\n$aa02c68e124f5557$export$861c1bf8bb2cddc7[(0, $iTIsm.STENCIL_MODES).RENDERING_MASK_REMOVE] = {\n    stencilFront: {\n        compare: \"equal\",\n        passOp: \"decrement-clamp\"\n    },\n    stencilBack: {\n        compare: \"equal\",\n        passOp: \"decrement-clamp\"\n    }\n};\n$aa02c68e124f5557$export$861c1bf8bb2cddc7[(0, $iTIsm.STENCIL_MODES).MASK_ACTIVE] = {\n    stencilWriteMask: 0,\n    stencilFront: {\n        compare: \"equal\",\n        passOp: \"keep\"\n    },\n    stencilBack: {\n        compare: \"equal\",\n        passOp: \"keep\"\n    }\n};\n\n});\n\nparcelRegister(\"6iudp\", function(module, exports) {\n\n$parcel$export(module.exports, \"RenderTargetSystem\", () => $4bdac1b0be38913e$export$c555e722a4d2378a);\n\nvar $2FMN6 = parcelRequire(\"2FMN6\");\n\nvar $cYXQE = parcelRequire(\"cYXQE\");\n\nvar $9g4gv = parcelRequire(\"9g4gv\");\n\nvar $biPuC = parcelRequire(\"biPuC\");\n\nvar $9LsEj = parcelRequire(\"9LsEj\");\n\nvar $ihl4g = parcelRequire(\"ihl4g\");\n\nvar $cyN9N = parcelRequire(\"cyN9N\");\n\nvar $kYZ33 = parcelRequire(\"kYZ33\");\n\nvar $7lQPp = parcelRequire(\"7lQPp\");\n\nvar $aamgd = parcelRequire(\"aamgd\");\n\nvar $QyiBP = parcelRequire(\"QyiBP\");\n\"use strict\";\nclass $4bdac1b0be38913e$export$c555e722a4d2378a {\n    constructor(renderer){\n        /** This is the root viewport for the render pass*/ this.rootViewPort = new (0, $cYXQE.Rectangle)();\n        /** the current viewport that the gpu is using */ this.viewport = new (0, $cYXQE.Rectangle)();\n        /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */ this.onRenderTargetChange = new (0, $9LsEj.SystemRunner)(\"onRenderTargetChange\");\n        /** the projection matrix that is used by the shaders based on the active render target and the viewport */ this.projectionMatrix = new (0, $2FMN6.Matrix)();\n        /** the default clear color for render targets */ this.defaultClearColor = [\n            0,\n            0,\n            0,\n            0\n        ];\n        /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */ this._renderSurfaceToRenderTargetHash = /* @__PURE__ */ new Map();\n        /** A hash that stores a gpu render target for a given render target. */ this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n        /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */ this._renderTargetStack = [];\n        this._renderer = renderer;\n    }\n    /** called when dev wants to finish a render pass */ finishRenderPass() {\n        this.adaptor.finishRenderPass(this.renderTarget);\n    }\n    /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */ renderStart({ target: target, clear: clear, clearColor: clearColor, frame: frame }) {\n        this._renderTargetStack.length = 0;\n        this.push(target, clear, clearColor, frame);\n        this.rootViewPort.copyFrom(this.viewport);\n        this.rootRenderTarget = this.renderTarget;\n        this.renderingToScreen = (0, $aamgd.isRenderingToScreen)(this.rootRenderTarget);\n    }\n    /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */ bind(renderSurface, clear = true, clearColor, frame) {\n        const renderTarget = this.getRenderTarget(renderSurface);\n        const didChange = this.renderTarget !== renderTarget;\n        this.renderTarget = renderTarget;\n        this.renderSurface = renderSurface;\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n        if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n            this.adaptor.resizeGpuRenderTarget(renderTarget);\n            gpuRenderTarget.width = renderTarget.pixelWidth;\n            gpuRenderTarget.height = renderTarget.pixelHeight;\n        }\n        const source = renderTarget.colorTexture;\n        const viewport = this.viewport;\n        const pixelWidth = source.pixelWidth;\n        const pixelHeight = source.pixelHeight;\n        if (!frame && renderSurface instanceof (0, $kYZ33.Texture)) frame = renderSurface.frame;\n        if (frame) {\n            const resolution = source._resolution;\n            viewport.x = frame.x * resolution + 0.5 | 0;\n            viewport.y = frame.y * resolution + 0.5 | 0;\n            viewport.width = frame.width * resolution + 0.5 | 0;\n            viewport.height = frame.height * resolution + 0.5 | 0;\n        } else {\n            viewport.x = 0;\n            viewport.y = 0;\n            viewport.width = pixelWidth;\n            viewport.height = pixelHeight;\n        }\n        (0, $biPuC.calculateProjection)(this.projectionMatrix, 0, 0, viewport.width / source.resolution, viewport.height / source.resolution, !renderTarget.isRoot);\n        this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n        if (didChange) this.onRenderTargetChange.emit(renderTarget);\n        return renderTarget;\n    }\n    clear(target, clear = (0, $9g4gv.CLEAR).ALL, clearColor) {\n        if (!clear) return;\n        if (target) target = this.getRenderTarget(target);\n        this.adaptor.clear(target || this.renderTarget, clear, clearColor, this.viewport);\n    }\n    contextChange() {\n        this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    }\n    /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */ push(renderSurface, clear = (0, $9g4gv.CLEAR).ALL, clearColor, frame) {\n        const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n        this._renderTargetStack.push({\n            renderTarget: renderTarget,\n            frame: frame\n        });\n        return renderTarget;\n    }\n    /** Pops the current render target from the renderer and restores the previous render target. */ pop() {\n        this._renderTargetStack.pop();\n        const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n        this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n    }\n    /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */ getRenderTarget(renderSurface) {\n        if (renderSurface.isTexture) renderSurface = renderSurface.source;\n        return this._renderSurfaceToRenderTargetHash.get(renderSurface) ?? this._initRenderTarget(renderSurface);\n    }\n    /**\n   * Copies a render surface to another texture\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */ copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n        if (originSrc.x < 0) {\n            size.width += originSrc.x;\n            originDest.x -= originSrc.x;\n            originSrc.x = 0;\n        }\n        if (originSrc.y < 0) {\n            size.height += originSrc.y;\n            originDest.y -= originSrc.y;\n            originSrc.y = 0;\n        }\n        const { pixelWidth: pixelWidth, pixelHeight: pixelHeight } = sourceRenderSurfaceTexture;\n        size.width = Math.min(size.width, pixelWidth - originSrc.x);\n        size.height = Math.min(size.height, pixelHeight - originSrc.y);\n        return this.adaptor.copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest);\n    }\n    /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */ ensureDepthStencil() {\n        if (!this.renderTarget.stencil) {\n            this.renderTarget.stencil = true;\n            this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n        }\n    }\n    /** nukes the render target system */ destroy() {\n        this._renderer = null;\n        this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key)=>{\n            if (renderTarget !== key) renderTarget.destroy();\n        });\n        this._renderSurfaceToRenderTargetHash.clear();\n        this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    }\n    _initRenderTarget(renderSurface) {\n        let renderTarget = null;\n        if ((0, $ihl4g.CanvasSource).test(renderSurface)) renderSurface = (0, $7lQPp.getCanvasTexture)(renderSurface).source;\n        if (renderSurface instanceof (0, $QyiBP.RenderTarget)) renderTarget = renderSurface;\n        else if (renderSurface instanceof (0, $cyN9N.TextureSource)) {\n            renderTarget = new (0, $QyiBP.RenderTarget)({\n                colorTextures: [\n                    renderSurface\n                ]\n            });\n            if ((0, $ihl4g.CanvasSource).test(renderSurface.source.resource)) renderTarget.isRoot = true;\n            renderSurface.once(\"destroy\", ()=>{\n                renderTarget.destroy();\n                const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n                if (gpuRenderTarget) {\n                    this._gpuRenderTargetHash[renderTarget.uid] = null;\n                    this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n                }\n            });\n        }\n        this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n        return renderTarget;\n    }\n    getGpuRenderTarget(renderTarget) {\n        return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n    }\n}\n\n});\nparcelRegister(\"biPuC\", function(module, exports) {\n\n$parcel$export(module.exports, \"calculateProjection\", () => $93dd80894848cea6$export$fa0a4f720dae18a1);\n\"use strict\";\nfunction $93dd80894848cea6$export$fa0a4f720dae18a1(pm, x, y, width, height, flipY) {\n    const sign = flipY ? 1 : -1;\n    pm.identity();\n    pm.a = 1 / width * 2;\n    pm.d = sign * (1 / height * 2);\n    pm.tx = -1 - x * pm.a;\n    pm.ty = -sign - y * pm.d;\n    return pm;\n}\n\n});\n\nparcelRegister(\"aamgd\", function(module, exports) {\n\n$parcel$export(module.exports, \"isRenderingToScreen\", () => $02cbc676d6bab1a6$export$6eeeb7b7562073b1);\n\"use strict\";\nfunction $02cbc676d6bab1a6$export$6eeeb7b7562073b1(renderTarget) {\n    const resource = renderTarget.colorTexture.source.resource;\n    return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement && document.body.contains(resource);\n}\n\n});\n\n\n})();\n//# sourceMappingURL=WebGPURenderer.74344b3d.js.map\n","\"use strict\";\nconst textureBit = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    )\n  }\n};\nconst textureBitGl = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureMatrix;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n        uniform sampler2D uTexture;\n\n         \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = texture(uTexture, vUV);\n        `\n    )\n  }\n};\n\nexport { textureBit, textureBitGl };\n//# sourceMappingURL=textureBit.mjs.map\n","export const textureBit = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* wgsl */`\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `,\n        main: /* wgsl */`\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `,\n        main: /* wgsl */`\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    }\n};\n\nexport const textureBitGl = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureMatrix;\n        `,\n        main: /* glsl */`\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n        uniform sampler2D uTexture;\n\n         \n        `,\n        main: /* glsl */`\n            outColor = texture(uTexture, vUV);\n        `\n    }\n};\n\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe.mjs';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe.mjs';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem.mjs';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe.mjs';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks.mjs';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe.mjs';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe.mjs';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe.mjs';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe.mjs';\nimport { BackgroundSystem } from '../background/BackgroundSystem.mjs';\nimport { BlendModePipe } from '../blendModes/BlendModePipe.mjs';\nimport { ExtractSystem } from '../extract/ExtractSystem.mjs';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem.mjs';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem.mjs';\nimport { HelloSystem } from '../startup/HelloSystem.mjs';\nimport { TextureGCSystem } from '../texture/TextureGCSystem.mjs';\nimport { ViewSystem } from '../view/ViewSystem.mjs';\n\n\"use strict\";\nconst SharedSystems = [\n  BackgroundSystem,\n  GlobalUniformSystem,\n  HelloSystem,\n  ViewSystem,\n  RenderGroupSystem,\n  TextureGCSystem,\n  GenerateTextureSystem,\n  ExtractSystem,\n  RendererInitHook\n];\nconst SharedRenderPipes = [\n  BlendModePipe,\n  BatcherPipe,\n  SpritePipe,\n  RenderGroupPipe,\n  AlphaMaskPipe,\n  StencilMaskPipe,\n  ColorMaskPipe,\n  CustomRenderPipe\n];\n\nexport { SharedRenderPipes, SharedSystems };\n//# sourceMappingURL=SharedSystems.mjs.map\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe';\nimport { BackgroundSystem } from '../background/BackgroundSystem';\nimport { BlendModePipe } from '../blendModes/BlendModePipe';\nimport { ExtractSystem } from '../extract/ExtractSystem';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem';\nimport { HelloSystem } from '../startup/HelloSystem';\nimport { TextureGCSystem } from '../texture/TextureGCSystem';\nimport { ViewSystem } from '../view/ViewSystem';\n\nimport type { ExtractRendererOptions } from './utils/typeUtils';\n\nexport const SharedSystems = [\n    BackgroundSystem,\n    GlobalUniformSystem,\n    HelloSystem,\n    ViewSystem,\n    RenderGroupSystem,\n    TextureGCSystem,\n    GenerateTextureSystem,\n    ExtractSystem,\n    RendererInitHook\n];\n\nexport const SharedRenderPipes = [\n    BlendModePipe,\n    BatcherPipe,\n    SpritePipe,\n    RenderGroupPipe,\n    AlphaMaskPipe,\n    StencilMaskPipe,\n    ColorMaskPipe,\n    CustomRenderPipe\n];\n\n/**\n * Options for the shared systems of a renderer.\n * @memberof rendering\n */\nexport interface SharedRendererOptions extends ExtractRendererOptions<typeof SharedSystems>, PixiMixins.RendererOptions\n{\n    /**\n     * Whether to stop PixiJS from dynamically importing default extensions for the renderer.\n     * It is false by default, and means PixiJS will load all the default extensions, based\n     * on the environment e.g browser/webworker.\n     * If you set this to true, then you will need to manually import the systems and extensions you need.\n     *\n     * e.g.\n     * ```js\n     * import 'accessibility';\n     * import 'app';\n     * import 'events';\n     * import 'spritesheet';\n     * import 'graphics';\n     * import 'mesh';\n     * import 'text';\n     * import 'text-bitmap';\n     * import 'text-html';\n     * import { autoDetectRenderer } from 'pixi.js';\n     *\n     * const renderer = await autoDetectRenderer({\n     *   width: 800,\n     *   height: 600,\n     *   skipExtensionImports: true,\n     * });\n     * ```\n     * @default false\n     */\n    skipExtensionImports?: boolean;\n    /**\n     * @default true\n     * @deprecated since 8.1.6\n     * @see `skipExtensionImports`\n     */\n    manageImports?: boolean;\n}\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass CustomRenderPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderable(container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(container);\n  }\n  execute(container) {\n    if (!container.isRenderable)\n      return;\n    container.render(this._renderer);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nCustomRenderPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"customRender\"\n};\n\nexport { CustomRenderPipe };\n//# sourceMappingURL=CustomRenderPipe.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderContainer } from './RenderContainer';\n\n/**\n * The CustomRenderPipe is a render pipe that allows for custom rendering logic for your renderable objects.\n * @example\n * import { RenderContainer } from 'pixi.js';\n *\n * const renderContainer = new RenderContainer(\n * (renderer) =>  {\n *     renderer.clear({\n *       clearColor: 'green', // clear the screen to green when rendering this item\n *     });\n * })\n * @memberof rendering\n */\nexport class CustomRenderPipe implements InstructionPipe<RenderContainer>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'customRender',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderable(container: RenderContainer, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add(container);\n    }\n\n    public execute(container: RenderContainer)\n    {\n        if (!container.isRenderable) return;\n\n        container.render(this._renderer);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\n\n\"use strict\";\nclass RenderGroupPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderGroup(renderGroup, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderGroup);\n  }\n  execute(renderGroup) {\n    if (!renderGroup.isRenderable)\n      return;\n    this._renderer.globalUniforms.push({\n      worldTransformMatrix: renderGroup.worldTransform,\n      worldColor: renderGroup.worldColorAlpha\n    });\n    executeInstructions(renderGroup, this._renderer.renderPipes);\n    this._renderer.globalUniforms.pop();\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nRenderGroupPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupPipe };\n//# sourceMappingURL=RenderGroupPipe.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { executeInstructions } from './utils/executeInstructions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderGroup } from './RenderGroup';\n\nexport class RenderGroupPipe implements InstructionPipe<RenderGroup>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderGroup(renderGroup: RenderGroup, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add(renderGroup);\n    }\n\n    public execute(renderGroup: RenderGroup)\n    {\n        if (!renderGroup.isRenderable) return;\n\n        this._renderer.globalUniforms.push({\n            worldTransformMatrix: renderGroup.worldTransform,\n            worldColor: renderGroup.worldColorAlpha,\n        });\n\n        executeInstructions(renderGroup, this._renderer.renderPipes);\n\n        this._renderer.globalUniforms.pop();\n\n        // now render a quad..\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","\"use strict\";\nfunction executeInstructions(renderGroup, renderer) {\n  const instructionSet = renderGroup.instructionSet;\n  const instructions = instructionSet.instructions;\n  for (let i = 0; i < instructionSet.instructionSize; i++) {\n    const instruction = instructions[i];\n    renderer[instruction.renderPipeId].execute(instruction);\n  }\n}\n\nexport { executeInstructions };\n//# sourceMappingURL=executeInstructions.mjs.map\n","import type { InstructionPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function executeInstructions(renderGroup: RenderGroup, renderer: RenderPipes)\n{\n    const instructionSet = renderGroup.instructionSet;\n    const instructions = instructionSet.instructions;\n\n    for (let i = 0; i < instructionSet.instructionSize; i++)\n    {\n        const instruction = instructions[i];\n\n        (renderer[instruction.renderPipeId as keyof RenderPipes] as InstructionPipe<any>).execute(instruction);\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { buildInstructions } from './utils/buildInstructions.mjs';\nimport { collectRenderGroups } from './utils/collectRenderGroups.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms.mjs';\nimport { validateRenderables } from './utils/validateRenderables.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({ container, transform }) {\n    container.isRenderGroup = true;\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    const renderGroups = collectRenderGroups(container.renderGroup, []);\n    let originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    for (let i = 0; i < renderGroups.length; i++) {\n      const renderGroup = renderGroups[i];\n      renderGroup.runOnRender();\n      renderGroup.instructionSet.renderPipes = renderPipes;\n      if (!renderGroup.structureDidChange) {\n        validateRenderables(renderGroup, renderPipes);\n      }\n      updateRenderGroupTransforms(renderGroup);\n      if (renderGroup.structureDidChange) {\n        renderGroup.structureDidChange = false;\n        buildInstructions(renderGroup, renderPipes);\n      } else {\n        updateRenderables(renderGroup);\n      }\n      renderGroup.childrenRenderablesToUpdate.index = 0;\n      renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    }\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"renderGroup\"\n};\nfunction updateRenderables(renderGroup) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    if (container.didViewUpdate) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n}\n\nexport { RenderGroupSystem };\n//# sourceMappingURL=RenderGroupSystem.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Matrix } from '../../maths/matrix/Matrix';\nimport { buildInstructions } from './utils/buildInstructions';\nimport { collectRenderGroups } from './utils/collectRenderGroups';\nimport { executeInstructions } from './utils/executeInstructions';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms';\nimport { validateRenderables } from './utils/validateRenderables';\n\nimport type { WebGPURenderer } from '../../rendering/renderers/gpu/WebGPURenderer';\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { Container } from './Container';\nimport type { RenderGroup } from './RenderGroup';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class RenderGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected render({ container, transform }: {container: Container, transform: Matrix}): void\n    {\n        container.isRenderGroup = true;\n\n        const parent = container.parent;\n        const renderGroupParent = container.renderGroup.renderGroupParent;\n\n        container.parent = null;\n        container.renderGroup.renderGroupParent = null;\n\n        const renderer = this._renderer;\n\n        // collect all the renderGroups in the scene and then render them one by one..\n        const renderGroups = collectRenderGroups(container.renderGroup, []);\n\n        let originalLocalTransform: Matrix = tempMatrix;\n\n        if (transform)\n        {\n            originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n            container.renderGroup.localTransform.copyFrom(transform);\n        }\n\n        const renderPipes = (renderer as WebGPURenderer).renderPipes;\n\n        for (let i = 0; i < renderGroups.length; i++)\n        {\n            const renderGroup = renderGroups[i];\n\n            renderGroup.runOnRender();\n\n            renderGroup.instructionSet.renderPipes = renderPipes;\n\n            if (!renderGroup.structureDidChange)\n            {\n                // phase 1 - validate all the renderables\n                validateRenderables(renderGroup, renderPipes);\n            }\n\n            // phase 2 - update all the transforms\n            // including updating the renderables..\n            updateRenderGroupTransforms(renderGroup);\n\n            if (renderGroup.structureDidChange)\n            {\n                renderGroup.structureDidChange = false;\n\n                // build the renderables\n                buildInstructions(renderGroup, renderPipes);\n            }\n            else\n            {\n                // update remaining renderables\n                updateRenderables(renderGroup);\n            }\n\n            // reset the renderables to update\n            renderGroup.childrenRenderablesToUpdate.index = 0;\n\n            // upload all the things!\n            renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n        }\n\n        renderer.globalUniforms.start({\n            worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n            worldColor: container.renderGroup.worldColorAlpha,\n\n        });\n\n        executeInstructions(container.renderGroup, renderPipes);\n\n        // TODO need to add some events / runners for things like this to hook up to\n        if (renderPipes.uniformBatch)\n        {\n            renderPipes.uniformBatch.renderEnd();\n        }\n\n        if (transform)\n        {\n            container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n        }\n\n        container.parent = parent;\n        container.renderGroup.renderGroupParent = renderGroupParent;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n\nfunction updateRenderables(renderGroup: RenderGroup)\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        if (container.didViewUpdate)\n        {\n            renderGroup.updateRenderable(container);\n        }\n    }\n}\n\n","\"use strict\";\nfunction buildInstructions(renderGroup, renderPipes) {\n  const root = renderGroup.root;\n  const instructionSet = renderGroup.instructionSet;\n  instructionSet.reset();\n  renderPipes.batch.buildStart(instructionSet);\n  renderPipes.blendMode.buildStart();\n  renderPipes.colorMask.buildStart();\n  if (root.sortableChildren) {\n    root.sortChildren();\n  }\n  collectAllRenderablesAdvanced(root, instructionSet, renderPipes, true);\n  renderPipes.batch.buildEnd(instructionSet);\n  renderPipes.blendMode.buildEnd(instructionSet);\n}\nfunction collectAllRenderables(container, instructionSet, rendererPipes) {\n  if (container.globalDisplayStatus < 7 || !container.includeInBuild)\n    return;\n  if (container.sortableChildren) {\n    container.sortChildren();\n  }\n  if (container.isSimple) {\n    collectAllRenderablesSimple(container, instructionSet, rendererPipes);\n  } else {\n    collectAllRenderablesAdvanced(container, instructionSet, rendererPipes, false);\n  }\n}\nfunction collectAllRenderablesSimple(container, instructionSet, renderPipes) {\n  if (container.renderPipeId) {\n    renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n    container.didViewUpdate = false;\n    const rp = renderPipes;\n    rp[container.renderPipeId].addRenderable(container, instructionSet);\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      collectAllRenderables(children[i], instructionSet, renderPipes);\n    }\n  }\n}\nfunction collectAllRenderablesAdvanced(container, instructionSet, renderPipes, isRoot) {\n  if (!isRoot && container.renderGroup) {\n    renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n  } else {\n    for (let i = 0; i < container.effects.length; i++) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.push(effect, container, instructionSet);\n    }\n    const renderPipeId = container.renderPipeId;\n    if (renderPipeId) {\n      renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n      container.didViewUpdate = false;\n      const pipe = renderPipes[renderPipeId];\n      pipe.addRenderable(container, instructionSet);\n    }\n    const children = container.children;\n    if (children.length) {\n      for (let i = 0; i < children.length; i++) {\n        collectAllRenderables(children[i], instructionSet, renderPipes);\n      }\n    }\n    for (let i = container.effects.length - 1; i >= 0; i--) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.pop(effect, container, instructionSet);\n    }\n  }\n}\n\nexport { buildInstructions, collectAllRenderables };\n//# sourceMappingURL=buildInstructions.mjs.map\n","import type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { Container } from '../Container';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function buildInstructions(renderGroup: RenderGroup, renderPipes: RenderPipes)\n{\n    const root = renderGroup.root;\n    const instructionSet = renderGroup.instructionSet;\n\n    instructionSet.reset();\n\n    // TODO add some events / runners for build start\n    renderPipes.batch.buildStart(instructionSet);\n    renderPipes.blendMode.buildStart();\n    renderPipes.colorMask.buildStart();\n\n    if (root.sortableChildren)\n    {\n        root.sortChildren();\n    }\n\n    collectAllRenderablesAdvanced(root, instructionSet, renderPipes, true);\n\n    // instructionSet.log();\n    // TODO add some events / runners for build end\n    renderPipes.batch.buildEnd(instructionSet);\n    renderPipes.blendMode.buildEnd(instructionSet);\n\n    // instructionSet.log();\n}\n\nexport function collectAllRenderables(\n    container: Container,\n    instructionSet: InstructionSet,\n    rendererPipes: RenderPipes\n): void\n{\n    // if there is 0b01 or 0b10 the return value\n\n    if (container.globalDisplayStatus < 0b111 || !container.includeInBuild) return;\n\n    if (container.sortableChildren)\n    {\n        container.sortChildren();\n    }\n\n    if (container.isSimple)\n    {\n        collectAllRenderablesSimple(container, instructionSet, rendererPipes);\n    }\n    else\n    {\n        collectAllRenderablesAdvanced(container, instructionSet, rendererPipes, false);\n    }\n}\n\nfunction collectAllRenderablesSimple(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderPipes: RenderPipes\n): void\n{\n    if (container.renderPipeId)\n    {\n        // TODO add blends in\n        renderPipes.blendMode.setBlendMode(container as Renderable, container.groupBlendMode, instructionSet);\n\n        container.didViewUpdate = false;\n\n        const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n        rp[container.renderPipeId].addRenderable(container as Renderable, instructionSet);\n    }\n\n    if (!container.renderGroup)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            collectAllRenderables(children[i], instructionSet, renderPipes);\n        }\n    }\n}\n\nfunction collectAllRenderablesAdvanced(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderPipes: RenderPipes,\n    isRoot: boolean\n): void\n{\n    if (!isRoot && container.renderGroup)\n    {\n        renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n    }\n    else\n    {\n        for (let i = 0; i < container.effects.length; i++)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.push(effect, container, instructionSet);\n        }\n\n        const renderPipeId = container.renderPipeId;\n\n        if (renderPipeId)\n        {\n            // TODO add blends in\n            renderPipes.blendMode.setBlendMode(container as Renderable, container.groupBlendMode, instructionSet);\n            container.didViewUpdate = false;\n\n            const pipe = renderPipes[renderPipeId as keyof RenderPipes]as RenderPipe<any>;\n\n            pipe.addRenderable(container, instructionSet);\n        }\n\n        const children = container.children;\n\n        if (children.length)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                collectAllRenderables(children[i], instructionSet, renderPipes);\n            }\n        }\n\n        // loop backwards through effects\n        for (let i = container.effects.length - 1; i >= 0; i--)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.pop(effect, container, instructionSet);\n        }\n    }\n}\n\n","\"use strict\";\nfunction collectRenderGroups(renderGroup, out = []) {\n  out.push(renderGroup);\n  for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n    collectRenderGroups(renderGroup.renderGroupChildren[i], out);\n  }\n  return out;\n}\n\nexport { collectRenderGroups };\n//# sourceMappingURL=collectRenderGroups.mjs.map\n","import type { RenderGroup } from '../RenderGroup';\n\nexport function collectRenderGroups(renderGroup: RenderGroup, out: RenderGroup[] = [])\n{\n    out.push(renderGroup);\n\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n    {\n        collectRenderGroups(renderGroup.renderGroupChildren[i], out);\n    }\n\n    return out;\n}\n","import { Container, UPDATE_VISIBLE, UPDATE_COLOR, UPDATE_BLEND } from '../Container.mjs';\nimport { mixColors } from './mixColors.mjs';\n\n\"use strict\";\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\nfunction updateRenderGroupTransforms(renderGroup, updateChildRenderGroups = false) {\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const renderGroupDepth = Number(j);\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      const child = list[i];\n      if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth) {\n        updateTransformAndChildren(child, updateTick, 0);\n      }\n    }\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(\n      root.relativeGroupTransform,\n      renderGroupParent.worldTransform\n    );\n    renderGroup.worldColor = mixColors(\n      root.groupColor,\n      renderGroupParent.worldColor\n    );\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick)\n    return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.renderGroup) {\n    updateFlags = updateFlags | container._updateFlags;\n    container.relativeGroupTransform.appendFrom(\n      localTransform,\n      parent.relativeGroupTransform\n    );\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.parentRenderGroup;\n    if (container.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & UPDATE_COLOR) {\n    container.groupColor = mixColors(\n      container.localColor,\n      parent.groupColor\n    );\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & UPDATE_BLEND) {\n    container.groupBlendMode = container.localBlendMode === \"inherit\" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & UPDATE_VISIBLE) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\n\nexport { updateRenderGroupTransform, updateRenderGroupTransforms, updateTransformAndChildren };\n//# sourceMappingURL=updateRenderGroupTransforms.mjs.map\n","import { Container, UPDATE_BLEND, UPDATE_COLOR, UPDATE_VISIBLE } from '../Container';\nimport { mixColors } from './mixColors';\n\nimport type { RenderGroup } from '../RenderGroup';\n\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\n\nexport function updateRenderGroupTransforms(renderGroup: RenderGroup, updateChildRenderGroups = false)\n{\n    updateRenderGroupTransform(renderGroup);\n\n    const childrenToUpdate = renderGroup.childrenToUpdate;\n\n    const updateTick = renderGroup.updateTick++;\n\n    for (const j in childrenToUpdate)\n    {\n        const renderGroupDepth = Number(j);\n\n        const childrenAtDepth = childrenToUpdate[j];\n\n        const list = childrenAtDepth.list;\n        const index = childrenAtDepth.index;\n\n        for (let i = 0; i < index; i++)\n        {\n            const child = list[i];\n\n            // check that these things match our layer and depth - if the renderGroup does not match,\n            // the child has been re-parented into another rendergroup since it asked to be updated so we can ignore it here\n            // secondly if the relativeRenderGroupDepth has changed, then the it means it will have been nested at a\n            // different different level in the render group - so we can wait for the update that does in fact match\n            if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth)\n            {\n                updateTransformAndChildren(child, updateTick, 0);\n            }\n        }\n\n        childrenAtDepth.index = 0;\n    }\n\n    if (updateChildRenderGroups)\n    {\n        for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n        {\n            updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n        }\n    }\n}\n\nexport function updateRenderGroupTransform(renderGroup: RenderGroup)\n{\n    const root = renderGroup.root;\n\n    let worldAlpha;\n\n    if (renderGroup.renderGroupParent)\n    {\n        const renderGroupParent = renderGroup.renderGroupParent;\n\n        renderGroup.worldTransform.appendFrom(\n            root.relativeGroupTransform,\n            renderGroupParent.worldTransform,\n        );\n\n        renderGroup.worldColor = mixColors(\n            root.groupColor,\n            renderGroupParent.worldColor,\n        );\n\n        worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n    }\n    else\n    {\n        renderGroup.worldTransform.copyFrom(root.localTransform);\n        renderGroup.worldColor = root.localColor;\n        worldAlpha = root.localAlpha;\n    }\n\n    // eslint-disable-next-line no-nested-ternary\n    worldAlpha = worldAlpha < 0 ? 0 : (worldAlpha > 1 ? 1 : worldAlpha);\n    renderGroup.worldAlpha = worldAlpha;\n\n    renderGroup.worldColorAlpha = renderGroup.worldColor\n            + (((worldAlpha * 255) | 0) << 24);\n}\n\nexport function updateTransformAndChildren(container: Container, updateTick: number, updateFlags: number)\n{\n    if (updateTick === container.updateTick) return;\n    container.updateTick = updateTick;\n\n    container.didChange = false;\n\n    const localTransform = container.localTransform;\n\n    container.updateLocalTransform();\n\n    const parent = container.parent;\n\n    if ((parent && !parent.renderGroup))\n    {\n        updateFlags = updateFlags | container._updateFlags;\n\n        container.relativeGroupTransform.appendFrom(\n            localTransform,\n            parent.relativeGroupTransform,\n        );\n\n        if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE)\n        {\n            updateColorBlendVisibility(container, parent, updateFlags);\n        }\n    }\n    else\n    {\n        updateFlags = container._updateFlags;\n\n        container.relativeGroupTransform.copyFrom(localTransform);\n\n        if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE)\n        {\n            updateColorBlendVisibility(container, tempContainer, updateFlags);\n        }\n    }\n\n    // don't update children if its a layer..\n    if (!container.renderGroup)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            updateTransformAndChildren(children[i], updateTick, updateFlags);\n        }\n\n        const renderGroup = container.parentRenderGroup;\n\n        if (container.renderPipeId && !renderGroup.structureDidChange)\n        {\n            renderGroup.updateRenderable(container);\n        }\n    }\n}\n\nfunction updateColorBlendVisibility(\n    container: Container,\n    parent: Container,\n    updateFlags: number,\n): void\n{\n    if (updateFlags & UPDATE_COLOR)\n    {\n        container.groupColor = mixColors(\n            container.localColor,\n            parent.groupColor\n        );\n\n        let groupAlpha = container.localAlpha * parent.groupAlpha;\n\n        // eslint-disable-next-line no-nested-ternary\n        groupAlpha = groupAlpha < 0 ? 0 : (groupAlpha > 1 ? 1 : groupAlpha);\n\n        container.groupAlpha = groupAlpha;\n        container.groupColorAlpha = container.groupColor + (((groupAlpha * 255) | 0) << 24);\n    }\n\n    if (updateFlags & UPDATE_BLEND)\n    {\n        container.groupBlendMode = container.localBlendMode === 'inherit' ? parent.groupBlendMode : container.localBlendMode;\n    }\n\n    if (updateFlags & UPDATE_VISIBLE)\n    {\n        container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n    }\n\n    container._updateFlags = 0;\n}\n\n","import { mixHexColors } from './mixHexColors.mjs';\n\n\"use strict\";\nconst WHITE_BGR = 16777215;\nfunction mixColors(localBGRColor, parentBGRColor) {\n  if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR) {\n    return localBGRColor + parentBGRColor - WHITE_BGR;\n  }\n  return mixHexColors(localBGRColor, parentBGRColor, 0.5);\n}\nfunction mixStandardAnd32BitColors(localColorRGB, localAlpha, parentColor) {\n  const parentAlpha = (parentColor >> 24 & 255) / 255;\n  const globalAlpha = localAlpha * parentAlpha * 255;\n  const localBGRColor = ((localColorRGB & 255) << 16) + (localColorRGB & 65280) + (localColorRGB >> 16 & 255);\n  const parentBGRColor = parentColor & 16777215;\n  let sharedBGRColor;\n  if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR) {\n    sharedBGRColor = localBGRColor + parentBGRColor - WHITE_BGR;\n  } else {\n    sharedBGRColor = mixHexColors(localBGRColor, parentBGRColor, 0.5);\n  }\n  return sharedBGRColor + (globalAlpha << 24);\n}\n\nexport { mixColors, mixStandardAnd32BitColors };\n//# sourceMappingURL=mixColors.mjs.map\n","import { mixHexColors } from './mixHexColors';\n\nconst WHITE_BGR = 0xFFFFFF;\n\nexport function mixColors(localBGRColor: number, parentBGRColor: number)\n{\n    if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR)\n    {\n        return localBGRColor + parentBGRColor - WHITE_BGR;\n    }\n\n    return mixHexColors(localBGRColor, parentBGRColor, 0.5);\n}\n\nexport function mixStandardAnd32BitColors(localColorRGB: number, localAlpha: number, parentColor: number)\n{\n    const parentAlpha = ((parentColor >> 24) & 0xFF) / 255;\n\n    const globalAlpha = ((localAlpha * parentAlpha) * 255);\n\n    // flip rgb to bgr\n    const localBGRColor = ((localColorRGB & 0xFF) << 16) + (localColorRGB & 0xFF00) + ((localColorRGB >> 16) & 0xFF);\n\n    const parentBGRColor = parentColor & 0x00FFFFFF;\n\n    let sharedBGRColor: number;\n\n    if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR)\n    {\n        sharedBGRColor = localBGRColor + parentBGRColor - WHITE_BGR;\n    }\n    else\n    {\n        sharedBGRColor = mixHexColors(localBGRColor, parentBGRColor, 0.5);\n    }\n\n    return sharedBGRColor + (globalAlpha << 24);\n}\n","\"use strict\";\nfunction mixHexColors(color1, color2, ratio) {\n  const r1 = color1 >> 16 & 255;\n  const g1 = color1 >> 8 & 255;\n  const b1 = color1 & 255;\n  const r2 = color2 >> 16 & 255;\n  const g2 = color2 >> 8 & 255;\n  const b2 = color2 & 255;\n  const r = r1 + (r2 - r1) * ratio;\n  const g = g1 + (g2 - g1) * ratio;\n  const b = b1 + (b2 - b1) * ratio;\n  return (r << 16) + (g << 8) + b;\n}\n\nexport { mixHexColors };\n//# sourceMappingURL=mixHexColors.mjs.map\n","export function mixHexColors(color1: number, color2: number, ratio: number): number\n{\n    const r1 = (color1 >> 16) & 0xFF;\n    const g1 = (color1 >> 8) & 0xFF;\n    const b1 = color1 & 0xFF;\n\n    const r2 = (color2 >> 16) & 0xFF;\n    const g2 = (color2 >> 8) & 0xFF;\n    const b2 = color2 & 0xFF;\n\n    const r = r1 + ((r2 - r1) * ratio);\n    const g = g1 + ((g2 - g1) * ratio);\n    const b = b1 + ((b2 - b1) * ratio);\n\n    return (r << 16) + (g << 8) + b;\n}\n\n","\"use strict\";\nfunction validateRenderables(renderGroup, renderPipes) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  let rebuildRequired = false;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    const renderable = container;\n    const pipe = renderPipes[renderable.renderPipeId];\n    rebuildRequired = pipe.validateRenderable(container);\n    if (rebuildRequired) {\n      break;\n    }\n  }\n  renderGroup.structureDidChange = rebuildRequired;\n  return rebuildRequired;\n}\n\nexport { validateRenderables };\n//# sourceMappingURL=validateRenderables.mjs.map\n","import type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function validateRenderables(renderGroup: RenderGroup, renderPipes: RenderPipes): boolean\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    let rebuildRequired = false;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        const renderable = container;\n        const pipe = renderPipes[renderable.renderPipeId as keyof RenderPipes] as RenderPipe<any>;\n\n        rebuildRequired = pipe.validateRenderable(container);\n\n        if (rebuildRequired)\n        {\n            break;\n        }\n    }\n\n    renderGroup.structureDidChange = rebuildRequired;\n\n    return rebuildRequired;\n}\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from './BatchableSprite.mjs';\n\n\"use strict\";\nclass SpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, _instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite.batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    sprite._didSpriteUpdate = false;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableSprite = BigPool.get(BatchableSprite);\n    batchableSprite.renderable = sprite;\n    batchableSprite.texture = sprite._texture;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableSprite;\n    sprite._didSpriteUpdate = false;\n    sprite.on(\"destroyed\", () => {\n      this.destroyRenderable(sprite);\n    });\n    return batchableSprite;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      BigPool.return(this._gpuSpriteHash[i]);\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"sprite\"\n};\n\nexport { SpritePipe };\n//# sourceMappingURL=SpritePipe.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from './BatchableSprite';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Sprite } from './Sprite';\n\nexport class SpritePipe implements RenderPipe<Sprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'sprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuSpriteHash: Record<number, BatchableSprite> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderable(sprite: Sprite, _instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        // TODO visibility\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n    }\n\n    public updateRenderable(sprite: Sprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite.batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: Sprite): boolean\n    {\n        const texture = sprite._texture;\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (gpuSprite.texture._source !== texture._source)\n        {\n            return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n        }\n\n        return false;\n    }\n\n    public destroyRenderable(sprite: Sprite)\n    {\n        const batchableSprite = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableSprite as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n    }\n\n    private _updateBatchableSprite(sprite: Sprite, batchableSprite: BatchableSprite)\n    {\n        sprite._didSpriteUpdate = false;\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: Sprite): BatchableSprite\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: Sprite): BatchableSprite\n    {\n        const batchableSprite = BigPool.get(BatchableSprite);\n\n        batchableSprite.renderable = sprite;\n\n        batchableSprite.texture = sprite._texture;\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableSprite;\n\n        sprite._didSpriteUpdate = false;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', () =>\n        {\n            this.destroyRenderable(sprite);\n        });\n\n        return batchableSprite;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            BigPool.return(this._gpuSpriteHash[i] as PoolItem);\n        }\n\n        this._gpuSpriteHash = null;\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { Batcher } from './Batcher.mjs';\nimport { BatchGeometry } from './BatchGeometry.mjs';\n\n\"use strict\";\nclass BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._batches = /* @__PURE__ */ Object.create(null);\n    this._geometries = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init(this);\n  }\n  buildStart(instructionSet) {\n    if (!this._batches[instructionSet.uid]) {\n      const batcher = new Batcher();\n      this._batches[instructionSet.uid] = batcher;\n      this._geometries[batcher.uid] = new BatchGeometry();\n    }\n    this._activeBatch = this._batches[instructionSet.uid];\n    this._activeGeometry = this._geometries[this._activeBatch.uid];\n    this._activeBatch.begin();\n  }\n  addToBatch(batchableObject) {\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    const activeBatch = this._activeBatch;\n    const geometry = this._activeGeometry;\n    activeBatch.finish(instructionSet);\n    geometry.indexBuffer.setDataWithSize(activeBatch.indexBuffer, activeBatch.indexSize, true);\n    geometry.buffers[0].setDataWithSize(activeBatch.attributeBuffer.float32View, activeBatch.attributeSize, false);\n  }\n  upload(instructionSet) {\n    const batcher = this._batches[instructionSet.uid];\n    const geometry = this._geometries[batcher.uid];\n    if (batcher.dirty) {\n      batcher.dirty = false;\n      geometry.buffers[0].update(batcher.attributeSize * 4);\n    }\n  }\n  execute(batch) {\n    if (batch.action === \"startBatch\") {\n      const batcher = batch.batcher;\n      const geometry = this._geometries[batcher.uid];\n      this._adaptor.start(this, geometry);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    for (const i in this._batches) {\n      this._batches[i].destroy();\n    }\n    this._batches = null;\n    for (const i in this._geometries) {\n      this._geometries[i].destroy();\n    }\n    this._geometries = null;\n  }\n}\n/** @ignore */\nBatcherPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"batch\"\n};\n\nexport { BatcherPipe };\n//# sourceMappingURL=BatcherPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\nimport { Batcher } from './Batcher';\nimport { BatchGeometry } from './BatchGeometry';\n\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { Batch, BatchableObject } from './Batcher';\n\nexport interface BatcherAdaptor\n{\n    start(batchPipe: BatcherPipe, geometry: Geometry): void\n    init(batchPipe: BatcherPipe): void;\n    execute(batchPipe: BatcherPipe, batch: Batch): void\n    destroy(): void;\n    contextChange?(): void;\n}\n\n// eslint-disable-next-line max-len\nexport class BatcherPipe implements InstructionPipe<Batch>, BatchPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'batch',\n    } as const;\n\n    public state: State = State.for2d();\n    public renderer: Renderer;\n\n    private _batches: Record<number, Batcher> = Object.create(null);\n    private _geometries: Record<number, BatchGeometry> = Object.create(null);\n    private _adaptor: BatcherAdaptor;\n\n    private _activeBatch: Batcher;\n    private _activeGeometry: Geometry;\n\n    constructor(renderer: Renderer, adaptor: BatcherAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init(this);\n    }\n\n    public buildStart(instructionSet: InstructionSet)\n    {\n        if (!this._batches[instructionSet.uid])\n        {\n            const batcher = new Batcher();\n\n            this._batches[instructionSet.uid] = batcher;\n            this._geometries[batcher.uid] = new BatchGeometry();\n        }\n\n        this._activeBatch = this._batches[instructionSet.uid];\n        this._activeGeometry = this._geometries[this._activeBatch.uid];\n\n        this._activeBatch.begin();\n    }\n\n    public addToBatch(batchableObject: BatchableObject)\n    {\n        this._activeBatch.add(batchableObject);\n    }\n\n    public break(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n    }\n\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        const activeBatch = this._activeBatch;\n        const geometry = this._activeGeometry;\n\n        activeBatch.finish(instructionSet);\n\n        geometry.indexBuffer.setDataWithSize(activeBatch.indexBuffer, activeBatch.indexSize, true);\n\n        geometry.buffers[0].setDataWithSize(activeBatch.attributeBuffer.float32View, activeBatch.attributeSize, false);\n    }\n\n    public upload(instructionSet: InstructionSet)\n    {\n        const batcher = this._batches[instructionSet.uid];\n        const geometry = this._geometries[batcher.uid];\n\n        if (batcher.dirty)\n        {\n            batcher.dirty = false;\n            geometry.buffers[0].update(batcher.attributeSize * 4);\n        }\n    }\n\n    public execute(batch: Batch)\n    {\n        if (batch.action === 'startBatch')\n        {\n            const batcher = batch.batcher;\n            const geometry = this._geometries[batcher.uid];\n\n            this._adaptor.start(this, geometry);\n        }\n\n        this._adaptor.execute(this, batch);\n    }\n\n    public destroy()\n    {\n        this.state = null;\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        for (const i in this._batches)\n        {\n            this._batches[i].destroy();\n        }\n\n        this._batches = null;\n\n        for (const i in this._geometries)\n        {\n            this._geometries[i].destroy();\n        }\n\n        this._geometries = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../filters/FilterEffect.mjs';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter.mjs';\nimport { Bounds } from '../../../scene/container/bounds/Bounds.mjs';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds.mjs';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions.mjs';\nimport { Sprite } from '../../../scene/sprite/Sprite.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../renderers/types.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nclass AlphaMaskEffect extends FilterEffect {\n  constructor() {\n    super();\n    this.filters = [new MaskFilter({\n      sprite: new Sprite(Texture.EMPTY),\n      resolution: \"inherit\",\n      antialias: \"inherit\"\n    })];\n  }\n  get sprite() {\n    return this.filters[0].sprite;\n  }\n  set sprite(value) {\n    this.filters[0].sprite = value;\n  }\n}\nclass AlphaMaskPipe {\n  constructor(renderer) {\n    this._activeMaskStage = [];\n    this._renderer = renderer;\n  }\n  push(mask, maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      canBundle: false,\n      maskedContainer\n    });\n    if (mask.renderMaskToTexture) {\n      const maskContainer = mask.mask;\n      maskContainer.includeInBuild = true;\n      collectAllRenderables(\n        maskContainer,\n        instructionSet,\n        renderer.renderPipes\n      );\n      maskContainer.includeInBuild = false;\n    }\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      maskedContainer,\n      canBundle: false\n    });\n  }\n  pop(mask, _maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"popMaskEnd\",\n      mask,\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    const renderMask = instruction.mask.renderMaskToTexture;\n    if (instruction.action === \"pushMaskBegin\") {\n      const filterEffect = BigPool.get(AlphaMaskEffect);\n      if (renderMask) {\n        instruction.mask.mask.measurable = true;\n        const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n        instruction.mask.mask.measurable = false;\n        bounds.ceil();\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n        const filterTexture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          colorTextureSource._resolution,\n          colorTextureSource.antialias\n        );\n        renderer.renderTarget.push(filterTexture, true);\n        renderer.globalUniforms.push({\n          offset: bounds,\n          worldColor: 4294967295\n        });\n        const sprite = filterEffect.sprite;\n        sprite.texture = filterTexture;\n        sprite.worldTransform.tx = bounds.minX;\n        sprite.worldTransform.ty = bounds.minY;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer,\n          filterTexture\n        });\n      } else {\n        filterEffect.sprite = instruction.mask.mask;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer\n        });\n      }\n    } else if (instruction.action === \"pushMaskEnd\") {\n      const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n      if (renderMask) {\n        if (renderer.type === RendererType.WEBGL) {\n          renderer.renderTarget.finishRenderPass();\n        }\n        renderer.renderTarget.pop();\n        renderer.globalUniforms.pop();\n      }\n      renderer.filter.push({\n        renderPipeId: \"filter\",\n        action: \"pushFilter\",\n        container: maskData.maskedContainer,\n        filterEffect: maskData.filterEffect,\n        canBundle: false\n      });\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.filter.pop();\n      const maskData = this._activeMaskStage.pop();\n      if (renderMask) {\n        TexturePool.returnTexture(maskData.filterTexture);\n      }\n      BigPool.return(maskData.filterEffect);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n    this._activeMaskStage = null;\n  }\n}\n/** @ignore */\nAlphaMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"alphaMask\"\n};\n\nexport { AlphaMaskPipe };\n//# sourceMappingURL=AlphaMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { FilterEffect } from '../../../filters/FilterEffect';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter';\nimport { Bounds } from '../../../scene/container/bounds/Bounds';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions';\nimport { Sprite } from '../../../scene/sprite/Sprite';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool';\nimport { RendererType } from '../../renderers/types';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { RenderTarget } from '../../renderers/shared/renderTarget/RenderTarget';\nimport type { Renderer } from '../../renderers/types';\nimport type { AlphaMask } from './AlphaMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nconst tempBounds = new Bounds();\n\nclass AlphaMaskEffect extends FilterEffect implements PoolItem\n{\n    constructor()\n    {\n        super();\n\n        this.filters = [new MaskFilter({\n            sprite: new Sprite(Texture.EMPTY),\n            resolution: 'inherit',\n            antialias: 'inherit'\n        })];\n    }\n\n    get sprite(): Sprite\n    {\n        return (this.filters[0] as MaskFilter).sprite;\n    }\n\n    set sprite(value: Sprite)\n    {\n        (this.filters[0] as MaskFilter).sprite = value;\n    }\n\n    public init: () => void;\n}\n\nexport interface AlphaMaskInstruction extends Instruction\n{\n    renderPipeId: 'alphaMask',\n    action: MaskMode,\n    mask: AlphaMask,\n    maskedContainer: Container,\n    renderMask: boolean,\n}\n\nexport interface AlphaMaskData\n{\n    filterEffect: AlphaMaskEffect,\n    maskedContainer: Container,\n    previousRenderTarget?: RenderTarget,\n    filterTexture?: Texture,\n}\n\nexport class AlphaMaskPipe implements InstructionPipe<AlphaMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'alphaMask',\n    } as const;\n\n    private _renderer: Renderer;\n    private _activeMaskStage: AlphaMaskData[] = [];\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskBegin',\n            mask,\n            canBundle: false,\n            maskedContainer\n        } as AlphaMaskInstruction);\n\n        if ((mask as AlphaMask).renderMaskToTexture)\n        {\n            const maskContainer = (mask as AlphaMask).mask;\n\n            maskContainer.includeInBuild = true;\n\n            collectAllRenderables(\n                maskContainer,\n                instructionSet,\n                renderer.renderPipes\n            );\n\n            maskContainer.includeInBuild = false;\n        }\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskEnd',\n            mask,\n            maskedContainer,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public pop(mask: Effect, _maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'popMaskEnd',\n            mask,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public execute(instruction: AlphaMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderMask = instruction.mask.renderMaskToTexture;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            const filterEffect = BigPool.get(AlphaMaskEffect);\n\n            if (renderMask)\n            {\n                instruction.mask.mask.measurable = true;\n\n                const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n\n                instruction.mask.mask.measurable = false;\n\n                bounds.ceil();\n\n                const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n                const filterTexture = TexturePool.getOptimalTexture(\n                    bounds.width,\n                    bounds.height,\n                    colorTextureSource._resolution,\n                    colorTextureSource.antialias\n                );\n\n                renderer.renderTarget.push(filterTexture, true);\n\n                renderer.globalUniforms.push({\n                    offset: bounds,\n                    worldColor: 0xFFFFFFFF\n                });\n\n                const sprite = filterEffect.sprite;\n\n                sprite.texture = filterTexture;\n\n                sprite.worldTransform.tx = bounds.minX;\n                sprite.worldTransform.ty = bounds.minY;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                    filterTexture,\n                });\n            }\n            else\n            {\n                filterEffect.sprite = instruction.mask.mask as Sprite;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                });\n            }\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n\n            if (renderMask)\n            {\n                // WebGPU blit's automatically, but WebGL does not!\n                if (renderer.type === RendererType.WEBGL)\n                {\n                    renderer.renderTarget.finishRenderPass();\n                }\n\n                renderer.renderTarget.pop();\n                renderer.globalUniforms.pop();\n            }\n\n            renderer.filter.push({\n                renderPipeId: 'filter',\n                action: 'pushFilter',\n                container: maskData.maskedContainer,\n                filterEffect: maskData.filterEffect,\n                canBundle: false,\n            });\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            renderer.filter.pop();\n\n            const maskData = this._activeMaskStage.pop();\n\n            if (renderMask)\n            {\n                TexturePool.returnTexture(maskData.filterTexture);\n            }\n\n            BigPool.return(maskData.filterEffect);\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._activeMaskStage = null;\n    }\n}\n","import { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix.mjs';\nimport { Filter } from '../Filter.mjs';\nimport fragment from './mask.frag.mjs';\nimport vertex from './mask.vert.mjs';\nimport source from './mask.wgsl.mjs';\n\n\"use strict\";\nclass MaskFilter extends Filter {\n  constructor(options) {\n    const { sprite, ...rest } = options;\n    const textureMatrix = new TextureMatrix(sprite.texture);\n    const filterUniforms = new UniformGroup({\n      uFilterMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uMaskClamp: { value: textureMatrix.uClampFrame, type: \"vec4<f32>\" },\n      uAlpha: { value: 1, type: \"f32\" }\n    });\n    const gpuProgram = GpuProgram.from({\n      vertex: {\n        source,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment,\n      name: \"mask-filter\"\n    });\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      resources: {\n        filterUniforms,\n        uMaskTexture: sprite.texture.source\n      }\n    });\n    this.sprite = sprite;\n    this._textureMatrix = textureMatrix;\n  }\n  apply(filterManager, input, output, clearMode) {\n    this._textureMatrix.texture = this.sprite.texture;\n    filterManager.calculateSpriteMatrix(\n      this.resources.filterUniforms.uniforms.uFilterMatrix,\n      this.sprite\n    ).prepend(this._textureMatrix.mapCoord);\n    this.resources.uMaskTexture = this.sprite.texture.source;\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n}\n\nexport { MaskFilter };\n//# sourceMappingURL=MaskFilter.mjs.map\n","import { Matrix } from '../../maths/matrix/Matrix';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix';\nimport { Filter } from '../Filter';\nimport fragment from './mask.frag';\nimport vertex from './mask.vert';\nimport source from './mask.wgsl';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { Sprite } from '../../scene/sprite/Sprite';\nimport type { FilterOptions } from '../Filter';\nimport type { FilterSystem } from '../FilterSystem';\n\nexport interface MaskFilterOptions extends FilterOptions\n{\n    sprite: Sprite,\n    scale?: number | { x: number, y: number },\n}\n\nexport class MaskFilter extends Filter\n{\n    public sprite: Sprite;\n    private readonly _textureMatrix: TextureMatrix;\n\n    constructor(options: MaskFilterOptions)\n    {\n        const { sprite, ...rest } = options;\n\n        const textureMatrix = new TextureMatrix(sprite.texture);\n\n        const filterUniforms = new UniformGroup({\n            uFilterMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uMaskClamp: { value: textureMatrix.uClampFrame, type: 'vec4<f32>' },\n            uAlpha: { value: 1, type: 'f32' },\n        });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'mask-filter',\n        });\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                filterUniforms,\n                uMaskTexture: sprite.texture.source,\n            },\n        });\n\n        this.sprite = sprite;\n\n        this._textureMatrix = textureMatrix;\n    }\n\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: Texture,\n        clearMode: boolean\n    ): void\n    {\n        // will trigger an update if the texture changed..\n        this._textureMatrix.texture = this.sprite.texture;\n\n        filterManager.calculateSpriteMatrix(\n            this.resources.filterUniforms.uniforms.uFilterMatrix as Matrix,\n            this.sprite\n        ).prepend(this._textureMatrix.mapCoord);\n\n        this.resources.uMaskTexture = this.sprite.texture.source;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n","import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader.mjs';\nimport { State } from '../rendering/renderers/shared/state/State.mjs';\n\n\"use strict\";\nconst _Filter = class _Filter extends Shader {\n  /**\n   * @param options - The optional parameters of this filter.\n   */\n  constructor(options) {\n    options = { ..._Filter.defaultOptions, ...options };\n    super(options);\n    /** If enabled is true the filter is applied, if false it will not. */\n    this.enabled = true;\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */\n    this._state = State.for2d();\n    this.blendMode = options.blendMode;\n    this.padding = options.padding;\n    if (typeof options.antialias === \"boolean\") {\n      this.antialias = options.antialias ? \"on\" : \"off\";\n    } else {\n      this.antialias = options.antialias;\n    }\n    this.resolution = options.resolution;\n    this.blendRequired = options.blendRequired;\n    this.addResource(\"uTexture\", 0, 1);\n  }\n  /**\n   * Applies the filter\n   * @param filterManager - The renderer to retrieve the filter from\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it\n   */\n  apply(filterManager, input, output, clearMode) {\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /**\n   * Get the blend mode of the filter.\n   * @default \"normal\"\n   */\n  get blendMode() {\n    return this._state.blendMode;\n  }\n  /** Sets the blend mode of the filter. */\n  set blendMode(value) {\n    this._state.blendMode = value;\n  }\n  /**\n   * A short hand function to create a filter based of a vertex and fragment shader src.\n   * @param options\n   * @returns A shiny new PixiJS filter!\n   */\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram.from(gl);\n    }\n    return new _Filter({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n};\n/**\n * The default filter settings\n * @static\n */\n_Filter.defaultOptions = {\n  blendMode: \"normal\",\n  resolution: 1,\n  padding: 0,\n  antialias: \"off\",\n  blendRequired: false\n};\nlet Filter = _Filter;\n\nexport { Filter };\n//# sourceMappingURL=Filter.mjs.map\n","import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader';\nimport { State } from '../rendering/renderers/shared/state/State';\n\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type {\n    IShaderWithResources,\n    ShaderFromResources,\n    ShaderWithResources\n} from '../rendering/renderers/shared/shader/Shader';\nimport type { BLEND_MODES } from '../rendering/renderers/shared/state/const';\nimport type { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport type { FilterSystem } from './FilterSystem';\n\n/**\n * Filters provide additional shading and post-processing effects to any display object and its children\n * they are attached to.\n *\n * You attached filters to a display object using its `filters` array property.\n *\n * ```js\n * import { Sprite, BlurFilter, HardMixBlend } from 'pixi.js';\n *\n * const sprite = Sprite.from('myTexture.png');\n *\n * // single filter\n * sprite.filters = new BlurFilter({ strength: 8 });\n *\n * // or multiple filters\n * sprite.filters = [new BlurFilter({ strength: 8 }), new HardMixBlend()];\n * ```\n *\n * Pixi has a number of built-in filters which can be used in your game or application:\n *\n * - {@link filters.AlphaFilter} - Applies alpha to the display object and any of its children.\n * - {@link filters.BlurFilter} - Applies a Gaussian blur to the display object.\n * - {@link filters.BlurFilterPass} - Applies a blur pass to an object.\n * - {@link filters.ColorBurnBlend} - Blend mode to add color burn to display objects.\n * - {@link filters.ColorDodgeBlend} - Blend mode to add color dodge to display objects.\n * - {@link filters.ColorMatrixFilter} - Transform the color channels by matrix multiplication.\n * - {@link filters.DarkenBlend} - Blend mode to darken display objects.\n * - {@link filters.DisplacementFilter} - Applies a displacement map to distort an object.\n * - {@link filters.DivideBlend} - Blend mode to divide display objects.\n * - {@link filters.HardMixBlend} - Blend mode to hard mix display objects.\n * - {@link filters.LinearBurnBlend} - Blend mode to add linear burn to display objects.\n * - {@link filters.LinearDodgeBlend} - Blend mode to add linear dodge to display objects.\n * - {@link filters.LinearLightBlend} - Blend mode to add linear light to display objects.\n * - {@link filters.NoiseFilter} - Applies random noise to an object.\n * - {@link filters.PinLightBlend} - Blend mode to add pin light to display objects.\n * - {@link filters.SubtractBlend} - Blend mode to subtract display objects.\n *\n * <br/>\n * For more available filters, check out the\n *  {@link https://pixijs.io/filters/docs/ pixi-filters} repository.\n *\n * You can also check out the awesome {@link https://pixijs.io/filters/examples/ Filter demo} to see\n * filters in action and combine them!\n * @namespace filters\n */\n\n/**\n * The options to use when creating a new filter.\n * @memberof filters\n */\nexport interface FilterOptions\n{\n    /** optional blend mode used by the filter when rendering (defaults to 'normal') */\n    blendMode?: BLEND_MODES;\n    /**\n     * the resolution the filter should be rendered at. The lower the resolution, the more performant\n     * the filter will be, but the lower the quality of the output. (default 1)\n     * If 'inherit', the resolution of the render target is used.\n     * Consider lowering this for things like blurs filters\n     */\n    resolution?: number | 'inherit';\n    /**\n     * the amount of pixels to pad the container with when applying the filter. For example a blur extends the\n     * container out as it blurs, so padding is applied to ensure that extra detail is rendered as well\n     * without clipping occurring. (default 0)\n     */\n    padding?: number;\n    /**\n     * If true the filter will make use of antialiasing. Although it looks better this can have a performance impact.\n     * If set to 'inherit', the filter will detect the antialiasing of the render target and change this automatically.\n     * Definitely don't set this to true if the render target has antialiasing set to false. As it will antialias,\n     * but you won't see the difference. (default 'off')\n     *\n     * This can be a boolean or [FilterAntialias]{@link filters.FilterAntialias} string.\n     */\n    antialias?: FilterAntialias | boolean;\n    /**\n     * If this is set to true, the filter system will grab a snap shot of the area being rendered\n     * to and pass this into the shader. This is useful for blend modes that need to be aware of the pixels\n     * they are rendering to. Only use if you need that data, otherwise its an extra gpu copy you don't need!\n     * (default false)\n     */\n    blendRequired?: boolean;\n}\n\n/** Filter options mixed with shader resources. A filter needs a shader and some resources to work. */\nexport type FilterWithShader = FilterOptions & IShaderWithResources;\n\n/**\n * The antialiasing mode of the filter. This can be either:\n * - `on` - the filter is always antialiased regardless of the render target settings\n * - `off` - (default) the filter is never antialiased regardless of the render target settings\n * - `inherit` - the filter uses the antialias settings of the render target\n * @memberof filters\n */\nexport type FilterAntialias = 'on' | 'off' | 'inherit';\n\n/**\n * The Filter class is the base for all filter effects used in Pixi.js\n * As it extends a shader, it requires that a glProgram is parsed in to work with WebGL and a gpuProgram for WebGPU.\n * If you don't proved one, then the filter is skipped and just rendered as if it wasn't there for that renderer.\n *\n * A filter can be applied to anything that extends Container in Pixi.js which also includes Sprites, Graphics etc.\n *\n * Its worth noting Performance-wise filters can be pretty expensive if used too much in a single scene.\n * The following happens under the hood when a filter is applied:\n *\n * .1. Break the current batch\n * <br>\n * .2. The target is measured using getGlobalBounds\n * (recursively go through all children and figure out how big the object is)\n * <br>\n * .3. Get the closest Po2 Textures from the texture pool\n * <br>\n * .4. Render the target to that texture\n * <br>\n * .5. Render that texture back to the main frame buffer as a quad using the filters program.\n * <br>\n * <br>\n * Some filters (such as blur) require multiple passes too which can result in an even bigger performance hit. So be careful!\n * Its not generally the complexity of the shader that is the bottle neck,\n * but all the framebuffer / shader switching that has to take place.\n * One filter applied to a container with many objects is MUCH faster than many filter applied to many objects.\n * @class\n * @memberof filters\n */\nexport class Filter extends Shader\n{\n    /**\n     * The default filter settings\n     * @static\n     */\n    public static readonly defaultOptions: FilterOptions = {\n        blendMode: 'normal',\n        resolution: 1,\n        padding: 0,\n        antialias: 'off',\n        blendRequired: false,\n    };\n\n    /**\n     * The padding of the filter. Some filters require extra space to breath such as a blur.\n     * Increasing this will add extra width and height to the bounds of the object that the\n     * filter is applied to.\n     * @default 0\n     */\n    public padding: number;\n\n    /**\n     * should the filter use antialiasing?\n     * @default inherit\n     */\n    public antialias: FilterAntialias;\n\n    /** If enabled is true the filter is applied, if false it will not. */\n    public enabled = true;\n\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */\n    public _state = State.for2d();\n\n    /**\n     * The resolution of the filter. Setting this to be lower will lower the quality but\n     * increase the performance of the filter.\n     * @default 1\n     */\n    public resolution: number | 'inherit';\n\n    /**\n     * Whether or not this filter requires the previous render texture for blending.\n     * @default false\n     */\n    public blendRequired: boolean;\n\n    /**\n     * @param options - The optional parameters of this filter.\n     */\n    constructor(options: FilterWithShader)\n    {\n        options = { ...Filter.defaultOptions, ...options };\n\n        super(options as ShaderWithResources);\n\n        this.blendMode = options.blendMode;\n        this.padding = options.padding;\n\n        // check if is boolean\n        if (typeof options.antialias === 'boolean')\n        {\n            this.antialias = options.antialias ? 'on' : 'off';\n        }\n        else\n        {\n            this.antialias = options.antialias;\n        }\n\n        this.resolution = options.resolution;\n        this.blendRequired = options.blendRequired;\n\n        this.addResource('uTexture', 0, 1);\n    }\n\n    /**\n     * Applies the filter\n     * @param filterManager - The renderer to retrieve the filter from\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * Get the blend mode of the filter.\n     * @default \"normal\"\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._state.blendMode;\n    }\n\n    /** Sets the blend mode of the filter. */\n    set blendMode(value: BLEND_MODES)\n    {\n        this._state.blendMode = value;\n    }\n\n    /**\n     * A short hand function to create a filter based of a vertex and fragment shader src.\n     * @param options\n     * @returns A shiny new PixiJS filter!\n     */\n    public static from(options: FilterOptions & ShaderFromResources): Filter\n    {\n        const { gpu, gl, ...rest } = options;\n\n        let gpuProgram: GpuProgram;\n        let glProgram: GlProgram;\n\n        if (gpu)\n        {\n            gpuProgram = GpuProgram.from(gpu);\n        }\n\n        if (gl)\n        {\n            glProgram = GlProgram.from(gl);\n        }\n\n        return new Filter({\n            gpuProgram,\n            glProgram,\n            ...rest\n        });\n    }\n}\n","var fragment = \"in vec2 vMaskCoord;\\nin vec2 vTextureCoord;\\n\\nuniform sampler2D uTexture;\\nuniform sampler2D uMaskTexture;\\n\\nuniform float uAlpha;\\nuniform vec4 uMaskClamp;\\n\\nout vec4 finalColor;\\n\\nvoid main(void)\\n{\\n    float clip = step(3.5,\\n        step(uMaskClamp.x, vMaskCoord.x) +\\n        step(uMaskClamp.y, vMaskCoord.y) +\\n        step(vMaskCoord.x, uMaskClamp.z) +\\n        step(vMaskCoord.y, uMaskClamp.w));\\n\\n    // TODO look into why this is needed\\n    float npmAlpha = uAlpha; \\n    vec4 original = texture(uTexture, vTextureCoord);\\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\\n\\n    original *= (alphaMul * masky.r * uAlpha * clip);\\n\\n    finalColor = original;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=mask.frag.mjs.map\n","var vertex = \"in vec2 aPosition;\\n\\nout vec2 vTextureCoord;\\nout vec2 vMaskCoord;\\n\\n\\nuniform vec4 uInputSize;\\nuniform vec4 uOutputFrame;\\nuniform vec4 uOutputTexture;\\nuniform mat3 uFilterMatrix;\\n\\nvec4 filterVertexPosition(  vec2 aPosition )\\n{\\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\\n       \\n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord(  vec2 aPosition )\\n{\\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\\n}\\n\\nvec2 getFilterCoord( vec2 aPosition )\\n{\\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}   \\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition(aPosition);\\n    vTextureCoord = filterTextureCoord(aPosition);\\n    vMaskCoord = getFilterCoord(aPosition);\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=mask.vert.mjs.map\n","var source = \"struct GlobalFilterUniforms {\\n  uInputSize:vec4<f32>,\\n  uInputPixel:vec4<f32>,\\n  uInputClamp:vec4<f32>,\\n  uOutputFrame:vec4<f32>,\\n  uGlobalFrame:vec4<f32>,\\n  uOutputTexture:vec4<f32>,  \\n};\\n\\nstruct MaskUniforms {\\n  uFilterMatrix:mat3x3<f32>,\\n  uMaskClamp:vec4<f32>,\\n  uAlpha:f32,\\n};\\n\\n\\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\\n@group(0) @binding(2) var uSampler : sampler;\\n\\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) filterUv : vec2<f32>,\\n  };\\n\\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\\n{\\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\\n\\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\\n}\\n\\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);  \\n}\\n\\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}\\n\\nfn getSize() -> vec2<f32>\\n{\\n\\n  \\n  return gfu.uGlobalFrame.zw;\\n}\\n  \\n@vertex\\nfn mainVertex(\\n  @location(0) aPosition : vec2<f32>, \\n) -> VSOutput {\\n  return VSOutput(\\n   filterVertexPosition(aPosition),\\n   filterTextureCoord(aPosition),\\n   getFilterCoord(aPosition)\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) filterUv: vec2<f32>,\\n  @builtin(position) position: vec4<f32>\\n) -> @location(0) vec4<f32> {\\n\\n    var maskClamp = filterUniforms.uMaskClamp;\\n\\n     var clip = step(3.5,\\n        step(maskClamp.x, filterUv.x) +\\n        step(maskClamp.y, filterUv.y) +\\n        step(filterUv.x, maskClamp.z) +\\n        step(filterUv.y, maskClamp.w));\\n\\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\\n    var source = textureSample(uTexture, uSampler, uv);\\n    \\n    var npmAlpha = 0.0;\\n\\n    var alphaMul = 1.0 - npmAlpha * (1.0 - mask.a);\\n\\n    var a = (alphaMul * mask.r) * clip;\\n\\n    return vec4(source.rgb, source.a) * a;\\n}\";\n\nexport { source as default };\n//# sourceMappingURL=mask.wgsl.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ColorMaskPipe {\n  constructor(renderer) {\n    this._colorStack = [];\n    this._colorStackIndex = 0;\n    this._currentColor = 0;\n    this._renderer = renderer;\n  }\n  buildStart() {\n    this._colorStack[0] = 15;\n    this._colorStackIndex = 1;\n    this._currentColor = 15;\n  }\n  push(mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & mask.mask;\n    const currentColor = this._colorStack[this._colorStackIndex];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n    this._colorStackIndex++;\n  }\n  pop(_mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    this._colorStackIndex--;\n    const currentColor = colorStack[this._colorStackIndex - 1];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    renderer.colorMask.setMask(instruction.colorMask);\n  }\n  destroy() {\n    this._colorStack = null;\n  }\n}\n/** @ignore */\nColorMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"colorMask\"\n};\n\nexport { ColorMaskPipe };\n//# sourceMappingURL=ColorMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { ColorMask } from './ColorMask';\n\nexport interface ColorMaskInstruction extends Instruction\n{\n    renderPipeId: 'colorMask',\n    colorMask: number,\n}\n\nexport class ColorMaskPipe implements InstructionPipe<ColorMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private _colorStack: number[] = [];\n    private _colorStackIndex = 0;\n    private _currentColor = 0;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public buildStart()\n    {\n        this._colorStack[0] = 0xF;\n        this._colorStackIndex = 1;\n        this._currentColor = 0xF;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & (mask as ColorMask).mask;\n\n        const currentColor = this._colorStack[this._colorStackIndex];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n\n        this._colorStackIndex++;\n    }\n\n    public pop(_mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        this._colorStackIndex--;\n\n        const currentColor = colorStack[this._colorStackIndex - 1];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n    }\n\n    public execute(instruction: ColorMaskInstruction)\n    {\n        const renderer = this._renderer;\n\n        renderer.colorMask.setMask(instruction.colorMask);\n    }\n\n    public destroy()\n    {\n        this._colorStack = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions.mjs';\nimport { CLEAR } from '../../renderers/gl/const.mjs';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const.mjs';\n\n\"use strict\";\nclass StencilMaskPipe {\n  constructor(renderer) {\n    // used when building and also when executing..\n    this._maskStackHash = {};\n    this._maskHash = /* @__PURE__ */ new WeakMap();\n    this._renderer = renderer;\n  }\n  push(mask, _container, instructionSet) {\n    var _a;\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      canBundle: false\n    });\n    const maskContainer = effect.mask;\n    maskContainer.includeInBuild = true;\n    if (!this._maskHash.has(effect)) {\n      this._maskHash.set(effect, {\n        instructionsStart: 0,\n        instructionsLength: 0\n      });\n    }\n    const maskData = this._maskHash.get(effect);\n    maskData.instructionsStart = instructionSet.instructionSize;\n    collectAllRenderables(\n      maskContainer,\n      instructionSet,\n      renderer.renderPipes\n    );\n    maskContainer.includeInBuild = false;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      canBundle: false\n    });\n    const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n    maskData.instructionsLength = instructionsLength;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n  }\n  pop(mask, _container, instructionSet) {\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskBegin\",\n      canBundle: false\n    });\n    const maskData = this._maskHash.get(mask);\n    for (let i = 0; i < maskData.instructionsLength; i++) {\n      instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n    }\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskEnd\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    var _a;\n    const renderer = this._renderer;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    let maskStackIndex = (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n    if (instruction.action === \"pushMaskBegin\") {\n      renderer.renderTarget.ensureDepthStencil();\n      renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n      maskStackIndex++;\n      renderer.colorMask.setMask(0);\n    } else if (instruction.action === \"pushMaskEnd\") {\n      renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      renderer.colorMask.setMask(15);\n    } else if (instruction.action === \"popMaskBegin\") {\n      renderer.colorMask.setMask(0);\n      if (maskStackIndex !== 0) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n      } else {\n        renderer.renderTarget.clear(null, CLEAR.STENCIL);\n        renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n      }\n      maskStackIndex--;\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      renderer.colorMask.setMask(15);\n    }\n    this._maskStackHash[renderTargetUid] = maskStackIndex;\n  }\n  destroy() {\n    this._renderer = null;\n    this._maskStackHash = null;\n    this._maskHash = null;\n  }\n}\nStencilMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"stencilMask\"\n};\n\nexport { StencilMaskPipe };\n//# sourceMappingURL=StencilMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions';\nimport { CLEAR } from '../../renderers/gl/const';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Renderer } from '../../renderers/types';\nimport type { StencilMask } from './StencilMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nexport interface StencilMaskInstruction extends Instruction\n{\n    renderPipeId: 'stencilMask',\n    action: MaskMode,\n    mask: StencilMask,\n}\n\nexport class StencilMaskPipe implements InstructionPipe<StencilMaskInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'stencilMask',\n    } as const;\n\n    private _renderer: Renderer;\n\n    // used when building and also when executing..\n    private _maskStackHash: Record<number, number> = {};\n\n    private _maskHash = new WeakMap<StencilMask, {\n        instructionsStart: number,\n        instructionsLength: number,\n    }>();\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskBegin',\n            mask,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const maskContainer = effect.mask;\n\n        maskContainer.includeInBuild = true;\n\n        if (!this._maskHash.has(effect))\n        {\n            this._maskHash.set(effect, {\n                instructionsStart: 0,\n                instructionsLength: 0,\n            });\n        }\n\n        const maskData = this._maskHash.get(effect);\n\n        maskData.instructionsStart = instructionSet.instructionSize;\n\n        collectAllRenderables(\n            maskContainer,\n            instructionSet,\n            renderer.renderPipes,\n        );\n\n        maskContainer.includeInBuild = false;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskEnd',\n            mask,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n\n        maskData.instructionsLength = instructionsLength;\n\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        this._maskStackHash[renderTargetUid] ??= 0;\n    }\n\n    public pop(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        // stencil is stored based on current render target..\n        renderer.renderPipes.batch.break(instructionSet);\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskBegin',\n            canBundle: false,\n        });\n\n        const maskData = this._maskHash.get(mask as StencilMask);\n\n        for (let i = 0; i < maskData.instructionsLength; i++)\n        {\n            // eslint-disable-next-line max-len\n            instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n        }\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskEnd',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: StencilMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        let maskStackIndex = this._maskStackHash[renderTargetUid] ??= 0;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            // we create the depth and stencil buffers JIT\n            // as no point allocating the memory if we don't use it\n            renderer.renderTarget.ensureDepthStencil();\n\n            renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n\n            maskStackIndex++;\n\n            renderer.colorMask.setMask(0);\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            renderer.colorMask.setMask(0xF);\n        }\n        else if (instruction.action === 'popMaskBegin')\n        {\n            renderer.colorMask.setMask(0);\n\n            if (maskStackIndex !== 0)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.renderTarget.clear(null, CLEAR.STENCIL);\n                renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n            }\n\n            maskStackIndex--;\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n\n            renderer.colorMask.setMask(0xF);\n        }\n\n        this._maskStackHash[renderTargetUid] = maskStackIndex;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n        this._maskStackHash = null;\n        this._maskHash = null;\n    }\n}\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _BackgroundSystem = class _BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color(0);\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */\n  init(options) {\n    options = { ..._BackgroundSystem.defaultOptions, ...options };\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.color = options.background || options.backgroundColor || this._backgroundColor;\n    this.alpha = options.backgroundAlpha;\n    this._backgroundColor.setAlpha(options.backgroundAlpha);\n  }\n  /** The background color to fill if not transparent */\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    this._backgroundColor.setValue(value);\n  }\n  /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  /** The background color as an [R, G, B, A] array. */\n  get colorRgba() {\n    return this._backgroundColor.toArray();\n  }\n  /**\n   * destroys the background system\n   * @internal\n   * @ignore\n   */\n  destroy() {\n  }\n};\n/** @ignore */\n_BackgroundSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"background\",\n  priority: 0\n};\n/** default options used by the system */\n_BackgroundSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */\n  backgroundAlpha: 1,\n  /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */\n  backgroundColor: 0,\n  /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */\n  clearBeforeRender: true\n};\nlet BackgroundSystem = _BackgroundSystem;\n\nexport { BackgroundSystem };\n//# sourceMappingURL=BackgroundSystem.mjs.map\n","import { Color } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { ColorSource, RgbaArray } from '../../../../color/Color';\nimport type { System } from '../system/System';\n\n/**\n * Options for the background system.\n * @property {ColorSource} [backgroundColor='black']\n * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n * @property {ColorSource} [background] - Alias for backgroundColor\n * @property {number} [backgroundAlpha=1] -\n * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n * @property {boolean} [clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n * @memberof rendering\n */\nexport interface BackgroundSystemOptions\n{\n    /**\n     * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n     * @memberof rendering.SharedRendererOptions\n     * @default 'black'\n     */\n    backgroundColor: ColorSource;\n    /**\n     * Alias for backgroundColor\n     * @memberof rendering.SharedRendererOptions\n     */\n    background?: ColorSource\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @memberof rendering.SharedRendererOptions\n     * @default 1\n     */\n    backgroundAlpha: number;\n    /**\n     * Whether to clear the canvas before new render passes.\n     * @memberof rendering.SharedRendererOptions\n     * @default true\n     */\n    clearBeforeRender: boolean;\n}\n\n/**\n * The background system manages the background color and alpha of the main view.\n * @memberof rendering\n */\nexport class BackgroundSystem implements System<BackgroundSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'background',\n        priority: 0,\n    } as const;\n\n    /** default options used by the system */\n    public static defaultOptions: BackgroundSystemOptions = {\n        /**\n         * {@link WebGLOptions.backgroundAlpha}\n         * @default 1\n         */\n        backgroundAlpha: 1,\n        /**\n         * {@link WebGLOptions.backgroundColor}\n         * @default 0x000000\n         */\n        backgroundColor: 0x0,\n        /**\n         * {@link WebGLOptions.clearBeforeRender}\n         * @default true\n         */\n        clearBeforeRender: true,\n    };\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     */\n    public clearBeforeRender: boolean;\n\n    private readonly _backgroundColor: Color;\n\n    constructor()\n    {\n        this.clearBeforeRender = true;\n\n        this._backgroundColor = new Color(0x000000);\n\n        this.color = this._backgroundColor; // run bg color setter\n        this.alpha = 1;\n    }\n\n    /**\n     * initiates the background system\n     * @param options - the options for the background colors\n     */\n    public init(options: BackgroundSystemOptions): void\n    {\n        options = { ...BackgroundSystem.defaultOptions, ...options };\n\n        this.clearBeforeRender = options.clearBeforeRender;\n        this.color = options.background || options.backgroundColor || this._backgroundColor; // run bg color setter\n        this.alpha = options.backgroundAlpha;\n\n        this._backgroundColor.setAlpha(options.backgroundAlpha);\n    }\n\n    /** The background color to fill if not transparent */\n    get color(): Color\n    {\n        return this._backgroundColor;\n    }\n\n    set color(value: ColorSource)\n    {\n        this._backgroundColor.setValue(value);\n    }\n\n    /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n    get alpha(): number\n    {\n        return this._backgroundColor.alpha;\n    }\n\n    set alpha(value: number)\n    {\n        this._backgroundColor.setAlpha(value);\n    }\n\n    /** The background color as an [R, G, B, A] array. */\n    get colorRgba(): RgbaArray\n    {\n        return this._backgroundColor.toArray() as RgbaArray;\n    }\n\n    /**\n     * destroys the background system\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        // No cleanup required\n    }\n}\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../../filters/FilterEffect.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst BLEND_MODE_FILTERS = {};\nextensions.handle(ExtensionType.BlendMode, (value) => {\n  if (!value.name) {\n    throw new Error(\"BlendMode extension must have a name property\");\n  }\n  BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value) => {\n  delete BLEND_MODE_FILTERS[value.name];\n});\nclass BlendModePipe {\n  constructor(renderer) {\n    this._isAdvanced = false;\n    this._filterHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  /**\n   * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n   * @param renderable - The renderable we are adding to the instruction set\n   * @param blendMode - The blend mode of the renderable\n   * @param instructionSet - The instruction set we are adding to\n   */\n  setBlendMode(renderable, blendMode, instructionSet) {\n    if (this._activeBlendMode === blendMode) {\n      if (this._isAdvanced)\n        this._renderableList.push(renderable);\n      return;\n    }\n    this._activeBlendMode = blendMode;\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n    this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n    if (this._isAdvanced) {\n      this._beginAdvancedBlendMode(instructionSet);\n      this._renderableList.push(renderable);\n    }\n  }\n  _beginAdvancedBlendMode(instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    const blendMode = this._activeBlendMode;\n    if (!BLEND_MODE_FILTERS[blendMode]) {\n      warn(`Unable to assign BlendMode: '${blendMode}'. You may want to include: import 'pixi.js/advanced-blend-modes'`);\n      return;\n    }\n    let filterEffect = this._filterHash[blendMode];\n    if (!filterEffect) {\n      filterEffect = this._filterHash[blendMode] = new FilterEffect();\n      filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode]()];\n    }\n    const instruction = {\n      renderPipeId: \"filter\",\n      action: \"pushFilter\",\n      renderables: [],\n      filterEffect,\n      canBundle: false\n    };\n    this._renderableList = instruction.renderables;\n    instructionSet.add(instruction);\n  }\n  _endAdvancedBlendMode(instructionSet) {\n    this._renderableList = null;\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   * @ignore\n   */\n  buildStart() {\n    this._isAdvanced = false;\n  }\n  /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   * @ignore\n   */\n  buildEnd(instructionSet) {\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n  }\n  /**\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    this._renderer = null;\n    this._renderableList = null;\n    for (const i in this._filterHash) {\n      this._filterHash[i].destroy();\n    }\n    this._filterHash = null;\n  }\n}\n/** @ignore */\nBlendModePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"blendMode\"\n};\n\nexport { BlendModePipe };\n//# sourceMappingURL=BlendModePipe.mjs.map\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions';\nimport { FilterEffect } from '../../../../filters/FilterEffect';\nimport { warn } from '../../../../utils/logging/warn';\n\nimport type { BlendModeFilter } from '../../../../filters/blend-modes/BlendModeFilter';\nimport type { FilterInstruction } from '../../../../filters/FilterSystem';\nimport type { Renderer } from '../../types';\nimport type { Instruction } from '../instructions/Instruction';\nimport type { InstructionSet } from '../instructions/InstructionSet';\nimport type { InstructionPipe } from '../instructions/RenderPipe';\nimport type { Renderable } from '../Renderable';\nimport type { BLEND_MODES } from '../state/const';\n\ninterface AdvancedBlendInstruction extends Instruction\n{\n    renderPipeId: 'blendMode',\n    blendMode: BLEND_MODES,\n    activeBlend: Renderable[],\n}\n\n// class map\nconst BLEND_MODE_FILTERS: Partial<Record<BLEND_MODES, new () => BlendModeFilter>> = {} as const;\n\nextensions.handle(ExtensionType.BlendMode, (value) =>\n{\n    if (!value.name)\n    {\n        throw new Error('BlendMode extension must have a name property');\n    }\n    BLEND_MODE_FILTERS[value.name as BLEND_MODES] = value.ref;\n}, (value) =>\n{\n    delete BLEND_MODE_FILTERS[value.name as BLEND_MODES];\n});\n\n/**\n * This Pipe handles the blend mode switching of the renderer.\n * It will insert instructions into the {@link renderers.InstructionSet} to switch the blend mode according to the\n * blend modes of the scene graph.\n *\n * This pipe is were wwe handle Advanced blend modes. Advanced blend modes essentially wrap the renderables\n * in a filter that applies the blend mode.\n *\n * You only need to use this class if you are building your own render instruction set rather than letting PixiJS build\n * the instruction set for you by traversing the scene graph\n * @memberof rendering\n */\nexport class BlendModePipe implements InstructionPipe<AdvancedBlendInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'blendMode',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _renderableList: Renderable[];\n    private _activeBlendMode: BLEND_MODES;\n\n    private _isAdvanced = false;\n\n    private _filterHash: Partial<Record<BLEND_MODES, FilterEffect>> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n     * @param renderable - The renderable we are adding to the instruction set\n     * @param blendMode - The blend mode of the renderable\n     * @param instructionSet - The instruction set we are adding to\n     */\n    public setBlendMode(renderable: Renderable, blendMode: BLEND_MODES, instructionSet: InstructionSet)\n    {\n        if (this._activeBlendMode === blendMode)\n        {\n            if (this._isAdvanced) this._renderableList.push(renderable);\n\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n\n        this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n\n        if (this._isAdvanced)\n        {\n            this._beginAdvancedBlendMode(instructionSet);\n\n            this._renderableList.push(renderable);\n        }\n    }\n\n    private _beginAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        const blendMode = this._activeBlendMode;\n\n        if (!BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS])\n        {\n            // #if _DEBUG\n            warn(`Unable to assign BlendMode: '${blendMode}'. `\n            + `You may want to include: import 'pixi.js/advanced-blend-modes'`);\n            // #endif\n\n            return;\n        }\n\n        let filterEffect = this._filterHash[blendMode];\n\n        // this does need an execute?\n        if (!filterEffect)\n        {\n            filterEffect = this._filterHash[blendMode] = new FilterEffect();\n\n            filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS]()];\n        }\n\n        const instruction: FilterInstruction = {\n            renderPipeId: 'filter',\n            action: 'pushFilter',\n            renderables: [],\n            filterEffect,\n            canBundle: false,\n        };\n\n        this._renderableList = instruction.renderables;\n        instructionSet.add(instruction);\n    }\n\n    private _endAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderableList = null;\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    /**\n     * called when the instruction build process is starting this will reset internally to the default blend mode\n     * @internal\n     * @ignore\n     */\n    public buildStart()\n    {\n        this._isAdvanced = false;\n    }\n\n    /**\n     * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n     * active, we add the final render instructions added to the instruction set\n     * @param instructionSet - The instruction set we are adding to\n     * @internal\n     * @ignore\n     */\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public destroy()\n    {\n        this._renderer = null;\n        this._renderableList = null;\n\n        for (const i in this._filterHash)\n        {\n            this._filterHash[i as BLEND_MODES].destroy();\n        }\n\n        this._filterHash = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst imageTypes = {\n  png: \"image/png\",\n  jpg: \"image/jpeg\",\n  webp: \"image/webp\"\n};\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options, defaults = {}) {\n    if (options instanceof Container || options instanceof Texture) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param options - The options for creating the image, or the target to extract\n   * @returns - HTML Image of the target\n   */\n  async image(options) {\n    const image = new Image();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   * `Extract.canvas` and then running toDataURL on that.\n   * @param options - The options for creating the image, or the target to extract\n   */\n  async base64(options) {\n    options = this._normalizeOptions(\n      options,\n      _ExtractSystem.defaultImageOptions\n    );\n    const { format, quality } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error(\"ICanvas.toBlob failed!\"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, imageTypes[format], quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(imageTypes[format], quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n  }\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy();\n    return canvas;\n  }\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container) {\n      texture.destroy();\n    }\n    return pixelInfo;\n  }\n  /**\n   * Will return a texture of the target\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns - A texture of the target\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture)\n      return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Will extract a HTMLImage of the target and download it\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   */\n  download(options) {\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement(\"a\");\n    link.download = options.filename ?? \"image.png\";\n    link.href = canvas.toDataURL(\"image/png\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n   * @param options - The options for logging the image, or the target to log\n   */\n  log(options) {\n    const width = options.width ?? 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n    const style = [\n      \"font-size: 1px;\",\n      `padding: ${width}px ${300}px;`,\n      `background: url(${base64}) no-repeat;`,\n      \"background-size: contain;\"\n    ].join(\" \");\n    console.log(\"%c \", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"extract\"\n};\n/** Default options for creating an image. */\n_ExtractSystem.defaultImageOptions = {\n  /** The format of the image. */\n  format: \"png\",\n  /** The quality of the image. */\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\n\nexport { ExtractSystem };\n//# sourceMappingURL=ExtractSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Container } from '../../../../scene/container/Container';\nimport { Texture } from '../texture/Texture';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { GetPixelsOutput } from '../texture/GenerateCanvas';\nimport type { GenerateTextureOptions } from './GenerateTextureSystem';\n\nconst imageTypes = {\n    png: 'image/png',\n    jpg: 'image/jpeg',\n    webp: 'image/webp',\n};\n\ntype Formats = keyof typeof imageTypes;\n\n/**\n * Options for creating an image from a renderer.\n * @memberof rendering\n */\nexport interface ImageOptions\n{\n    /** The format of the image. */\n    format?: Formats;\n    /** The quality of the image. */\n    quality?: number;\n}\n\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport interface BaseExtractOptions\n{\n    /** The target to extract. */\n    target: Container | Texture;\n    /** The region of the target to extract. */\n    frame?: Rectangle;\n    /** The resolution of the extracted content. */\n    resolution?: number;\n    /** The color used to clear the extracted content. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n}\n/**\n * Options for extracting an HTMLImage from the renderer.\n * @memberof rendering\n */\nexport type ExtractImageOptions = BaseExtractOptions & ImageOptions;\n/**\n * Options for extracting and downloading content from a renderer.\n * @memberof rendering\n */\nexport type ExtractDownloadOptions = BaseExtractOptions & {\n    /** The filename to use when downloading the content. */\n    filename: string;\n};\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport type ExtractOptions = BaseExtractOptions | ExtractImageOptions | ExtractDownloadOptions;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.extract` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (extract will be auto-added to renderer)\n * const app = new Application();\n * await app.init();\n *\n * // Draw a red circle\n * const graphics = new Graphics()\n *     .circle(0, 0, 50);\n *     .fill(0xFF0000)\n *\n * // Render the graphics as an HTMLImageElement\n * const image = await app.renderer.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof rendering\n */\nexport class ExtractSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'extract',\n    } as const;\n\n    /** Default options for creating an image. */\n    public static defaultImageOptions: ImageOptions = {\n        /** The format of the image. */\n        format: 'png' as Formats,\n        /** The quality of the image. */\n        quality: 1,\n    };\n\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    private _normalizeOptions<T extends ExtractOptions>(\n        options: ExtractImageOptions | Container | Texture,\n        defaults: Partial<T> = {},\n    ): T\n    {\n        if (options instanceof Container || options instanceof Texture)\n        {\n            return {\n                target: options,\n                ...defaults\n            } as T;\n        }\n\n        return {\n            ...defaults,\n            ...options,\n        } as T;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param options - The options for creating the image, or the target to extract\n     * @returns - HTML Image of the target\n     */\n    public async image(options: ExtractImageOptions | Container | Texture): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(options);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     * `Extract.canvas` and then running toDataURL on that.\n     * @param options - The options for creating the image, or the target to extract\n     */\n    public async base64(options: ExtractImageOptions | Container | Texture): Promise<string>\n    {\n        options = this._normalizeOptions<ExtractImageOptions>(\n            options,\n            ExtractSystem.defaultImageOptions\n        );\n\n        const { format, quality } = options;\n\n        const canvas = this.canvas(options);\n\n        if (canvas.toBlob !== undefined)\n        {\n            return new Promise<string>((resolve, reject) =>\n            {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                canvas.toBlob!((blob) =>\n                {\n                    if (!blob)\n                    {\n                        reject(new Error('ICanvas.toBlob failed!'));\n\n                        return;\n                    }\n\n                    const reader = new FileReader();\n\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                }, imageTypes[format], quality);\n            });\n        }\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(imageTypes[format], quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n\n            return new Promise<string>((resolve, reject) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, '\n            + 'or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param options - The options for creating the canvas, or the target to extract\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(options: ExtractOptions | Container | Texture): ICanvas\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n\n        if (target instanceof Texture)\n        {\n            return renderer.texture.generateCanvas(target);\n        }\n\n        const texture = renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const canvas = renderer.texture.generateCanvas(texture);\n\n        texture.destroy();\n\n        return canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param options - The options for extracting the image, or the target to extract\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(options: ExtractOptions | Container | Texture): GetPixelsOutput\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n        const texture = target instanceof Texture\n            ? target\n            : renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const pixelInfo = renderer.texture.getPixels(texture);\n\n        if (target instanceof Container)\n        {\n            // destroy generated texture\n            texture.destroy();\n        }\n\n        return pixelInfo;\n    }\n\n    /**\n     * Will return a texture of the target\n     * @param options - The options for creating the texture, or the target to extract\n     * @returns - A texture of the target\n     */\n    public texture(options: ExtractOptions | Container | Texture): Texture\n    {\n        options = this._normalizeOptions(options);\n\n        if (options.target instanceof Texture) return options.target;\n\n        return this._renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n    }\n\n    /**\n     * Will extract a HTMLImage of the target and download it\n     * @param options - The options for downloading and extracting the image, or the target to extract\n     */\n    public download(options: ExtractDownloadOptions | Container | Texture)\n    {\n        options = this._normalizeOptions<ExtractDownloadOptions>(options);\n\n        const canvas = this.canvas(options);\n\n        const link = document.createElement('a');\n\n        link.download = options.filename ?? 'image.png';\n        link.href = canvas.toDataURL('image/png');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    /**\n     * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n     * @param options - The options for logging the image, or the target to log\n     */\n    public log(options: (ExtractOptions & {width?: number}) | Container | Texture)\n    {\n        const width = options.width ?? 200;\n\n        options = this._normalizeOptions(options);\n\n        const canvas = this.canvas(options);\n\n        const base64 = canvas.toDataURL();\n\n        // eslint-disable-next-line no-console\n        console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n\n        const style = [\n            'font-size: 1px;',\n            `padding: ${width}px ${300}px;`,\n            `background: url(${base64}) no-repeat;`,\n            'background-size: contain;',\n        ].join(' ');\n\n        // eslint-disable-next-line no-console\n        console.log('%c ', style);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { RenderTexture } from '../texture/RenderTexture.mjs';\n\n\"use strict\";\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor = [0, 0, 0, 0];\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * A Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your container is complicated and needs to be reused multiple times.\n   * @param {GenerateTextureOptions | Container} options - Generate texture options.\n   * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n   * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n   * @param {number} [options.resolution] - The resolution of the texture being generated.\n   *        if no region is specified, defaults to the local bounds of the container.\n   * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n   * @returns a shiny new texture of the container passed in\n   */\n  generateTexture(options) {\n    if (options instanceof Container) {\n      options = {\n        target: options,\n        frame: void 0,\n        textureSourceOptions: {},\n        resolution: void 0\n      };\n    }\n    const resolution = options.resolution || this._renderer.resolution;\n    const antialias = options.antialias || this._renderer.view.antialias;\n    const container = options.target;\n    let clearColor = options.clearColor;\n    if (clearColor) {\n      const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n      clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n    } else {\n      clearColor = noColor;\n    }\n    const region = options.frame?.copyTo(tempRect) || getLocalBounds(container, tempBounds).rectangle;\n    region.width = Math.max(region.width, 1 / resolution) | 0;\n    region.height = Math.max(region.height, 1 / resolution) | 0;\n    const target = RenderTexture.create({\n      ...options.textureSourceOptions,\n      width: region.width,\n      height: region.height,\n      resolution,\n      antialias\n    });\n    const transform = Matrix.shared.translate(-region.x, -region.y);\n    this._renderer.render({\n      container,\n      transform,\n      target,\n      clearColor\n    });\n    target.source.updateMipmaps();\n    return target;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGenerateTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGenerator\"\n};\n\nexport { GenerateTextureSystem };\n//# sourceMappingURL=GenerateTextureSystem.mjs.map\n","import { Color, type ColorSource } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds';\nimport { Container } from '../../../../scene/container/Container';\nimport { RenderTexture } from '../texture/RenderTexture';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { TextureSourceOptions } from '../texture/sources/TextureSource';\nimport type { Texture } from '../texture/Texture';\n\nexport type GenerateTextureSourceOptions = Omit<TextureSourceOptions, 'resource' | 'width' | 'height' | 'resolution'>;\n\n/**\n * Options for generating a texture from a container.\n * @memberof rendering\n */\nexport type GenerateTextureOptions =\n{\n    /** The container to generate the texture from */\n    target: Container;\n    /**\n     * The region of the container, that shall be rendered,\n     * if no region is specified, defaults to the local bounds of the container.\n     */\n    frame?: Rectangle;\n    /** The resolution of the texture being generated. */\n    resolution?: number;\n    /** The color used to clear the texture. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n    /** The options passed to the texture source. */\n    textureSourceOptions?: GenerateTextureSourceOptions,\n};\n\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor: ColorSource = [0, 0, 0, 0];\n\n/**\n * System that manages the generation of textures from the renderer\n *\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.textureGenerator` property.\n * @memberof rendering\n */\nexport class GenerateTextureSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGenerator',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * A Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your container is complicated and needs to be reused multiple times.\n     * @param {GenerateTextureOptions | Container} options - Generate texture options.\n     * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n     * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n     * @param {number} [options.resolution] - The resolution of the texture being generated.\n     *        if no region is specified, defaults to the local bounds of the container.\n     * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n     * @returns a shiny new texture of the container passed in\n     */\n    public generateTexture(options: GenerateTextureOptions | Container): Texture\n    {\n        if (options instanceof Container)\n        {\n            options = {\n                target: options,\n                frame: undefined,\n                textureSourceOptions: {},\n                resolution: undefined,\n            };\n        }\n\n        const resolution = options.resolution || this._renderer.resolution;\n        const antialias = options.antialias || this._renderer.view.antialias;\n\n        const container = options.target;\n\n        let clearColor = options.clearColor;\n\n        if (clearColor)\n        {\n            const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n\n            clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n        }\n        else\n        {\n            clearColor = noColor;\n        }\n\n        const region = options.frame?.copyTo(tempRect)\n            || getLocalBounds(container, tempBounds).rectangle;\n\n        region.width = Math.max(region.width, 1 / resolution) | 0;\n        region.height = Math.max(region.height, 1 / resolution) | 0;\n\n        const target = RenderTexture.create({\n            ...options.textureSourceOptions,\n            width: region.width,\n            height: region.height,\n            resolution,\n            antialias,\n        });\n\n        const transform = Matrix.shared.translate(-region.x, -region.y);\n\n        this._renderer.render({\n            container,\n            transform,\n            target,\n            clearColor,\n        });\n\n        target.source.updateMipmaps();\n\n        return target;\n    }\n\n    public destroy(): void\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\n\n\"use strict\";\nclass RenderTexture extends Texture {\n  static create(options) {\n    return new Texture({\n      source: new TextureSource(options)\n    });\n  }\n  /**\n   * Resizes the render texture.\n   * @param width - The new width of the render texture.\n   * @param height - The new height of the render texture.\n   * @param resolution - The new resolution of the render texture.\n   * @returns This texture.\n   */\n  resize(width, height, resolution) {\n    this.source.resize(width, height, resolution);\n    return this;\n  }\n}\n\nexport { RenderTexture };\n//# sourceMappingURL=RenderTexture.mjs.map\n","import { TextureSource } from './sources/TextureSource';\nimport { Texture } from './Texture';\n\nimport type { TextureSourceOptions } from './sources/TextureSource';\n\n/**\n * A render texture, extends `Texture`.\n * @see {@link rendering.Texture}\n * @memberof rendering\n */\nexport class RenderTexture extends Texture\n{\n    public static create(options: TextureSourceOptions): Texture\n    {\n        return new Texture({\n            source: new TextureSource(options)\n        });\n    }\n\n    /**\n     * Resizes the render texture.\n     * @param width - The new width of the render texture.\n     * @param height - The new height of the render texture.\n     * @param resolution - The new resolution of the render texture.\n     * @returns This texture.\n     */\n    public resize(width: number, height: number, resolution?: number): this\n    {\n        this.source.resize(width, height, resolution);\n\n        return this;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../../maths/point/Point.mjs';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from '../shader/UniformGroup.mjs';\n\n\"use strict\";\nclass GlobalUniformSystem {\n  constructor(renderer) {\n    this._stackIndex = 0;\n    this._globalUniformDataStack = [];\n    this._uniformsPool = [];\n    this._activeUniforms = [];\n    this._bindGroupPool = [];\n    this._activeBindGroups = [];\n    this._renderer = renderer;\n  }\n  reset() {\n    this._stackIndex = 0;\n    for (let i = 0; i < this._activeUniforms.length; i++) {\n      this._uniformsPool.push(this._activeUniforms[i]);\n    }\n    for (let i = 0; i < this._activeBindGroups.length; i++) {\n      this._bindGroupPool.push(this._activeBindGroups[i]);\n    }\n    this._activeUniforms.length = 0;\n    this._activeBindGroups.length = 0;\n  }\n  start(options) {\n    this.reset();\n    this.push(options);\n  }\n  bind({\n    size,\n    projectionMatrix,\n    worldTransformMatrix,\n    worldColor,\n    offset\n  }) {\n    const renderTarget = this._renderer.renderTarget.renderTarget;\n    const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n      projectionData: renderTarget,\n      worldTransformMatrix: new Matrix(),\n      worldColor: 4294967295,\n      offset: new Point()\n    };\n    const globalUniformData = {\n      projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n      resolution: size || renderTarget.size,\n      worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n      worldColor: worldColor || currentGlobalUniformData.worldColor,\n      offset: offset || currentGlobalUniformData.offset,\n      bindGroup: null\n    };\n    const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n    this._activeUniforms.push(uniformGroup);\n    const uniforms = uniformGroup.uniforms;\n    uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n    uniforms.uResolution = globalUniformData.resolution;\n    uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n    uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n    uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n    color32BitToUniform(\n      globalUniformData.worldColor,\n      uniforms.uWorldColorAlpha,\n      0\n    );\n    uniformGroup.update();\n    let bindGroup;\n    if (this._renderer.renderPipes.uniformBatch) {\n      bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n    } else {\n      bindGroup = this._bindGroupPool.pop() || new BindGroup();\n      this._activeBindGroups.push(bindGroup);\n      bindGroup.setResource(uniformGroup, 0);\n    }\n    globalUniformData.bindGroup = bindGroup;\n    this._currentGlobalUniformData = globalUniformData;\n  }\n  push(options) {\n    this.bind(options);\n    this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n  }\n  pop() {\n    this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n    if (this._renderer.type === RendererType.WEBGL) {\n      this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n  }\n  get bindGroup() {\n    return this._currentGlobalUniformData.bindGroup;\n  }\n  get uniformGroup() {\n    return this._currentGlobalUniformData.bindGroup.resources[0];\n  }\n  _createUniforms() {\n    const globalUniforms = new UniformGroup({\n      uProjectionMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uWorldTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n      uWorldColorAlpha: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    }, {\n      isStatic: true\n    });\n    return globalUniforms;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlobalUniformSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"globalUniforms\"\n};\n\nexport { GlobalUniformSystem };\n//# sourceMappingURL=GlobalUniformSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Point } from '../../../../maths/point/Point';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\nimport { type Renderer, RendererType } from '../../types';\nimport { UniformGroup } from '../shader/UniformGroup';\n\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { GlRenderTargetSystem } from '../../gl/renderTarget/GlRenderTargetSystem';\nimport type { GpuRenderTargetSystem } from '../../gpu/renderTarget/GpuRenderTargetSystem';\nimport type { WebGPURenderer } from '../../gpu/WebGPURenderer';\nimport type { UboSystem } from '../shader/UboSystem';\nimport type { System } from '../system/System';\n\nexport type GlobalUniformGroup = UniformGroup<{\n    uProjectionMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldTransformMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldColorAlpha: { value: Float32Array; type: 'vec4<f32>' }\n    uResolution: { value: number[]; type: 'vec2<f32>' }\n}>;\n\nexport interface GlobalUniformOptions\n{\n    size?: number[],\n    projectionMatrix?: Matrix,\n    worldTransformMatrix?: Matrix\n    worldColor?: number\n    offset?: PointData\n}\n\nexport interface GlobalUniformData\n{\n    projectionMatrix: Matrix\n    worldTransformMatrix: Matrix\n    worldColor: number\n    resolution: number[]\n    offset: PointData\n    bindGroup: BindGroup\n}\n\nexport interface GlobalUniformRenderer\n{\n    renderTarget: GlRenderTargetSystem | GpuRenderTargetSystem\n    renderPipes: Renderer['renderPipes'];\n    ubo: UboSystem;\n    type: RendererType;\n}\n\n/**\n * System plugin to the renderer to manage global uniforms for the renderer.\n * @memberof rendering\n */\nexport class GlobalUniformSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'globalUniforms',\n    } as const;\n\n    private readonly _renderer: GlobalUniformRenderer;\n\n    private _stackIndex = 0;\n    private _globalUniformDataStack: GlobalUniformData[] = [];\n\n    private readonly _uniformsPool: GlobalUniformGroup[] = [];\n    private readonly _activeUniforms: GlobalUniformGroup[] = [];\n\n    private readonly _bindGroupPool: BindGroup[] = [];\n    private readonly _activeBindGroups: BindGroup[] = [];\n\n    private _currentGlobalUniformData: GlobalUniformData;\n\n    constructor(renderer: GlobalUniformRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public reset()\n    {\n        this._stackIndex = 0;\n\n        for (let i = 0; i < this._activeUniforms.length; i++)\n        {\n            this._uniformsPool.push(this._activeUniforms[i]);\n        }\n\n        for (let i = 0; i < this._activeBindGroups.length; i++)\n        {\n            this._bindGroupPool.push(this._activeBindGroups[i]);\n        }\n\n        this._activeUniforms.length = 0;\n        this._activeBindGroups.length = 0;\n    }\n\n    public start(options: GlobalUniformOptions): void\n    {\n        this.reset();\n\n        this.push(options);\n    }\n\n    public bind({\n        size,\n        projectionMatrix,\n        worldTransformMatrix,\n        worldColor,\n        offset,\n    }: GlobalUniformOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.renderTarget;\n\n        const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n            projectionData: renderTarget,\n            worldTransformMatrix: new Matrix(),\n            worldColor: 0xFFFFFFFF,\n            offset: new Point(),\n        };\n\n        const globalUniformData: GlobalUniformData = {\n            projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n            resolution: size || renderTarget.size,\n            worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n            worldColor: worldColor || currentGlobalUniformData.worldColor,\n            offset: offset || currentGlobalUniformData.offset,\n            bindGroup: null,\n        };\n\n        const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n\n        this._activeUniforms.push(uniformGroup);\n\n        const uniforms = uniformGroup.uniforms;\n\n        uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n\n        uniforms.uResolution = globalUniformData.resolution;\n\n        uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n\n        uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n        uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n\n        color32BitToUniform(\n            globalUniformData.worldColor,\n            uniforms.uWorldColorAlpha,\n            0\n        );\n\n        uniformGroup.update();\n\n        let bindGroup: BindGroup;\n\n        if ((this._renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            bindGroup = (this._renderer as WebGPURenderer).renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n        }\n        else\n        {\n            bindGroup = this._bindGroupPool.pop() || new BindGroup();\n            this._activeBindGroups.push(bindGroup);\n            bindGroup.setResource(uniformGroup, 0);\n        }\n\n        globalUniformData.bindGroup = bindGroup;\n\n        this._currentGlobalUniformData = globalUniformData;\n    }\n\n    public push(options: GlobalUniformOptions)\n    {\n        this.bind(options);\n\n        this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n    }\n\n    public pop()\n    {\n        this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n\n        // for webGL we need to update the uniform group here\n        // as we are not using bind groups\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            (this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup).update();\n        }\n    }\n\n    get bindGroup(): BindGroup\n    {\n        return this._currentGlobalUniformData.bindGroup;\n    }\n\n    get uniformGroup()\n    {\n        return this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup;\n    }\n\n    private _createUniforms(): GlobalUniformGroup\n    {\n        const globalUniforms = new UniformGroup({\n            uProjectionMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uWorldTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n            uWorldColorAlpha: { value: new Float32Array(4), type: 'vec4<f32>' },\n            uResolution: { value: [0, 0], type: 'vec2<f32>' },\n        }, {\n            isStatic: true,\n        });\n\n        return globalUniforms;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { sayHello } from '../../../../utils/sayHello.mjs';\nimport { RendererType } from '../../types.mjs';\n\n\"use strict\";\nclass HelloSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * It all starts here! This initiates every system, passing in the options for any system by name.\n   * @param options - the config for the renderer and all its systems\n   */\n  init(options) {\n    if (options.hello) {\n      let name = this._renderer.name;\n      if (this._renderer.type === RendererType.WEBGL) {\n        name += ` ${this._renderer.context.webGLVersion}`;\n      }\n      sayHello(name);\n    }\n  }\n}\n/** @ignore */\nHelloSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"hello\",\n  priority: -2\n};\n/** The default options for the system. */\nHelloSystem.defaultOptions = {\n  /** {@link WebGLOptions.hello} */\n  hello: false\n};\n\nexport { HelloSystem };\n//# sourceMappingURL=HelloSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { sayHello } from '../../../../utils/sayHello';\nimport { type Renderer, RendererType } from '../../types';\n\nimport type { WebGLRenderer } from '../../gl/WebGLRenderer';\nimport type { System } from '../system/System';\n\n/**\n * Options for the startup system.\n * @property {boolean} [hello=false] - Whether to log the version and type information of renderer to console.\n * @memberof rendering\n */\nexport interface HelloSystemOptions\n{\n    /**\n     * Whether to log the version and type information of renderer to console.\n     * @memberof rendering.SharedRendererOptions\n     * @default false\n     */\n    hello: boolean;\n}\n\n/**\n * A simple system responsible for initiating the renderer.\n * @memberof rendering\n */\nexport class HelloSystem implements System<HelloSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'hello',\n        priority: -2,\n    } as const;\n\n    /** The default options for the system. */\n    public static defaultOptions: HelloSystemOptions = {\n        /** {@link WebGLOptions.hello} */\n        hello: false,\n    };\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * It all starts here! This initiates every system, passing in the options for any system by name.\n     * @param options - the config for the renderer and all its systems\n     */\n    public init(options: HelloSystemOptions): void\n    {\n        if (options.hello)\n        {\n            let name = this._renderer.name;\n\n            if (this._renderer.type === RendererType.WEBGL)\n            {\n                name += ` ${(this._renderer as WebGLRenderer).context.webGLVersion}`;\n            }\n\n            sayHello(name);\n        }\n    }\n}\n","import { DOMAdapter } from '../environment/adapter.mjs';\n\n\"use strict\";\nlet saidHello = false;\nconst VERSION = \"8.2.5\";\nfunction sayHello(type) {\n  if (saidHello) {\n    return;\n  }\n  if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf(\"chrome\") > -1) {\n    const args = [\n      `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\n\n`,\n      \"background: #E72264; padding:5px 0;\",\n      \"background: #6CA2EA; padding:5px 0;\",\n      \"background: #B5D33D; padding:5px 0;\",\n      \"background: #FED23F; padding:5px 0;\",\n      \"color: #FFFFFF; background: #E72264; padding:5px 0;\",\n      \"color: #E72264; background: #FFFFFF; padding:5px 0;\"\n    ];\n    globalThis.console.log(...args);\n  } else if (globalThis.console) {\n    globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n  }\n  saidHello = true;\n}\n\nexport { VERSION, sayHello };\n//# sourceMappingURL=sayHello.mjs.map\n","import { DOMAdapter } from '../environment/adapter';\n\nlet saidHello = false;\n\nexport const VERSION = '$_VERSION';\n\n/**\n * Prints out the version and renderer information for this running instance of PixiJS.\n * @param type - The name of the renderer this instance is using.\n * @returns {void}\n */\nexport function sayHello(type: string): void\n{\n    if (saidHello)\n    {\n        return;\n    }\n\n    if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf('chrome') > -1)\n    {\n        const args = [\n            `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\\n\\n`,\n            'background: #E72264; padding:5px 0;',\n            'background: #6CA2EA; padding:5px 0;',\n            'background: #B5D33D; padding:5px 0;',\n            'background: #FED23F; padding:5px 0;',\n            'color: #FFFFFF; background: #E72264; padding:5px 0;',\n            'color: #E72264; background: #FFFFFF; padding:5px 0;',\n        ];\n\n        globalThis.console.log(...args);\n    }\n    else if (globalThis.console)\n    {\n        globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n    }\n\n    saidHello = true;\n}\n","import { ExtensionType, extensions } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = { ..._TextureGCSystem.defaultOptions, ...options };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active)\n      return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGC\"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCAMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\nextensions.add(TextureGCSystem);\n\nexport { TextureGCSystem };\n//# sourceMappingURL=TextureGCSystem.mjs.map\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\n\n/**\n * Options for the {@link TextureGCSystem}.\n * @memberof rendering\n * @property {boolean} [textureGCActive=true] - If set to true, this will enable the garbage collector on the GPU.\n * @property {number} [textureGCAMaxIdle=60 * 60] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [textureGCCheckCountMax=600] - Frames between two garbage collections.\n */\nexport interface TextureGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCActive: boolean;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCAMaxIdle: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCCheckCountMax: number;\n}\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof rendering\n */\nexport class TextureGCSystem implements System<TextureGCSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGC',\n    } as const;\n\n    /** default options for the TextureGCSystem */\n    public static defaultOptions: TextureGCSystemOptions = {\n        /**\n         * If set to true, this will enable the garbage collector on the GPU.\n         * @default true\n         */\n        textureGCActive: true,\n        /**\n         * The maximum idle frames before a texture is destroyed by garbage collection.\n         * @default 60 * 60\n         */\n        textureGCAMaxIdle: 60 * 60,\n        /**\n         * Frames between two garbage collections.\n         * @default 600\n         */\n        textureGCCheckCountMax: 600,\n    };\n\n    /**\n     * Frame count since started.\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Frame count since last garbage collection.\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle frames before a texture is destroyed by garbage collection.\n     * @see TextureGCSystem.defaultMaxIdle\n     */\n    public maxIdle: number;\n\n    /**\n     * Frames between two garbage collections.\n     * @see TextureGCSystem.defaultCheckCountMax\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode.\n     * @see TextureGCSystem.defaultMode\n     */\n    public active: boolean;\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n    }\n\n    public init(options: TextureGCSystemOptions): void\n    {\n        options = { ...TextureGCSystem.defaultOptions, ...options };\n\n        this.checkCountMax = options.textureGCCheckCountMax;\n        this.maxIdle = options.textureGCAMaxIdle;\n        this.active = options.textureGCActive;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    protected postrender(): void\n    {\n        if (!this._renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (!this.active) return;\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    public run(): void\n    {\n        const managedTextures = this._renderer.texture.managedTextures;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // Only supports non generated textures at the moment!\n            if (\n                texture.autoGarbageCollect\n                && texture.resource\n                && texture._touched > -1\n                && this.count - texture._touched > this.maxIdle\n            )\n            {\n                texture._touched = -1;\n                texture.unload();\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n\nextensions.add(TextureGCSystem);\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { RenderTarget } from '../renderTarget/RenderTarget.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\n\n\"use strict\";\nconst _ViewSystem = class _ViewSystem {\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      deprecation(v8_0_0, \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle(0, 0, options.width, options.height);\n    this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = getCanvasTexture(this.canvas, options);\n    this.renderTarget = new RenderTarget({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.multiView = !!options.multiView;\n    if (this.autoDensity) {\n      this.canvas.style.width = `${this.texture.width}px`;\n      this.canvas.style.height = `${this.texture.height}px`;\n    }\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n    if (this.autoDensity) {\n      this.canvas.style.width = `${desiredScreenWidth}px`;\n      this.canvas.style.height = `${desiredScreenHeight}px`;\n    }\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n   */\n  destroy(options = false) {\n    const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"view\",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\nexport { ViewSystem };\n//# sourceMappingURL=ViewSystem.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation';\nimport { RenderTarget } from '../renderTarget/RenderTarget';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { TypeOrBool } from '../../../../scene/container/destroyTypes';\nimport type { System } from '../system/System';\nimport type { CanvasSource, CanvasSourceOptions } from '../texture/sources/CanvasSource';\nimport type { Texture } from '../texture/Texture';\n\n/**\n * Options passed to the ViewSystem\n * @memberof rendering\n * @property {number} [width=800] - The width of the screen.\n * @property {number} [height=600] - The height of the screen.\n * @property {ICanvas} [canvas] - The canvas to use as a view, optional.\n * @property {boolean} [autoDensity=false] - Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n * @property {number} [resolution] - The resolution / device pixel ratio of the renderer.\n * @property {boolean} [antialias=false] - Whether to enable anti-aliasing. This may affect performance.\n * @property {boolean} [depth] -\n * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n * @property {boolean} [multiView] - TODO: multiView\n * @property {number} [backgroundAlpha] - The alpha of the background.\n */\nexport interface ViewSystemOptions\n{\n    /**\n     * The width of the screen.\n     * @default 800\n     * @memberof rendering.SharedRendererOptions\n     */\n    width?: number;\n    /**\n     * The height of the screen.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    height?: number;\n    /**\n     * The canvas to use as a view, optional.\n     * @memberof rendering.SharedRendererOptions\n     */\n    canvas?: ICanvas;\n    /** @deprecated */\n    view?: ICanvas;\n    /**\n     * Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n     * @memberof rendering.SharedRendererOptions\n     */\n    autoDensity?: boolean;\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    resolution?: number;\n    /**\n     * Whether to enable anti-aliasing. This may affect performance.\n     * @memberof rendering.SharedRendererOptions\n     */\n    antialias?: boolean;\n    /**\n     * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    depth?: boolean;\n    /**\n     * TODO: multiView\n     * @memberof rendering.SharedRendererOptions\n     */\n    multiView?: boolean;\n\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @default 1\n     */\n    backgroundAlpha?: number;\n}\n\nexport interface ViewSystemDestroyOptions\n{\n    /** Whether to remove the view element from the DOM. Defaults to `false`. */\n    removeView?: boolean;\n}\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class ViewSystem implements System<ViewSystemOptions, TypeOrBool<ViewSystemDestroyOptions>>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'view',\n        priority: 0,\n    } as const;\n\n    /** The default options for the view system. */\n    public static defaultOptions: ViewSystemOptions = {\n        /**\n         * {@link WebGLOptions.width}\n         * @default 800\n         */\n        width: 800,\n        /**\n         * {@link WebGLOptions.height}\n         * @default 600\n         */\n        height: 600,\n        /**\n         * {@link WebGLOptions.autoDensity}\n         * @default false\n         */\n        autoDensity: false,\n        /**\n         * {@link WebGLOptions.antialias}\n         * @default false\n         */\n        antialias: false,\n    };\n\n    public multiView: boolean;\n\n    /** The canvas element that everything is drawn to. */\n    public canvas!: ICanvas;\n\n    /** The texture that is used to draw the canvas to the screen. */\n    public texture: Texture;\n\n    /**\n     * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n     * @member {boolean}\n     */\n    public autoDensity: boolean;\n\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    public antialias: boolean;\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n     *\n     * Its safe to use as filterArea or hitArea for the whole stage.\n     */\n    public screen: Rectangle;\n    /** The render target that the view is drawn to. */\n    public renderTarget: RenderTarget;\n\n    /** The resolution / device pixel ratio of the renderer. */\n    get resolution(): number\n    {\n        return this.texture.source._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this.texture.source.resize(\n            this.texture.source.width,\n            this.texture.source.height,\n            value\n        );\n    }\n\n    /**\n     * initiates the view system\n     * @param options - the options for the view\n     */\n    public init(options: ViewSystemOptions): void\n    {\n        options = {\n            ...ViewSystem.defaultOptions,\n            ...options,\n        };\n\n        if (options.view)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'ViewSystem.view has been renamed to ViewSystem.canvas');\n            // #endif\n\n            options.canvas = options.view;\n        }\n\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n        this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n        this.antialias = !!options.antialias;\n        this.texture = getCanvasTexture(this.canvas, options as CanvasSourceOptions);\n        this.renderTarget = new RenderTarget({\n            colorTextures: [this.texture],\n            depth: !!options.depth,\n            isRoot: true,\n        });\n\n        (this.texture.source as CanvasSource).transparent = options.backgroundAlpha < 1;\n        this.multiView = !!options.multiView;\n\n        if (this.autoDensity)\n        {\n            this.canvas.style.width = `${this.texture.width}px`;\n            this.canvas.style.height = `${this.texture.height}px`;\n        }\n\n        this.resolution = options.resolution;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified dimensions.\n     * @param desiredScreenWidth - The new width of the screen.\n     * @param desiredScreenHeight - The new height of the screen.\n     * @param resolution\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number, resolution: number): void\n    {\n        this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n\n        this.screen.width = this.texture.frame.width;\n        this.screen.height = this.texture.frame.height;\n\n        if (this.autoDensity)\n        {\n            this.canvas.style.width = `${desiredScreenWidth}px`;\n            this.canvas.style.height = `${desiredScreenHeight}px`;\n        }\n    }\n\n    /**\n     * Destroys this System and optionally removes the canvas from the dom.\n     * @param {options | false} options - The options for destroying the view, or \"false\".\n     * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n     */\n    public destroy(options: TypeOrBool<ViewSystemDestroyOptions> = false): void\n    {\n        const removeView = typeof options === 'boolean' ? options : !!options?.removeView;\n\n        if (removeView && this.canvas.parentNode)\n        {\n            this.canvas.parentNode.removeChild(this.canvas);\n        }\n\n        // note: don't nullify the element\n        //       other systems may need to unbind from it during the destroy iteration (eg. GLContextSystem)\n    }\n}\n","import { uid } from '../../../../utils/data/uid.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    /** unique id for this render target */\n    this.uid = uid(\"renderTarget\");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    this._managedColorTextures = false;\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === \"number\") {\n      this._managedColorTextures = true;\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new TextureSource({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on(\"resize\", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof Texture || descriptor.depthStencilTexture instanceof TextureSource) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   * @ignore\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new TextureSource({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: \"depth24plus-stencil8\",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off(\"resize\", this.onSourceResize, this);\n    if (this._managedColorTextures) {\n      this.colorTextures.forEach((texture) => {\n        texture.destroy();\n      });\n    }\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\nexport { RenderTarget };\n//# sourceMappingURL=RenderTarget.mjs.map\n","// what we are building is a platform and a framework.\n// import { Matrix } from '../../shared/maths/Matrix';\nimport { uid } from '../../../../utils/data/uid';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\n\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * Options for creating a render target.\n * @memberof rendering\n */\nexport interface RenderTargetOptions\n{\n    /** the width of the RenderTarget */\n    width?: number;\n    /** the height of the RenderTarget */\n    height?: number;\n    /** the resolution of the RenderTarget */\n    resolution?: number;\n    /** an array of textures, or a number indicating how many color textures there should be */\n    colorTextures?: BindableTexture[] | number;\n    /** should this render target have a stencil buffer? */\n    stencil?: boolean;\n    /** should this render target have a depth buffer? */\n    depth?: boolean;\n    /** a depth stencil texture that the depth and stencil outputs will be written to */\n    depthStencilTexture?: BindableTexture | boolean;\n    /** should this render target be antialiased? */\n    antialias?: boolean;\n    /** is this a root element, true if this is gl context owners render target */\n    isRoot?: boolean;\n}\n\n/**\n * A class that describes what the renderers are rendering to.\n * This can be as simple as a Texture, or as complex as a multi-texture, multi-sampled render target.\n * Support for stencil and depth buffers is also included.\n *\n * If you need something more complex than a Texture to render to, you should use this class.\n * Under the hood, all textures you render to have a RenderTarget created on their behalf.\n * @memberof rendering\n */\nexport class RenderTarget\n{\n    /** The default options for a render target */\n    public static defaultOptions: RenderTargetOptions = {\n        /** the width of the RenderTarget */\n        width: 0,\n        /** the height of the RenderTarget */\n        height: 0,\n        /** the resolution of the RenderTarget */\n        resolution: 1,\n        /** an array of textures, or a number indicating how many color textures there should be */\n        colorTextures: 1,\n        /** should this render target have a stencil buffer? */\n        stencil: false,\n        /** should this render target have a depth buffer? */\n        depth: false,\n        /** should this render target be antialiased? */\n        antialias: false, // save on perf by default!\n        /** is this a root element, true if this is gl context owners render target */\n        isRoot: false\n    };\n\n    /** unique id for this render target */\n    public readonly uid: number = uid('renderTarget');\n\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    public colorTextures: TextureSource[] = [];\n    /** the stencil and depth buffer will right to this texture in WebGPU */\n    public depthStencilTexture: TextureSource;\n    /** if true, will ensure a stencil buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public stencil: boolean;\n    /** if true, will ensure a depth buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public depth: boolean;\n\n    public dirtyId = 0;\n    public isRoot = false;\n\n    private readonly _size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    private readonly _managedColorTextures: boolean = false;\n\n    /**\n     * @param [descriptor] - Options for creating a render target.\n     */\n    constructor(descriptor: RenderTargetOptions = {})\n    {\n        descriptor = { ...RenderTarget.defaultOptions, ...descriptor };\n\n        this.stencil = descriptor.stencil;\n        this.depth = descriptor.depth;\n        this.isRoot = descriptor.isRoot;\n\n        if (typeof descriptor.colorTextures === 'number')\n        {\n            this._managedColorTextures = true;\n\n            for (let i = 0; i < descriptor.colorTextures; i++)\n            {\n                this.colorTextures.push(new TextureSource({\n                    width: descriptor.width,\n                    height: descriptor.height,\n                    resolution: descriptor.resolution,\n                    antialias: descriptor.antialias,\n                })\n                );\n            }\n        }\n        else\n        {\n            this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n\n            const colorSource = this.colorTexture.source;\n\n            this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n        }\n\n        // the first color texture drives the size of all others..\n        this.colorTexture.source.on('resize', this.onSourceResize, this);\n\n        // TODO should listen for texture destroyed?\n\n        if (descriptor.depthStencilTexture || this.stencil)\n        {\n            // TODO add a test\n            if (descriptor.depthStencilTexture instanceof Texture\n                || descriptor.depthStencilTexture instanceof TextureSource)\n            {\n                this.depthStencilTexture = descriptor.depthStencilTexture.source;\n            }\n            else\n            {\n                this.ensureDepthStencilTexture();\n            }\n        }\n    }\n\n    get size(): [number, number]\n    {\n        const _size = this._size;\n\n        _size[0] = this.pixelWidth;\n        _size[1] = this.pixelHeight;\n\n        return _size as any as [number, number];\n    }\n\n    get width(): number\n    {\n        return this.colorTexture.source.width;\n    }\n\n    get height(): number\n    {\n        return this.colorTexture.source.height;\n    }\n    get pixelWidth(): number\n    {\n        return this.colorTexture.source.pixelWidth;\n    }\n\n    get pixelHeight(): number\n    {\n        return this.colorTexture.source.pixelHeight;\n    }\n\n    get resolution(): number\n    {\n        return this.colorTexture.source._resolution;\n    }\n\n    get colorTexture(): TextureSource\n    {\n        return this.colorTextures[0];\n    }\n\n    protected onSourceResize(source: TextureSource)\n    {\n        this.resize(source.width, source.height, source._resolution, true);\n    }\n\n    /**\n     * This will ensure a depthStencil texture is created for this render target.\n     * Most likely called by the mask system to make sure we have stencil buffer added.\n     * @internal\n     * @ignore\n     */\n    public ensureDepthStencilTexture()\n    {\n        if (!this.depthStencilTexture)\n        {\n            this.depthStencilTexture = new TextureSource({\n                width: this.width,\n                height: this.height,\n                resolution: this.resolution,\n                format: 'depth24plus-stencil8',\n                autoGenerateMipmaps: false,\n                antialias: false,\n                mipLevelCount: 1,\n                // sampleCount: handled by the render target system..\n            });\n        }\n    }\n\n    public resize(width: number, height: number, resolution = this.resolution, skipColorTexture = false)\n    {\n        this.dirtyId++;\n\n        this.colorTextures.forEach((colorTexture, i) =>\n        {\n            if (skipColorTexture && i === 0) return;\n\n            colorTexture.source.resize(width, height, resolution);\n        });\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.source.resize(width, height, resolution);\n        }\n    }\n\n    public destroy()\n    {\n        this.colorTexture.source.off('resize', this.onSourceResize, this);\n\n        if (this._managedColorTextures)\n        {\n            this.colorTextures.forEach((texture) =>\n            {\n                texture.destroy();\n            });\n        }\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.destroy();\n            delete this.depthStencilTexture;\n        }\n    }\n}\n","import { CanvasSource } from '../sources/CanvasSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst canvasCache = /* @__PURE__ */ new Map();\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new Texture({\n      source: new CanvasSource({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once(\"destroy\", onDestroy);\n    texture.source.once(\"destroy\", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\nexport { getCanvasTexture, hasCachedCanvasTexture };\n//# sourceMappingURL=getCanvasTexture.mjs.map\n","import { CanvasSource } from '../sources/CanvasSource';\nimport { Texture } from '../Texture';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { CanvasSourceOptions } from '../sources/CanvasSource';\n\nconst canvasCache: Map<ICanvas, Texture> = new Map();\n\nexport function getCanvasTexture(canvas: ICanvas, options?: CanvasSourceOptions): Texture\n{\n    if (!canvasCache.has(canvas))\n    {\n        const texture = new Texture({\n            source: new CanvasSource({\n                resource: canvas,\n                ...options,\n            })\n        });\n\n        const onDestroy = () =>\n        {\n            if (canvasCache.get(canvas) === texture)\n            {\n                canvasCache.delete(canvas);\n            }\n        };\n\n        texture.once('destroy', onDestroy);\n        texture.source.once('destroy', onDestroy);\n\n        canvasCache.set(canvas, texture);\n    }\n\n    return canvasCache.get(canvas);\n}\n\nexport function hasCachedCanvasTexture(canvas: ICanvas): boolean\n{\n    return canvasCache.has(canvas);\n}\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { BufferUsage } from '../buffer/const.mjs';\n\n\"use strict\";\nclass UboSystem {\n  constructor(adaptor) {\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    this._syncFunctionHash = /* @__PURE__ */ Object.create(null);\n    this._adaptor = adaptor;\n    this._systemCheck();\n  }\n  /**\n   * Overridable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   */\n  _systemCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n  ensureUniformGroup(uniformGroup) {\n    const uniformData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n  }\n  getUniformGroupData(uniformGroup) {\n    return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n  }\n  _initUniformGroup(uniformGroup) {\n    const uniformGroupSignature = uniformGroup._signature;\n    let uniformData = this._syncFunctionHash[uniformGroupSignature];\n    if (!uniformData) {\n      const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n      const layout = this._adaptor.createUboElements(elements);\n      const syncFunction = this._generateUboSync(layout.uboElements);\n      uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n        layout,\n        syncFunction\n      };\n    }\n    return this._syncFunctionHash[uniformGroupSignature];\n  }\n  _generateUboSync(uboElements) {\n    return this._adaptor.generateUboSync(uboElements);\n  }\n  syncUniformGroup(uniformGroup, data, offset) {\n    const uniformGroupData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformGroupData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n    data || (data = uniformGroup.buffer.data);\n    offset || (offset = 0);\n    uniformGroupData.syncFunction(uniformGroup.uniforms, data, offset);\n    return true;\n  }\n  updateUniformGroup(uniformGroup) {\n    if (uniformGroup.isStatic && !uniformGroup._dirtyId)\n      return false;\n    uniformGroup._dirtyId = 0;\n    const synced = this.syncUniformGroup(uniformGroup);\n    uniformGroup.buffer.update();\n    return synced;\n  }\n  destroy() {\n    this._syncFunctionHash = null;\n  }\n}\n\nexport { UboSystem };\n//# sourceMappingURL=UboSystem.mjs.map\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported';\nimport { Buffer } from '../buffer/Buffer';\nimport { BufferUsage } from '../buffer/const';\n\nimport type { System } from '../system/System';\nimport type { UboElement, UboLayout, UniformData, UniformsSyncCallback } from './types';\nimport type { UniformGroup } from './UniformGroup';\n\nexport interface UboAdaptor\n{\n    createUboElements: (uniformData: UniformData[]) => UboLayout;\n    generateUboSync: (uboElements: UboElement[]) => UniformsSyncCallback;\n}\n\n/**\n * System plugin to the renderer to manage uniform buffers.\n * @memberof rendering\n */\nexport class UboSystem implements System\n{\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    private _syncFunctionHash: Record<string, {\n        layout: UboLayout,\n        syncFunction: (uniforms: Record<string, any>, data: Float32Array, offset: number) => void\n    }> = Object.create(null);\n\n    private readonly _adaptor: UboAdaptor;\n\n    constructor(adaptor: UboAdaptor)\n    {\n        this._adaptor = adaptor;\n\n        // Validation check that this environment support `new Function`\n        this._systemCheck();\n    }\n\n    /**\n     * Overridable function by `pixi.js/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     */\n    private _systemCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                 + 'please use pixi.js/unsafe-eval module to enable support.');\n        }\n    }\n\n    public ensureUniformGroup(uniformGroup: UniformGroup): void\n    {\n        const uniformData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n    }\n\n    public getUniformGroupData(uniformGroup: UniformGroup)\n    {\n        return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n    }\n\n    private _initUniformGroup(uniformGroup: UniformGroup)\n    {\n        const uniformGroupSignature = uniformGroup._signature;\n\n        let uniformData = this._syncFunctionHash[uniformGroupSignature];\n\n        if (!uniformData)\n        {\n            const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n\n            const layout = this._adaptor.createUboElements(elements);\n\n            const syncFunction = this._generateUboSync(layout.uboElements);\n\n            uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n                layout,\n                syncFunction\n            };\n        }\n\n        return this._syncFunctionHash[uniformGroupSignature];\n    }\n\n    private _generateUboSync(\n        uboElements: UboElement[],\n    ): UniformsSyncCallback\n    {\n        return this._adaptor.generateUboSync(uboElements);\n    }\n\n    public syncUniformGroup(uniformGroup: UniformGroup, data?: Float32Array, offset?: number): boolean\n    {\n        const uniformGroupData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformGroupData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n\n        data ||= (uniformGroup.buffer.data as Float32Array);\n        offset ||= 0;\n\n        uniformGroupData.syncFunction(uniformGroup.uniforms, data, offset);\n\n        return true;\n    }\n\n    public updateUniformGroup(uniformGroup: UniformGroup): boolean\n    {\n        if (uniformGroup.isStatic && !uniformGroup._dirtyId) return false;\n        uniformGroup._dirtyId = 0;\n\n        const synced = this.syncUniformGroup(uniformGroup);\n\n        uniformGroup.buffer.update();\n\n        return synced;\n    }\n\n    public destroy(): void\n    {\n        this._syncFunctionHash = null;\n    }\n}\n","import { uniformParsers } from './uniformParsers.mjs';\n\n\"use strict\";\nfunction createUboSyncFunction(uboElements, parserCode, arrayGenerationFunction, singleSettersMap) {\n  const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n  let prev = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    const name = uboElement.data.name;\n    let parsed = false;\n    let offset = 0;\n    for (let j = 0; j < uniformParsers.length; j++) {\n      const uniformParser = uniformParsers[j];\n      if (uniformParser.test(uboElement.data)) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          `name = \"${name}\";`,\n          `offset += ${offset - prev};`,\n          uniformParsers[j][parserCode] || uniformParsers[j].ubo\n        );\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      if (uboElement.data.size > 1) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n      } else {\n        const template = singleSettersMap[uboElement.data.type];\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          /* wgsl */\n          `\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `\n        );\n      }\n    }\n    prev = offset;\n  }\n  const fragmentSrc = funcFragments.join(\"\\n\");\n  return new Function(\n    \"uv\",\n    \"data\",\n    \"offset\",\n    fragmentSrc\n  );\n}\n\nexport { createUboSyncFunction };\n//# sourceMappingURL=createUboSyncFunction.mjs.map\n","/* eslint-disable quote-props */\nimport { uniformParsers } from './uniformParsers';\n\nimport type { UboElement, UNIFORM_TYPES_SINGLE, UniformsSyncCallback } from '../types';\n\nexport function createUboSyncFunction(\n    uboElements: UboElement[],\n    parserCode: 'uboWgsl' | 'uboStd40',\n    arrayGenerationFunction: (uboElement: UboElement, offsetToAdd: number) => string,\n    singleSettersMap: Record<UNIFORM_TYPES_SINGLE, string>,\n): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n\n    let prev = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        const name = uboElement.data.name;\n\n        let parsed = false;\n        let offset = 0;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const uniformParser = uniformParsers[j];\n\n            if (uniformParser.test(uboElement.data))\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(\n                    `name = \"${name}\";`,\n                    `offset += ${offset - prev};`,\n                    uniformParsers[j][parserCode] || uniformParsers[j].ubo);\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            if (uboElement.data.size > 1)\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n            }\n            else\n            {\n                const template = singleSettersMap[uboElement.data.type as UNIFORM_TYPES_SINGLE];\n\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(/* wgsl */`\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `);\n            }\n        }\n\n        prev = offset;\n    }\n\n    const fragmentSrc = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function(\n        'uv',\n        'data',\n        'offset',\n        fragmentSrc,\n    ) as UniformsSyncCallback;\n}\n","\"use strict\";\nconst uniformParsers = [\n  // uploading pixi matrix object to mat3\n  {\n    type: \"mat3x3<f32>\",\n    test: (data) => {\n      const value = data.value;\n      return value.a !== void 0;\n    },\n    ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n    uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n  },\n  // uploading a pixi rectangle as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.width !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n  },\n  // uploading a pixi point as a vec2\n  {\n    type: \"vec2<f32>\",\n    test: (data) => data.type === \"vec2<f32>\" && data.size === 1 && data.value.x !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n  },\n  // uploading a pixi color as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n  },\n  // uploading a pixi color as a vec3\n  {\n    type: \"vec3<f32>\",\n    test: (data) => data.type === \"vec3<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n  }\n];\n\nexport { uniformParsers };\n//# sourceMappingURL=uniformParsers.mjs.map\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// Parsers, each one of these will take a look at the type of shader property and uniform.\n// if they pass the test function then the code function is called that returns a the shader upload code for that uniform.\n// Shader upload code is automagically generated with these parsers.\n// If no parser is valid then the default upload functions are used.\n// exposing Parsers means that custom upload logic can be added to pixi's shaders.\n// A good example would be a pixi rectangle can be directly set on a uniform.\n// If the shader sees it it knows how to upload the rectangle structure as a vec4\n// format is as follows:\n//\n// {\n//     test: (data, uniform) => {} <--- test is this code should be used for this uniform\n//     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform\n//     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the\n//                                         uniform to a uniform buffer\n// }\n// import { Texture } from '../../texture/Texture';\n\nimport type { Color } from '../../../../../color/Color';\nimport type { Matrix } from '../../../../../maths/matrix/Matrix';\nimport type { PointLike } from '../../../../../maths/point/PointLike';\nimport type { Rectangle } from '../../../../../maths/shapes/Rectangle';\nimport type { UNIFORM_TYPES, UniformData } from '../types';\n\nexport interface UniformParserDefinition\n{\n    type: UNIFORM_TYPES;\n    test(data: UniformData): boolean;\n    ubo?: string;\n    uboWgsl?: string;\n    uboStd40?: string;\n    uniform?: string;\n}\n\nexport const uniformParsers: UniformParserDefinition[] = [\n    // uploading pixi matrix object to mat3\n    {\n        type: 'mat3x3<f32>',\n        test: (data: UniformData): boolean =>\n        {\n            const value = data.value as Matrix;\n\n            return value.a !== undefined;\n        },\n        ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n        uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n    },\n    // uploading a pixi rectangle as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Rectangle).width !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n    },\n    // uploading a pixi point as a vec2\n    {\n        type: 'vec2<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec2<f32>' && data.size === 1 && (data.value as PointLike).x !== undefined,\n        ubo:  `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n    },\n    // uploading a pixi color as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n    },\n    // uploading a pixi color as a vec3\n    {\n        type: 'vec3<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec3<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n    },\n];\n","\"use strict\";\nfunction loopMatrix(col, row) {\n  const total = col * row;\n  return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\nconst uboSyncFunctionsSTD40 = {\n  f32: `\n        data[offset] = v;`,\n  i32: `\n        data[offset] = v;`,\n  \"vec2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n  \"vec3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n  \"vec4<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n  \"mat3x3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n  \"mat4x4<f32>\": `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n  \"mat3x2<f32>\": loopMatrix(3, 2),\n  \"mat4x2<f32>\": loopMatrix(4, 2),\n  \"mat2x3<f32>\": loopMatrix(2, 3),\n  \"mat4x3<f32>\": loopMatrix(4, 3),\n  \"mat2x4<f32>\": loopMatrix(2, 4),\n  \"mat3x4<f32>\": loopMatrix(3, 4)\n};\nconst uboSyncFunctionsWGSL = {\n  ...uboSyncFunctionsSTD40,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `\n};\n\nexport { uboSyncFunctionsSTD40, uboSyncFunctionsWGSL };\n//# sourceMappingURL=uboSyncFunctions.mjs.map\n","import type { UNIFORM_TYPES_SINGLE } from '../types';\n\nfunction loopMatrix(col: number, row: number)\n{\n    const total = col * row;\n\n    return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\n\nexport const uboSyncFunctionsSTD40: Record<UNIFORM_TYPES_SINGLE, string> = {\n    f32: `\n        data[offset] = v;`,\n    i32: `\n        data[offset] = v;`,\n    'vec2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n    'vec3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n    'vec4<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n    'mat3x3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n    'mat4x4<f32>': `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n    'mat3x2<f32>': loopMatrix(3, 2),\n    'mat4x2<f32>': loopMatrix(4, 2),\n    'mat2x3<f32>': loopMatrix(2, 3),\n    'mat4x3<f32>': loopMatrix(4, 3),\n    'mat2x4<f32>': loopMatrix(2, 4),\n    'mat3x4<f32>': loopMatrix(3, 4),\n};\n\nexport const uboSyncFunctionsWGSL: Record<UNIFORM_TYPES_SINGLE, string> = {\n    ...uboSyncFunctionsSTD40,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `,\n};\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nclass BufferResource extends EventEmitter {\n  /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */\n  constructor({ buffer, offset, size }) {\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    this._resourceType = \"bufferResource\";\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    this._touched = 0;\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    this._bufferResource = true;\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    this.buffer = buffer;\n    this.offset = offset | 0;\n    this.size = size;\n    this.buffer.on(\"change\", this.onBufferChange, this);\n  }\n  onBufferChange() {\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n  }\n  /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */\n  destroy(destroyBuffer = false) {\n    this.destroyed = true;\n    if (destroyBuffer) {\n      this.buffer.destroy();\n    }\n    this.emit(\"change\", this);\n    this.buffer = null;\n  }\n}\n\nexport { BufferResource };\n//# sourceMappingURL=BufferResource.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { Buffer } from './Buffer';\n\n/**\n * A resource that can be bound to a bind group and used in a shader.\n * Whilst a buffer can be used as a resource, this class allows you to specify an offset and size of the buffer to use.\n * This is useful if you have a large buffer and only part of it is used in a shader.\n *\n * This resource, will listen for changes on the underlying buffer and emit a itself if the buffer changes shape.\n * @example\n *\n * const buffer = new Buffer({\n *     data: new Float32Array(1000),\n *    usage: BufferUsage.UNIFORM,\n * });\n * // Create a buffer resource that uses the first 100 bytes of a buffer\n * const bufferResource = new BufferResource({\n *    buffer,\n *    offset: 0,\n *    size: 100,\n * });\n * @memberof rendering\n */\nexport class BufferResource extends EventEmitter<{\n    change: BindResource,\n}> implements BindResource\n{\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n\n    /** a unique id for this uniform group used through the renderer */\n    public readonly uid: number = uid('buffer');\n\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    public readonly _resourceType = 'bufferResource';\n\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    public _touched = 0;\n\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    public _resourceId = uid('resource');\n\n    /** the underlying buffer that this resource is using */\n    public buffer: Buffer;\n    /** the offset of the buffer this resource is using. If not provided, then it will use the offset of the buffer. */\n    public readonly offset: number;\n    /** the size of the buffer this resource is using. If not provided, then it will use the size of the buffer. */\n    public readonly size: number;\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    public readonly _bufferResource = true;\n\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    public destroyed = false;\n\n    /**\n     * Create a new Buffer Resource.\n     * @param options - The options for the buffer resource\n     * @param options.buffer - The underlying buffer that this resource is using\n     * @param options.offset - The offset of the buffer this resource is using.\n     * If not provided, then it will use the offset of the buffer.\n     * @param options.size - The size of the buffer this resource is using.\n     * If not provided, then it will use the size of the buffer.\n     */\n    constructor({ buffer, offset, size }: { buffer: Buffer; offset?: number; size?: number; })\n    {\n        super();\n\n        this.buffer = buffer;\n        this.offset = offset | 0;\n        this.size = size;\n\n        this.buffer.on('change', this.onBufferChange, this);\n    }\n\n    protected onBufferChange(): void\n    {\n        this._resourceId = uid('resource');\n\n        this.emit('change', this);\n    }\n\n    /**\n     * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n     * if you want to destroy it as well, or code will explode\n     * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n     */\n    public destroy(destroyBuffer = false): void\n    {\n        this.destroyed = true;\n\n        if (destroyBuffer)\n        {\n            this.buffer.destroy();\n        }\n\n        this.emit('change', this);\n\n        this.buffer = null;\n    }\n}\n","import { warn } from '../../../../../utils/logging/warn.mjs';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction ensureAttributes(geometry, extractedData) {\n  for (const i in geometry.attributes) {\n    const attribute = geometry.attributes[i];\n    const attributeData = extractedData[i];\n    if (attributeData) {\n      attribute.location ?? (attribute.location = attributeData.location);\n      attribute.format ?? (attribute.format = attributeData.format);\n      attribute.offset ?? (attribute.offset = attributeData.offset);\n      attribute.instance ?? (attribute.instance = attributeData.instance);\n    } else {\n      warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n    }\n  }\n  ensureStartAndStride(geometry);\n}\nfunction ensureStartAndStride(geometry) {\n  const { buffers, attributes } = geometry;\n  const tempStride = {};\n  const tempStart = {};\n  for (const j in buffers) {\n    const buffer = buffers[j];\n    tempStride[buffer.uid] = 0;\n    tempStart[buffer.uid] = 0;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    attribute.stride ?? (attribute.stride = tempStride[attribute.buffer.uid]);\n    attribute.start ?? (attribute.start = tempStart[attribute.buffer.uid]);\n    tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n}\n\nexport { ensureAttributes };\n//# sourceMappingURL=ensureAttributes.mjs.map\n","import { warn } from '../../../../../utils/logging/warn';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { Geometry } from '../../../shared/geometry/Geometry';\nimport type { ExtractedAttributeData } from './extractAttributesFromGlProgram';\n\n/**\n * This function looks at the attribute information provided to the geometry and attempts\n * to fill in an gaps. WE do this by looking at the extracted data from the shader and\n * making best guesses.\n *\n * Most of th etime users don't need to provide all the attribute info beyond the data itself, so we\n * can fill in the gaps for them. If you are using attributes in a more advanced way, you can\n * don't forget to add all the info at creation!\n * @param geometry - the geometry to ensure attributes for\n * @param extractedData - the extracted data from the shader\n */\nexport function ensureAttributes(\n    geometry: Geometry,\n    extractedData: Record<string, ExtractedAttributeData>\n): void\n{\n    for (const i in geometry.attributes)\n    {\n        const attribute = geometry.attributes[i];\n        const attributeData = extractedData[i];\n\n        if (attributeData)\n        {\n            attribute.location ??= attributeData.location;\n            attribute.format ??= attributeData.format;\n            attribute.offset ??= attributeData.offset;\n            attribute.instance ??= attributeData.instance;\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n        }\n    }\n\n    ensureStartAndStride(geometry);\n}\n\nfunction ensureStartAndStride(geometry: Geometry): void\n{\n    const { buffers, attributes } = geometry;\n\n    const tempStride: Record<string, number> = {};\n    const tempStart: Record<string, number> = {};\n\n    for (const j in buffers)\n    {\n        const buffer = buffers[j];\n\n        tempStride[buffer.uid] = 0;\n        tempStart[buffer.uid] = 0;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        attribute.stride ??= tempStride[attribute.buffer.uid];\n\n        attribute.start ??= tempStart[attribute.buffer.uid];\n\n        tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n}\n","import { STENCIL_MODES } from '../../shared/state/const.mjs';\n\n\"use strict\";\nconst GpuStencilModesToPixi = [];\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = void 0;\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n  stencilWriteMask: 0,\n  stencilReadMask: 0\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  }\n};\n\nexport { GpuStencilModesToPixi };\n//# sourceMappingURL=GpuStencilModesToPixi.mjs.map\n","import { STENCIL_MODES } from '../../shared/state/const';\n\nexport interface StencilState\n{\n    stencilWriteMask?: number\n    stencilReadMask?: number;\n    stencilFront?: {\n        compare: 'always' | 'equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep';\n    },\n    stencilBack?: {\n        compare: 'always' | 'equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep';\n    }\n}\n\nexport const GpuStencilModesToPixi: StencilState[] = [];\n\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = undefined;\n\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n    stencilWriteMask: 0,\n    stencilReadMask: 0,\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n    stencilWriteMask: 0,\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n};\n","import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection.mjs';\nimport { SystemRunner } from '../system/SystemRunner.mjs';\nimport { CanvasSource } from '../texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\nimport { isRenderingToScreen } from './isRenderingToScreen.mjs';\nimport { RenderTarget } from './RenderTarget.mjs';\n\n\"use strict\";\nclass RenderTargetSystem {\n  constructor(renderer) {\n    /** This is the root viewport for the render pass*/\n    this.rootViewPort = new Rectangle();\n    /** the current viewport that the gpu is using */\n    this.viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    this.onRenderTargetChange = new SystemRunner(\"onRenderTargetChange\");\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    this.projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    this.defaultClearColor = [0, 0, 0, 0];\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    this._renderSurfaceToRenderTargetHash = /* @__PURE__ */ new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    this._renderTargetStack = [];\n    this._renderer = renderer;\n  }\n  /** called when dev wants to finish a render pass */\n  finishRenderPass() {\n    this.adaptor.finishRenderPass(this.renderTarget);\n  }\n  /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */\n  renderStart({\n    target,\n    clear,\n    clearColor,\n    frame\n  }) {\n    this._renderTargetStack.length = 0;\n    this.push(\n      target,\n      clear,\n      clearColor,\n      frame\n    );\n    this.rootViewPort.copyFrom(this.viewport);\n    this.rootRenderTarget = this.renderTarget;\n    this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n  }\n  /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */\n  bind(renderSurface, clear = true, clearColor, frame) {\n    const renderTarget = this.getRenderTarget(renderSurface);\n    const didChange = this.renderTarget !== renderTarget;\n    this.renderTarget = renderTarget;\n    this.renderSurface = renderSurface;\n    const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n    if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n      this.adaptor.resizeGpuRenderTarget(renderTarget);\n      gpuRenderTarget.width = renderTarget.pixelWidth;\n      gpuRenderTarget.height = renderTarget.pixelHeight;\n    }\n    const source = renderTarget.colorTexture;\n    const viewport = this.viewport;\n    const pixelWidth = source.pixelWidth;\n    const pixelHeight = source.pixelHeight;\n    if (!frame && renderSurface instanceof Texture) {\n      frame = renderSurface.frame;\n    }\n    if (frame) {\n      const resolution = source._resolution;\n      viewport.x = frame.x * resolution + 0.5 | 0;\n      viewport.y = frame.y * resolution + 0.5 | 0;\n      viewport.width = frame.width * resolution + 0.5 | 0;\n      viewport.height = frame.height * resolution + 0.5 | 0;\n    } else {\n      viewport.x = 0;\n      viewport.y = 0;\n      viewport.width = pixelWidth;\n      viewport.height = pixelHeight;\n    }\n    calculateProjection(\n      this.projectionMatrix,\n      0,\n      0,\n      viewport.width / source.resolution,\n      viewport.height / source.resolution,\n      !renderTarget.isRoot\n    );\n    this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n    if (didChange) {\n      this.onRenderTargetChange.emit(renderTarget);\n    }\n    return renderTarget;\n  }\n  clear(target, clear = CLEAR.ALL, clearColor) {\n    if (!clear)\n      return;\n    if (target) {\n      target = this.getRenderTarget(target);\n    }\n    this.adaptor.clear(\n      target || this.renderTarget,\n      clear,\n      clearColor,\n      this.viewport\n    );\n  }\n  contextChange() {\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */\n  push(renderSurface, clear = CLEAR.ALL, clearColor, frame) {\n    const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n    this._renderTargetStack.push({\n      renderTarget,\n      frame\n    });\n    return renderTarget;\n  }\n  /** Pops the current render target from the renderer and restores the previous render target. */\n  pop() {\n    this._renderTargetStack.pop();\n    const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n    this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n  }\n  /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */\n  getRenderTarget(renderSurface) {\n    if (renderSurface.isTexture) {\n      renderSurface = renderSurface.source;\n    }\n    return this._renderSurfaceToRenderTargetHash.get(renderSurface) ?? this._initRenderTarget(renderSurface);\n  }\n  /**\n   * Copies a render surface to another texture\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    if (originSrc.x < 0) {\n      size.width += originSrc.x;\n      originDest.x -= originSrc.x;\n      originSrc.x = 0;\n    }\n    if (originSrc.y < 0) {\n      size.height += originSrc.y;\n      originDest.y -= originSrc.y;\n      originSrc.y = 0;\n    }\n    const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n    size.width = Math.min(size.width, pixelWidth - originSrc.x);\n    size.height = Math.min(size.height, pixelHeight - originSrc.y);\n    return this.adaptor.copyToTexture(\n      sourceRenderSurfaceTexture,\n      destinationTexture,\n      originSrc,\n      size,\n      originDest\n    );\n  }\n  /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */\n  ensureDepthStencil() {\n    if (!this.renderTarget.stencil) {\n      this.renderTarget.stencil = true;\n      this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n    }\n  }\n  /** nukes the render target system */\n  destroy() {\n    this._renderer = null;\n    this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) => {\n      if (renderTarget !== key) {\n        renderTarget.destroy();\n      }\n    });\n    this._renderSurfaceToRenderTargetHash.clear();\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  _initRenderTarget(renderSurface) {\n    let renderTarget = null;\n    if (CanvasSource.test(renderSurface)) {\n      renderSurface = getCanvasTexture(renderSurface).source;\n    }\n    if (renderSurface instanceof RenderTarget) {\n      renderTarget = renderSurface;\n    } else if (renderSurface instanceof TextureSource) {\n      renderTarget = new RenderTarget({\n        colorTextures: [renderSurface]\n      });\n      if (CanvasSource.test(renderSurface.source.resource)) {\n        renderTarget.isRoot = true;\n      }\n      renderSurface.once(\"destroy\", () => {\n        renderTarget.destroy();\n        const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n        if (gpuRenderTarget) {\n          this._gpuRenderTargetHash[renderTarget.uid] = null;\n          this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n        }\n      });\n    }\n    this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n    return renderTarget;\n  }\n  getGpuRenderTarget(renderTarget) {\n    return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n  }\n}\n\nexport { RenderTargetSystem };\n//# sourceMappingURL=RenderTargetSystem.mjs.map\n","import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { CLEAR } from '../../gl/const';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection';\nimport { SystemRunner } from '../system/SystemRunner';\nimport { CanvasSource } from '../texture/sources/CanvasSource';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\nimport { isRenderingToScreen } from './isRenderingToScreen';\nimport { RenderTarget } from './RenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { CLEAR_OR_BOOL } from '../../gl/const';\nimport type { GlRenderTarget } from '../../gl/GlRenderTarget';\nimport type { GpuRenderTarget } from '../../gpu/renderTarget/GpuRenderTarget';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * A render surface is a texture, canvas, or render target\n * @memberof rendering\n * @see environment.ICanvas\n * @see rendering.Texture\n * @see rendering.RenderTarget\n */\nexport type RenderSurface = ICanvas | BindableTexture | RenderTarget;\n\n/**\n * stores a render target and its frame\n * @ignore\n */\ninterface RenderTargetAndFrame\n{\n    /** the render target */\n    renderTarget: RenderTarget;\n    /** the frame to use when using the render target */\n    frame: Rectangle\n}\n\n/**\n * An adaptor interface for RenderTargetSystem to support WebGL and WebGPU.\n * This is used internally by the renderer, and is not intended to be used directly.\n * @ignore\n */\nexport interface RenderTargetAdaptor<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget>\n{\n    init(\n        /** the renderer */\n        renderer: Renderer,\n        /** the render target system */\n        renderTargetSystem: RenderTargetSystem<RENDER_TARGET>\n    ): void\n\n    /** A function copies the contents of a render surface to a texture */\n    copyToTexture(\n        /** the render surface to copy from  */\n        sourceRenderSurfaceTexture: RenderTarget,\n        /** the texture to copy to */\n        destinationTexture: Texture,\n        /** the origin of the copy */\n        originSrc: { x: number; y: number },\n        /** the size of the copy */\n        size: { width: number; height: number },\n        /** the destination origin (top left to paste from!) */\n        originDest?: { x: number; y: number },\n    ): Texture\n\n    /** starts a render pass on the render target */\n    startRenderPass(\n        /** the render target to start the render pass on */\n        renderTarget: RenderTarget,\n        /* the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111* */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** clears the current render target to the specified color */\n    clear(\n        /** the render target to clear */\n        renderTarget: RenderTarget,\n        /** the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111 */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to   */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** finishes the current render pass */\n    finishRenderPass(renderTarget: RenderTarget): void\n\n    /**\n     * initializes a gpu render target. Both renderers use this function to initialize a gpu render target\n     * Its different type of object depending on the renderer.\n     */\n    initGpuRenderTarget(\n        /** the render target to initialize */\n        renderTarget: RenderTarget\n    ): RENDER_TARGET\n\n    /** called when a render target is resized */\n    resizeGpuRenderTarget(\n        /** the render target to resize */\n        renderTarget: RenderTarget\n    ): void\n\n    /** destroys the gpu render target */\n    destroyGpuRenderTarget(\n        /** the render target to destroy */\n        gpuRenderTarget: RENDER_TARGET\n    ): void\n}\n\n/**\n * A system that manages render targets. A render target is essentially a place where the shaders can color in the pixels.\n * The render target system is responsible for binding the render target to the renderer, and managing the viewport.\n * Render targets can be pushed and popped.\n *\n * To make it easier, you can also bind textures and canvases too. This will automatically create a render target for you.\n * The render target itself is a lot more powerful than just a texture or canvas,\n * as it can have multiple textures attached to it.\n * It will also give ou fine grain control over the stencil buffer / depth texture.\n * @example\n *\n * ```js\n *\n * // create a render target\n * const renderTarget = new RenderTarget({\n *   colorTextures: [new TextureSource({ width: 100, height: 100 })],\n * });\n *\n * // bind the render target\n * renderer.renderTarget.bind(renderTarget);\n *\n * // draw something!\n * ```\n * @memberof rendering\n */\nexport class RenderTargetSystem<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget> implements System\n{\n    /** When rendering of a scene begins, this is where the root render surface is stored */\n    public rootRenderTarget: RenderTarget;\n    /** This is the root viewport for the render pass*/\n    public rootViewPort = new Rectangle();\n    /** A boolean that lets the dev know if the current render pass is rendering to the screen. Used by some plugins */\n    public renderingToScreen: boolean;\n    /** the current active render target */\n    public renderTarget: RenderTarget;\n    /** the current active render surface that the render target is created from */\n    public renderSurface: RenderSurface;\n    /** the current viewport that the gpu is using */\n    public readonly viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    public readonly onRenderTargetChange = new SystemRunner('onRenderTargetChange');\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    public readonly projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    public readonly defaultClearColor: RgbaArray = [0, 0, 0, 0];\n    /** a reference to the adaptor that interfaces with WebGL / WebGP */\n    public readonly adaptor: RenderTargetAdaptor<RENDER_TARGET>;\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    private readonly _renderSurfaceToRenderTargetHash: Map<RenderSurface, RenderTarget>\n        = new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    private _gpuRenderTargetHash: Record<number, RENDER_TARGET> = Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    private readonly _renderTargetStack: RenderTargetAndFrame[] = [];\n    /** A reference to the renderer */\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /** called when dev wants to finish a render pass */\n    public finishRenderPass()\n    {\n        this.adaptor.finishRenderPass(this.renderTarget);\n    }\n\n    /**\n     * called when the renderer starts to render a scene.\n     * @param options\n     * @param options.target - the render target to render to\n     * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param options.clearColor - the color to clear to\n     * @param options.frame - the frame to render to\n     */\n    public renderStart({\n        target,\n        clear,\n        clearColor,\n        frame\n    }: {\n        target: RenderSurface;\n        clear: CLEAR_OR_BOOL;\n        clearColor: RgbaArray;\n        frame?: Rectangle\n    }): void\n    {\n        // TODO no need to reset this - use optimised index instead\n        this._renderTargetStack.length = 0;\n\n        this.push(\n            target,\n            clear,\n            clearColor,\n            frame\n        );\n\n        this.rootViewPort.copyFrom(this.viewport);\n        this.rootRenderTarget = this.renderTarget;\n        this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n    }\n\n    /**\n     * Binding a render surface! This is the main function of the render target system.\n     * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n     * Once bound all draw calls will be rendered to the render surface.\n     *\n     * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n     * @param renderSurface - the render surface to bind\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to render to\n     * @returns the render target that was bound\n     */\n    public bind(\n        renderSurface: RenderSurface,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    ): RenderTarget\n    {\n        const renderTarget = this.getRenderTarget(renderSurface);\n\n        const didChange = this.renderTarget !== renderTarget;\n\n        this.renderTarget = renderTarget;\n        this.renderSurface = renderSurface;\n\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        if (renderTarget.pixelWidth !== gpuRenderTarget.width\n            || renderTarget.pixelHeight !== gpuRenderTarget.height)\n        {\n            this.adaptor.resizeGpuRenderTarget(renderTarget);\n\n            gpuRenderTarget.width = renderTarget.pixelWidth;\n            gpuRenderTarget.height = renderTarget.pixelHeight;\n        }\n\n        const source = renderTarget.colorTexture;\n        const viewport = this.viewport;\n\n        const pixelWidth = source.pixelWidth;\n        const pixelHeight = source.pixelHeight;\n\n        if (!frame && renderSurface instanceof Texture)\n        {\n            frame = renderSurface.frame;\n        }\n\n        if (frame)\n        {\n            const resolution = source._resolution;\n\n            viewport.x = ((frame.x * resolution) + 0.5) | 0;\n            viewport.y = ((frame.y * resolution) + 0.5) | 0;\n            viewport.width = ((frame.width * resolution) + 0.5) | 0;\n            viewport.height = ((frame.height * resolution) + 0.5) | 0;\n        }\n        else\n        {\n            viewport.x = 0;\n            viewport.y = 0;\n            viewport.width = pixelWidth;\n            viewport.height = pixelHeight;\n        }\n\n        calculateProjection(\n            this.projectionMatrix,\n            0, 0,\n            viewport.width / source.resolution,\n            viewport.height / source.resolution,\n            !renderTarget.isRoot\n        );\n\n        this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n\n        if (didChange)\n        {\n            this.onRenderTargetChange.emit(renderTarget);\n        }\n\n        return renderTarget;\n    }\n\n    public clear(\n        target?: RenderSurface,\n        clear: CLEAR_OR_BOOL = CLEAR.ALL,\n        clearColor?: RgbaArray,\n    )\n    {\n        if (!clear) return;\n\n        if (target)\n        {\n            target = this.getRenderTarget(target);\n        }\n\n        this.adaptor.clear(\n            (target as RenderTarget) || this.renderTarget,\n            clear,\n            clearColor,\n            this.viewport\n        );\n    }\n\n    protected contextChange(): void\n    {\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    /**\n     * Push a render surface to the renderer. This will bind the render surface to the renderer,\n     * @param renderSurface - the render surface to push\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to use when rendering to the render surface\n     */\n    public push(\n        renderSurface: RenderSurface,\n        clear: CLEAR | boolean = CLEAR.ALL,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    )\n    {\n        const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n\n        this._renderTargetStack.push({\n            renderTarget,\n            frame,\n        });\n\n        return renderTarget;\n    }\n\n    /** Pops the current render target from the renderer and restores the previous render target. */\n    public pop()\n    {\n        this._renderTargetStack.pop();\n\n        const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n\n        this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n    }\n\n    /**\n     * Gets the render target from the provide render surface. Eg if its a texture,\n     * it will return the render target for the texture.\n     * If its a render target, it will return the same render target.\n     * @param renderSurface - the render surface to get the render target for\n     * @returns the render target for the render surface\n     */\n    public getRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        if (((renderSurface as Texture).isTexture))\n        {\n            renderSurface = (renderSurface as Texture).source;\n        }\n\n        return this._renderSurfaceToRenderTargetHash.get(renderSurface)\n        ?? this._initRenderTarget(renderSurface);\n    }\n\n    /**\n     * Copies a render surface to another texture\n     * @param sourceRenderSurfaceTexture - the render surface to copy from\n     * @param destinationTexture - the texture to copy to\n     * @param originSrc - the origin of the copy\n     * @param originSrc.x - the x origin of the copy\n     * @param originSrc.y - the y origin of the copy\n     * @param size - the size of the copy\n     * @param size.width - the width of the copy\n     * @param size.height - the height of the copy\n     * @param originDest - the destination origin (top left to paste from!)\n     * @param originDest.x - the x origin of the paste\n     * @param originDest.y - the y origin of the paste\n     */\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number },\n        size: { width: number; height: number },\n        originDest: { x: number; y: number; },\n    )\n    {\n        // fit the size to the source we don't want to go out of bounds\n\n        if (originSrc.x < 0)\n        {\n            size.width += originSrc.x;\n            originDest.x -= originSrc.x;\n            originSrc.x = 0;\n        }\n\n        if (originSrc.y < 0)\n        {\n            size.height += originSrc.y;\n            originDest.y -= originSrc.y;\n            originSrc.y = 0;\n        }\n\n        const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n\n        size.width = Math.min(size.width, pixelWidth - originSrc.x);\n        size.height = Math.min(size.height, pixelHeight - originSrc.y);\n\n        return this.adaptor.copyToTexture(\n            sourceRenderSurfaceTexture,\n            destinationTexture,\n            originSrc,\n            size,\n            originDest\n        );\n    }\n\n    /**\n     * ensures that we have a depth stencil buffer available to render to\n     * This is used by the mask system to make sure we have a stencil buffer.\n     */\n    public ensureDepthStencil()\n    {\n        if (!this.renderTarget.stencil)\n        {\n            this.renderTarget.stencil = true;\n\n            this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n        }\n    }\n\n    /** nukes the render target system */\n    public destroy()\n    {\n        (this._renderer as null) = null;\n\n        this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) =>\n        {\n            if (renderTarget !== key)\n            {\n                renderTarget.destroy();\n            }\n        });\n\n        this._renderSurfaceToRenderTargetHash.clear();\n\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    private _initRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        let renderTarget: RenderTarget = null;\n\n        if (CanvasSource.test(renderSurface))\n        {\n            renderSurface = getCanvasTexture(renderSurface as ICanvas).source;\n        }\n\n        if (renderSurface instanceof RenderTarget)\n        {\n            renderTarget = renderSurface;\n        }\n        else if (renderSurface instanceof TextureSource)\n        {\n            renderTarget = new RenderTarget({\n                colorTextures: [renderSurface],\n            });\n\n            if (CanvasSource.test(renderSurface.source.resource))\n            {\n                renderTarget.isRoot = true;\n            }\n\n            // TODO add a test for this\n            renderSurface.once('destroy', () =>\n            {\n                renderTarget.destroy();\n\n                const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n\n                if (gpuRenderTarget)\n                {\n                    this._gpuRenderTargetHash[renderTarget.uid] = null;\n                    this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n                }\n            });\n        }\n\n        this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n\n        return renderTarget;\n    }\n\n    public getGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        return this._gpuRenderTargetHash[renderTarget.uid]\n        || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n    }\n}\n","\"use strict\";\nfunction calculateProjection(pm, x, y, width, height, flipY) {\n  const sign = flipY ? 1 : -1;\n  pm.identity();\n  pm.a = 1 / width * 2;\n  pm.d = sign * (1 / height * 2);\n  pm.tx = -1 - x * pm.a;\n  pm.ty = -sign - y * pm.d;\n  return pm;\n}\n\nexport { calculateProjection };\n//# sourceMappingURL=calculateProjection.mjs.map\n","import type { Matrix } from '../../../../maths/matrix/Matrix';\n\nexport function calculateProjection(\n    pm: Matrix,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    flipY: boolean\n): Matrix\n{\n    const sign = flipY ? 1 : -1;\n\n    pm.identity();\n\n    pm.a = (1 / width * 2);\n    pm.d = sign * (1 / height * 2);\n\n    pm.tx = -1 - (x * pm.a);\n    pm.ty = -sign - (y * pm.d);\n\n    return pm;\n}\n","\"use strict\";\nfunction isRenderingToScreen(renderTarget) {\n  const resource = renderTarget.colorTexture.source.resource;\n  return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement && document.body.contains(resource);\n}\n\nexport { isRenderingToScreen };\n//# sourceMappingURL=isRenderingToScreen.mjs.map\n","import type { RenderTarget } from './RenderTarget';\n\n/**\n * Checks if the render target is viewable on the screen\n * Basically, is it a canvas element and is that canvas element in the DOM\n * @param renderTarget - the render target to check\n * @returns true if the render target is viewable on the screen\n */\nexport function isRenderingToScreen(renderTarget: RenderTarget): boolean\n{\n    const resource = renderTarget.colorTexture.source.resource;\n\n    return ((globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement) && document.body.contains(resource));\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$interopDefault","a","__esModule","default","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","$b4b1ba1cdca9a769$export$db13c76603bca4d1","$b4b1ba1cdca9a769$export$dfbe934dc5760b41","name","vertex","header","main","fragment","$8eb8d7293d727080$export$556f4f9086226a47","$8eb8d7293d727080$export$4804359c3f750499","$8zmEe","$4b1tr","$iq4Mo","$aeLnu","$f8UzK","$70iBB","$lm5jj","$6Tf82","$6dSGR","$12ovK","$dYc5p","$ehnqt","$bbQtN","$8OWAV","$dxsuA","$pVL8q","$3yPFG","BackgroundSystem","GlobalUniformSystem","HelloSystem","ViewSystem","RenderGroupSystem","TextureGCSystem","GenerateTextureSystem","ExtractSystem","RendererInitHook","BlendModePipe","BatcherPipe","SpritePipe","RenderGroupPipe","AlphaMaskPipe","StencilMaskPipe","ColorMaskPipe","CustomRenderPipe","$6af073b1f1cdfddd$export$e576ade34298fbbb","$fgNUY","constructor","renderer","_renderer","addRenderable","container","instructionSet","renderPipes","batch","break","add","execute","isRenderable","render","destroy","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","$91b4e43337b8edcd$export$9d1db8757b18c590","$agj0A","addRenderGroup","renderGroup","globalUniforms","push","worldTransformMatrix","worldTransform","worldColor","worldColorAlpha","executeInstructions","pop","$92584891c770782f$export$de87bf58cb76142c","instructions","i","instructionSize","instruction","renderPipeId","$429d57e5692cdc49$export$e48941ab3223d0e5","$2FMN6","$2S0kj","$eNwlK","$39AUq","$4MdtP","$429d57e5692cdc49$var$tempMatrix","Matrix","transform","isRenderGroup","parent","renderGroupParent","renderGroups","collectRenderGroups","originalLocalTransform","copyFrom","localTransform","length","runOnRender","structureDidChange","validateRenderables","updateRenderGroupTransforms","buildInstructions","$429d57e5692cdc49$var$updateRenderables","list","index","childrenRenderablesToUpdate","didViewUpdate","updateRenderable","upload","start","uniformBatch","renderEnd","WebGLSystem","WebGPUSystem","CanvasSystem","$0d1b345ef5cb541a$export$bc99a0392fedc260","root","reset","buildStart","blendMode","colorMask","sortableChildren","sortChildren","$0d1b345ef5cb541a$var$collectAllRenderablesAdvanced","buildEnd","$0d1b345ef5cb541a$export$d0ce49decf05e61d","rendererPipes","globalDisplayStatus","includeInBuild","isSimple","$0d1b345ef5cb541a$var$collectAllRenderablesSimple","setBlendMode","groupBlendMode","rp","children","isRoot","effects","effect","pipe","$8dcd18fd45ce4877$export$5a19a0766b66a8a2","out","renderGroupChildren","$a8e28e8fdd0c1cd9$export$1c1e67f49974a5b5","updateChildRenderGroups","$a8e28e8fdd0c1cd9$export$50ad8695661e3665","worldAlpha","appendFrom","relativeGroupTransform","$4lIEI","mixColors","groupColor","groupAlpha","localColor","localAlpha","childrenToUpdate","updateTick","j","renderGroupDepth","Number","childrenAtDepth","child","parentRenderGroup","relativeRenderGroupDepth","$a8e28e8fdd0c1cd9$export$cf7b65c878eb783a","updateFlags","didChange","updateLocalTransform","_updateFlags","$a8e28e8fdd0c1cd9$var$UPDATE_BLEND_COLOR_VISIBLE","$a8e28e8fdd0c1cd9$var$updateColorBlendVisibility","$a8e28e8fdd0c1cd9$var$tempContainer","$jNMvk","Container","UPDATE_VISIBLE","UPDATE_COLOR","UPDATE_BLEND","groupColorAlpha","localBlendMode","localDisplayStatus","$5b498936bda355a0$export$72a85c3a80ccc403","$5557G","localBGRColor","parentBGRColor","mixHexColors","$e49629c82e090213$export$ff72adc46f6bc63c","color1","color2","ratio","r1","g1","b1","r","r2","g","g2","b2","$9b5c7f5ae566db58$export$40044447708e4acc","rebuildRequired","renderable","validateRenderable","$0673ecf3b594ae13$export$ffb847f6753f2536","$6oSd9","$8etFB","_gpuSpriteHash","create","sprite","_instructionSet","gpuSprite","_getGpuSprite","_didSpriteUpdate","_updateBatchableSprite","addToBatch","uid","batcher","updateElement","texture","_texture","_source","checkAndUpdateTexture","destroyRenderable","batchableSprite","BigPool","return","bounds","_initGPUSprite","BatchableSprite","roundPixels","_roundPixels","on","$ddc376e86491dd3d$export$3cdd191b816b3f8a","$1ejJa","$gwSFa","$2LmXQ","adaptor","state","State","for2d","_batches","_geometries","_adaptor","init","Batcher","BatchGeometry","_activeBatch","_activeGeometry","begin","batchableObject","activeBatch","geometry","finish","indexBuffer","setDataWithSize","indexSize","buffers","attributeBuffer","float32View","attributeSize","dirty","update","action","$ba67da743cf683ed$export$cf1e9fa5acb94ac4","$g4vXD","$doBgq","$bPvY0","$aWc9h","$bJJoy","$kYZ33","$hl8zr","$8FHyN","$ba67da743cf683ed$var$tempBounds","Bounds","$ba67da743cf683ed$var$AlphaMaskEffect","FilterEffect","filters","MaskFilter","Sprite","Texture","EMPTY","resolution","antialias","value","_activeMaskStage","mask","maskedContainer","canBundle","renderMaskToTexture","maskContainer","collectAllRenderables","_maskedContainer","renderMask","filterEffect","measurable","getGlobalBounds","ceil","colorTextureSource","renderTarget","colorTexture","source","filterTexture","TexturePool","getOptimalTexture","width","height","_resolution","offset","tx","minX","ty","minY","maskData","RendererType","WEBGL","finishRenderPass","filter","returnTexture","$7ab0456e9383cec3$export$6d9155deae913447","$4eDOa","$jgAMU","$1DaYW","$4BA77","$iCWdi","$aaGfl","$1d6eW","$5Gkgu","Filter","options","rest","textureMatrix","TextureMatrix","gpuProgram","GpuProgram","from","entryPoint","glProgram","GlProgram","resources","filterUniforms","UniformGroup","uFilterMatrix","uMaskClamp","uClampFrame","uAlpha","uMaskTexture","_textureMatrix","apply","filterManager","input","output","clearMode","calculateSpriteMatrix","uniforms","prepend","mapCoord","applyFilter","$10aef23a8dac1aee$export$ec91da630f36d5ea","$5aR97","$10aef23a8dac1aee$var$_Filter","_Filter","Shader","defaultOptions","enabled","_state","padding","blendRequired","addResource","gpu","gl","$f71c00470c6e49e0$export$2e2bcd8739ae039","$72d2c00be15b8b0f$export$2e2bcd8739ae039","$979261b56fcdf422$export$2e2bcd8739ae039","$0aa1dd3571fbf52d$export$d4c3af11a9f163be","_colorStack","_colorStackIndex","_currentColor","_container","colorStack","currentColor","_mask","setMask","$e6e4e97e12e6f44a$export$6875bb6e3a32089e","$9g4gv","$iTIsm","_maskStackHash","_maskHash","WeakMap","_a","has","instructionsStart","instructionsLength","renderTargetUid","maskStackIndex","ensureDepthStencil","stencil","setStencilMode","STENCIL_MODES","RENDERING_MASK_ADD","MASK_ACTIVE","RENDERING_MASK_REMOVE","clear","CLEAR","STENCIL","DISABLED","$93b7e52ed95361ae$export$c69cd65c8827ac23","$iUbYJ","$93b7e52ed95361ae$var$_BackgroundSystem","_BackgroundSystem","clearBeforeRender","_backgroundColor","Color","color","alpha","background","backgroundColor","backgroundAlpha","setAlpha","setValue","colorRgba","toArray","priority","$cd31a9e6fa58571e$export$fee7195ef0d08bcf","$eDLY3","$cd31a9e6fa58571e$var$BLEND_MODE_FILTERS","extensions","handle","BlendMode","Error","ref","_isAdvanced","_filterHash","_activeBlendMode","_renderableList","_endAdvancedBlendMode","_beginAdvancedBlendMode","warn","renderables","$14c2b94ad0cbd3dc$export$14c75b573db98096","$14c2b94ad0cbd3dc$var$imageTypes","png","jpg","webp","$14c2b94ad0cbd3dc$var$_ExtractSystem","_ExtractSystem","_normalizeOptions","defaults","target","image","Image","src","base64","format","quality","defaultImageOptions","canvas","toBlob","Promise","resolve","reject","blob","reader","FileReader","onload","result","onerror","readAsDataURL","toDataURL","convertToBlob","generateCanvas","textureGenerator","generateTexture","pixels","pixelInfo","getPixels","download","link","document","createElement","filename","href","body","appendChild","click","removeChild","log","console","$e5d205e036ae41a9$export$690776504ee197a6","$cYXQE","$2A18g","$9UFJ1","$e5d205e036ae41a9$var$tempRect","Rectangle","$e5d205e036ae41a9$var$tempBounds","$e5d205e036ae41a9$var$noColor","frame","textureSourceOptions","view","clearColor","isRGBAArray","Array","isArray","shared","region","copyTo","getLocalBounds","rectangle","Math","max","RenderTexture","translate","x","y","updateMipmaps","$ba7eeb57d12b8763$export$813984f7330b4d72","$cyN9N","TextureSource","resize","$9084d76fe2b84b9e$export$b9b6391a4528dd78","$dXIDd","$1oROT","$jmtJ5","_stackIndex","_globalUniformDataStack","_uniformsPool","_activeUniforms","_bindGroupPool","_activeBindGroups","bind","size","projectionMatrix","bindGroup","currentGlobalUniformData","projectionData","Point","globalUniformData","uniformGroup","_createUniforms","uProjectionMatrix","uResolution","uWorldTransformMatrix","color32BitToUniform","uWorldColorAlpha","getUniformBindGroup","BindGroup","setResource","_currentGlobalUniformData","Float32Array","isStatic","$12038a5d7e865df1$export$63ce3e62fccb6f39","$kskfL","hello","context","webGLVersion","sayHello","$9b842ad525f22676$export$2c6a96c059a06e7c","$lTNTn","$9b842ad525f22676$var$saidHello","$9b842ad525f22676$export$a4ad2735b021c132","DOMAdapter","getNavigator","userAgent","toLowerCase","indexOf","args","$14773b2271c934b6$export$a47b032752d8e393","$14773b2271c934b6$var$_TextureGCSystem","_TextureGCSystem","count","checkCount","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","active","textureGCActive","postrender","renderingToScreen","run","managedTextures","autoGarbageCollect","resource","_touched","unload","$ad808d740f439250$export$6f21c3d5af6602af","$fi8wV","$QyiBP","$7lQPp","$ad808d740f439250$var$_ViewSystem","_ViewSystem","deprecation","v8_0_0","screen","createCanvas","getCanvasTexture","RenderTarget","colorTextures","depth","transparent","multiView","autoDensity","style","desiredScreenWidth","desiredScreenHeight","removeView","parentNode","$54a369a699af04c0$export$efcb1f8bf367cbfb","$1UVG8","$54a369a699af04c0$var$_RenderTarget","_RenderTarget","descriptor","dirtyId","_size","_managedColorTextures","map","colorSource","onSourceResize","depthStencilTexture","ensureDepthStencilTexture","pixelWidth","pixelHeight","autoGenerateMipmaps","mipLevelCount","skipColorTexture","forEach","off","$7be991b12bb441df$export$f2bcae39472d9516","$ihl4g","$7be991b12bb441df$var$canvasCache","Map","CanvasSource","onDestroy","delete","once","$3dba9287fbaa4a78$export$649c859891b4f4a9","$9i2X6","$lGvus","$jxRST","_syncFunctionHash","_systemCheck","unsafeEvalSupported","ensureUniformGroup","uniformData","getUniformGroupData","buffer","Buffer","data","layout","usage","BufferUsage","UNIFORM","COPY_DST","_signature","_initUniformGroup","uniformGroupSignature","elements","keys","uniformStructures","createUboElements","syncFunction","_generateUboSync","uboElements","generateUboSync","syncUniformGroup","uniformGroupData","updateUniformGroup","_dirtyId","synced","$c9d0b153c49b9d10$export$d72cdd5376f8af8e","$lfLYu","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","parsed","uniformParsers","uniformParser","test","ubo","template","Function","join","$8fda3e90a94e25e4$export$cf9f41a7e506e2d2","uniform","red","$9dc303e26e5d6117$var$loopMatrix","col","row","$9dc303e26e5d6117$export$c761ef20854b0b5b","$9dc303e26e5d6117$export$53279b3783655315","f32","i32","$03f1ab435b41e920$export$a79ef781de624449","$hcgfX","_resourceType","_resourceId","_bufferResource","destroyed","onBufferChange","emit","destroyBuffer","$60d034994609dc7a$export$abe4b4eea56679f6","$j05nj","extractedData","attributes","attribute","attributeData","location","instance","$60d034994609dc7a$var$ensureStartAndStride","tempStride","tempStart","getAttributeInfoFromFormat","stride","$aa02c68e124f5557$export$861c1bf8bb2cddc7","NONE","stencilWriteMask","stencilReadMask","stencilFront","compare","passOp","stencilBack","$4bdac1b0be38913e$export$c555e722a4d2378a","$biPuC","$9LsEj","$aamgd","rootViewPort","viewport","onRenderTargetChange","SystemRunner","defaultClearColor","_renderSurfaceToRenderTargetHash","_gpuRenderTargetHash","_renderTargetStack","renderStart","rootRenderTarget","isRenderingToScreen","renderSurface","getRenderTarget","gpuRenderTarget","getGpuRenderTarget","resizeGpuRenderTarget","calculateProjection","startRenderPass","ALL","contextChange","currentRenderTargetData","isTexture","_initRenderTarget","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","min","key","destroyGpuRenderTarget","initGpuRenderTarget","$93dd80894848cea6$export$fa0a4f720dae18a1","pm","flipY","sign","identity","d","$02cbc676d6bab1a6$export$6eeeb7b7562073b1","HTMLCanvasElement","contains"],"version":3,"file":"WebGPURenderer.74344b3d.js.map"}