{"mappings":"CCKC,AAAA,WAIC,IAAM,EAAc,iBAEd,EAAU,WAQhB,SAAS,EAAU,CAAI,CAAE,CAAK,CAAE,CAAI,EAClC,GAAI,CACF,IAAM,EAAO,IAAI,KACjB,EAAK,OAAO,CAAC,EAAK,OAAO,GAAK,AAAA,MAAA,GAC9B,IAAM,EAAU,CAAC,QAAQ,EAAE,EAAK,WAAW,GAAG,CAAC,AAC/C,CAAA,SAAS,MAAM,CAAG,CAAC,EAAE,EAAK,CAAC,EAAE,EAAM,CAAC,EAAE,EAAQ,oBAAoB,CAAC,AACrE,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,wBAAyB,EACzC,CACF,CAsCA,SAAS,IACP,IAAM,EAAQ,SAAS,cAAc,CAAC,wBAClC,IACF,EAAM,SAAS,CAAC,GAAG,CAAC,UACpB,SAAS,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAG,GAEnC,CAKA,SAAS,IACP,EAAU,EAAa,WApED,KAqEtB,IACA,GACF,CAKA,SAAS,IACP,EAAU,EAAa,WA7ED,KA8EtB,GAEF,CAKA,SAAS,IACP,IAAI,OAAO,SAAS,CAEpB,GAAI,CACF,IAAM,EAAS,SAAS,aAAa,CAAC,SACtC,CAAA,EAAO,WAAW,CAAG,CAAC;;+BAEG,EAAE,EAAQ;;;;;;;;;;yDAUgB,EAAE,EAAQ;YACvD,CAAC,CACP,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,OAAO,SAAS,CAAG,CAAA,CACrB,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,qBAAsB,EACtC,CACF,CAKA,SAAS,IACP,IAAM,EAAU,AA1FlB,SAAmB,CAAI,EACrB,GAAI,CACF,IAAM,EAAS,CAAC,EAAE,EAAK,CAAC,CAAC,CACnB,EAAK,SAAS,MAAM,CAAC,KAAK,CAAC,KACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,MAAM,CAAE,IAAK,CAClC,IAAI,EAAI,CAAE,CAAC,EAAE,CACb,KAAO,AAAgB,MAAhB,EAAE,MAAM,CAAC,IAAY,EAAI,EAAE,SAAS,CAAC,EAAG,EAAE,MAAM,EACvD,GAAI,AAAsB,IAAtB,EAAE,OAAO,CAAC,GACZ,OAAO,EAAE,SAAS,CAAC,EAAO,MAAM,CAAE,EAAE,MAAM,CAC9C,CACA,OAAO,IACT,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,wBAAyB,GAChC,IACT,CACF,EA2E4B,EACtB,AAAY,CAAA,aAAZ,EACF,IACqB,aAAZ,GACT,AA1EJ,WACE,IAAM,EAAQ,SAAS,cAAc,CAAC,wBAClC,IACF,EAAM,SAAS,CAAC,MAAM,CAAC,UACvB,SAAS,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAG,SAEnC,IAuEE,IAAM,EAAe,SAAS,cAAc,CAAC,kBACvC,EAAe,SAAS,cAAc,CAAC,kBAEzC,GACF,EAAa,gBAAgB,CAAC,QAAS,GAErC,GACF,EAAa,gBAAgB,CAAC,QAAS,EAE3C,CAGI,AAAwB,YAAxB,SAAS,UAAU,CACrB,SAAS,gBAAgB,CAAC,mBAAoB,GAE9C,GAEJ","sources":["<anon>","env/assets/js/global/modal.js"],"sourcesContent":["(() => {\n/**\n * Cookie Consent Module\n * This module handles the cookie consent functionality for the website.\n */ (function() {\n    \"use strict\";\n    // Configuration\n    const COOKIE_NAME = \"cookie_consent\";\n    const COOKIE_DURATION = 365; // days\n    const GTM_KEY = \"NXXB8JJH\";\n    /**\n   * Sets a cookie with the given name, value, and expiration days.\n   * @param {string} name - The name of the cookie.\n   * @param {string} value - The value of the cookie.\n   * @param {number} days - The number of days until the cookie expires.\n   */ function setCookie(name, value, days) {\n        try {\n            const date = new Date();\n            date.setTime(date.getTime() + days * 86400000);\n            const expires = `expires=${date.toUTCString()}`;\n            document.cookie = `${name}=${value};${expires};path=/;SameSite=Lax`;\n        } catch (error) {\n            console.error(\"Error setting cookie:\", error);\n        }\n    }\n    /**\n   * Gets the value of a cookie by its name.\n   * @param {string} name - The name of the cookie.\n   * @returns {string|null} The value of the cookie or null if not found.\n   */ function getCookie(name) {\n        try {\n            const nameEQ = `${name}=`;\n            const ca = document.cookie.split(\";\");\n            for(let i = 0; i < ca.length; i++){\n                let c = ca[i];\n                while(c.charAt(0) === \" \")c = c.substring(1, c.length);\n                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Error getting cookie:\", error);\n            return null;\n        }\n    }\n    /**\n   * Shows the cookie consent modal.\n   */ function showModal() {\n        const modal = document.getElementById(\"cookie-consent-modal\");\n        if (modal) {\n            modal.classList.remove(\"hidden\");\n            document.body.style.overflow = \"hidden\"; // Prevent scrolling\n        }\n    }\n    /**\n   * Hides the cookie consent modal.\n   */ function hideModal() {\n        const modal = document.getElementById(\"cookie-consent-modal\");\n        if (modal) {\n            modal.classList.add(\"hidden\");\n            document.body.style.overflow = \"\"; // Re-enable scrolling\n        }\n    }\n    /**\n   * Handles the acceptance of cookies.\n   */ function acceptCookies() {\n        setCookie(COOKIE_NAME, \"accepted\", COOKIE_DURATION);\n        hideModal();\n        loadGTM();\n    }\n    /**\n   * Handles the rejection of non-essential cookies.\n   */ function rejectCookies() {\n        setCookie(COOKIE_NAME, \"rejected\", COOKIE_DURATION);\n        hideModal();\n    // Implement logic here to disable non-essential cookies/tracking\n    }\n    /**\n   * Loads the Google Tag Manager script.\n   */ function loadGTM() {\n        if (window.gtmLoaded) return; // Prevent loading GTM multiple times\n        try {\n            const script = document.createElement(\"script\");\n            script.textContent = `\n                (function(w,d,s,l,i){\n                    var key = '${GTM_KEY}';\n                    var prefix = atob('R1RNLg==');\n                    w[l]=w[l]||[];\n                    w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});\n                    var f=d.getElementsByTagName(s)[0],\n                        j=d.createElement(s),\n                        dl=l!='dataLayer'?'&l='+l:'';\n                    j.async=true;\n                    j.src='/js/global/takaralytics.js?id=' + prefix + key;\n                    f.parentNode.insertBefore(j,f);\n                })(window,document,'script','dataLayer','${GTM_KEY}');\n            `;\n            document.head.appendChild(script);\n            window.gtmLoaded = true;\n        } catch (error) {\n            console.error(\"Error loading GTM:\", error);\n        }\n    }\n    /**\n   * Initializes the cookie consent functionality.\n   */ function init() {\n        const consent = getCookie(COOKIE_NAME);\n        if (consent === \"accepted\") loadGTM();\n        else if (consent !== \"rejected\") showModal();\n        const acceptButton = document.getElementById(\"accept-cookies\");\n        const rejectButton = document.getElementById(\"reject-cookies\");\n        if (acceptButton) acceptButton.addEventListener(\"click\", acceptCookies);\n        if (rejectButton) rejectButton.addEventListener(\"click\", rejectCookies);\n    }\n    // Initialize the module when the DOM is fully loaded\n    if (document.readyState === \"loading\") document.addEventListener(\"DOMContentLoaded\", init);\n    else init();\n})();\n\n})();\n//# sourceMappingURL=modal.js.map\n","/**\n * Cookie Consent Module\n * This module handles the cookie consent functionality for the website.\n */\n\n(function () {\n  \"use strict\";\n\n  // Configuration\n  const COOKIE_NAME = \"cookie_consent\";\n  const COOKIE_DURATION = 365; // days\n  const GTM_KEY = \"NXXB8JJH\";\n\n  /**\n   * Sets a cookie with the given name, value, and expiration days.\n   * @param {string} name - The name of the cookie.\n   * @param {string} value - The value of the cookie.\n   * @param {number} days - The number of days until the cookie expires.\n   */\n  function setCookie(name, value, days) {\n    try {\n      const date = new Date();\n      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n      const expires = `expires=${date.toUTCString()}`;\n      document.cookie = `${name}=${value};${expires};path=/;SameSite=Lax`;\n    } catch (error) {\n      console.error(\"Error setting cookie:\", error);\n    }\n  }\n\n  /**\n   * Gets the value of a cookie by its name.\n   * @param {string} name - The name of the cookie.\n   * @returns {string|null} The value of the cookie or null if not found.\n   */\n  function getCookie(name) {\n    try {\n      const nameEQ = `${name}=`;\n      const ca = document.cookie.split(\";\");\n      for (let i = 0; i < ca.length; i++) {\n        let c = ca[i];\n        while (c.charAt(0) === \" \") c = c.substring(1, c.length);\n        if (c.indexOf(nameEQ) === 0)\n          return c.substring(nameEQ.length, c.length);\n      }\n      return null;\n    } catch (error) {\n      console.error(\"Error getting cookie:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Shows the cookie consent modal.\n   */\n  function showModal() {\n    const modal = document.getElementById(\"cookie-consent-modal\");\n    if (modal) {\n      modal.classList.remove(\"hidden\");\n      document.body.style.overflow = \"hidden\"; // Prevent scrolling\n    }\n  }\n\n  /**\n   * Hides the cookie consent modal.\n   */\n  function hideModal() {\n    const modal = document.getElementById(\"cookie-consent-modal\");\n    if (modal) {\n      modal.classList.add(\"hidden\");\n      document.body.style.overflow = \"\"; // Re-enable scrolling\n    }\n  }\n\n  /**\n   * Handles the acceptance of cookies.\n   */\n  function acceptCookies() {\n    setCookie(COOKIE_NAME, \"accepted\", COOKIE_DURATION);\n    hideModal();\n    loadGTM();\n  }\n\n  /**\n   * Handles the rejection of non-essential cookies.\n   */\n  function rejectCookies() {\n    setCookie(COOKIE_NAME, \"rejected\", COOKIE_DURATION);\n    hideModal();\n    // Implement logic here to disable non-essential cookies/tracking\n  }\n\n  /**\n   * Loads the Google Tag Manager script.\n   */\n  function loadGTM() {\n    if (window.gtmLoaded) return; // Prevent loading GTM multiple times\n\n    try {\n      const script = document.createElement(\"script\");\n      script.textContent = `\n                (function(w,d,s,l,i){\n                    var key = '${GTM_KEY}';\n                    var prefix = atob('R1RNLg==');\n                    w[l]=w[l]||[];\n                    w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});\n                    var f=d.getElementsByTagName(s)[0],\n                        j=d.createElement(s),\n                        dl=l!='dataLayer'?'&l='+l:'';\n                    j.async=true;\n                    j.src='/js/global/takaralytics.js?id=' + prefix + key;\n                    f.parentNode.insertBefore(j,f);\n                })(window,document,'script','dataLayer','${GTM_KEY}');\n            `;\n      document.head.appendChild(script);\n      window.gtmLoaded = true;\n    } catch (error) {\n      console.error(\"Error loading GTM:\", error);\n    }\n  }\n\n  /**\n   * Initializes the cookie consent functionality.\n   */\n  function init() {\n    const consent = getCookie(COOKIE_NAME);\n    if (consent === \"accepted\") {\n      loadGTM();\n    } else if (consent !== \"rejected\") {\n      showModal();\n    }\n\n    const acceptButton = document.getElementById(\"accept-cookies\");\n    const rejectButton = document.getElementById(\"reject-cookies\");\n\n    if (acceptButton) {\n      acceptButton.addEventListener(\"click\", acceptCookies);\n    }\n    if (rejectButton) {\n      rejectButton.addEventListener(\"click\", rejectCookies);\n    }\n  }\n\n  // Initialize the module when the DOM is fully loaded\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", init);\n  } else {\n    init();\n  }\n})();\n"],"names":["COOKIE_NAME","GTM_KEY","setCookie","name","value","days","date","Date","setTime","getTime","expires","toUTCString","document","cookie","error","console","hideModal","modal","getElementById","classList","add","body","style","overflow","acceptCookies","loadGTM","rejectCookies","window","gtmLoaded","script","createElement","textContent","head","appendChild","init","consent","getCookie","nameEQ","ca","split","i","length","c","charAt","substring","indexOf","showModal","remove","acceptButton","rejectButton","addEventListener","readyState"],"version":3,"file":"modal.js.map"}